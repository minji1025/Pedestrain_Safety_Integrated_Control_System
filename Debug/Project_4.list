
Project_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009240  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  080093e0  080093e0  000193e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800954c  0800954c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800954c  0800954c  0001954c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009554  08009554  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009554  08009554  00019554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009558  08009558  00019558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800955c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004fc  2000006c  080095c8  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000568  080095c8  00020568  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013b41  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fc7  00000000  00000000  00033c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012b8  00000000  00000000  00036be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ea4  00000000  00000000  00037ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000185fb  00000000  00000000  00038d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000166fb  00000000  00000000  0005133f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092ff9  00000000  00000000  00067a3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000595c  00000000  00000000  000faa34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003f  00000000  00000000  00100390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080093c8 	.word	0x080093c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	080093c8 	.word	0x080093c8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b970 	b.w	8000d54 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9e08      	ldr	r6, [sp, #32]
 8000a92:	460d      	mov	r5, r1
 8000a94:	4604      	mov	r4, r0
 8000a96:	460f      	mov	r7, r1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d14a      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4694      	mov	ip, r2
 8000aa0:	d965      	bls.n	8000b6e <__udivmoddi4+0xe2>
 8000aa2:	fab2 f382 	clz	r3, r2
 8000aa6:	b143      	cbz	r3, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000aac:	f1c3 0220 	rsb	r2, r3, #32
 8000ab0:	409f      	lsls	r7, r3
 8000ab2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ab6:	4317      	orrs	r7, r2
 8000ab8:	409c      	lsls	r4, r3
 8000aba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000abe:	fa1f f58c 	uxth.w	r5, ip
 8000ac2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ac6:	0c22      	lsrs	r2, r4, #16
 8000ac8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000acc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ad0:	fb01 f005 	mul.w	r0, r1, r5
 8000ad4:	4290      	cmp	r0, r2
 8000ad6:	d90a      	bls.n	8000aee <__udivmoddi4+0x62>
 8000ad8:	eb1c 0202 	adds.w	r2, ip, r2
 8000adc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ae0:	f080 811c 	bcs.w	8000d1c <__udivmoddi4+0x290>
 8000ae4:	4290      	cmp	r0, r2
 8000ae6:	f240 8119 	bls.w	8000d1c <__udivmoddi4+0x290>
 8000aea:	3902      	subs	r1, #2
 8000aec:	4462      	add	r2, ip
 8000aee:	1a12      	subs	r2, r2, r0
 8000af0:	b2a4      	uxth	r4, r4
 8000af2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000af6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000afa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000afe:	fb00 f505 	mul.w	r5, r0, r5
 8000b02:	42a5      	cmp	r5, r4
 8000b04:	d90a      	bls.n	8000b1c <__udivmoddi4+0x90>
 8000b06:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b0e:	f080 8107 	bcs.w	8000d20 <__udivmoddi4+0x294>
 8000b12:	42a5      	cmp	r5, r4
 8000b14:	f240 8104 	bls.w	8000d20 <__udivmoddi4+0x294>
 8000b18:	4464      	add	r4, ip
 8000b1a:	3802      	subs	r0, #2
 8000b1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b20:	1b64      	subs	r4, r4, r5
 8000b22:	2100      	movs	r1, #0
 8000b24:	b11e      	cbz	r6, 8000b2e <__udivmoddi4+0xa2>
 8000b26:	40dc      	lsrs	r4, r3
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0xbc>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	f000 80ed 	beq.w	8000d16 <__udivmoddi4+0x28a>
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b42:	4608      	mov	r0, r1
 8000b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b48:	fab3 f183 	clz	r1, r3
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	d149      	bne.n	8000be4 <__udivmoddi4+0x158>
 8000b50:	42ab      	cmp	r3, r5
 8000b52:	d302      	bcc.n	8000b5a <__udivmoddi4+0xce>
 8000b54:	4282      	cmp	r2, r0
 8000b56:	f200 80f8 	bhi.w	8000d4a <__udivmoddi4+0x2be>
 8000b5a:	1a84      	subs	r4, r0, r2
 8000b5c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b60:	2001      	movs	r0, #1
 8000b62:	4617      	mov	r7, r2
 8000b64:	2e00      	cmp	r6, #0
 8000b66:	d0e2      	beq.n	8000b2e <__udivmoddi4+0xa2>
 8000b68:	e9c6 4700 	strd	r4, r7, [r6]
 8000b6c:	e7df      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000b6e:	b902      	cbnz	r2, 8000b72 <__udivmoddi4+0xe6>
 8000b70:	deff      	udf	#255	; 0xff
 8000b72:	fab2 f382 	clz	r3, r2
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f040 8090 	bne.w	8000c9c <__udivmoddi4+0x210>
 8000b7c:	1a8a      	subs	r2, r1, r2
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2101      	movs	r1, #1
 8000b88:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b8c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b90:	0c22      	lsrs	r2, r4, #16
 8000b92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b96:	fb0e f005 	mul.w	r0, lr, r5
 8000b9a:	4290      	cmp	r0, r2
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x124>
 8000b9e:	eb1c 0202 	adds.w	r2, ip, r2
 8000ba2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x122>
 8000ba8:	4290      	cmp	r0, r2
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2b8>
 8000bae:	4645      	mov	r5, r8
 8000bb0:	1a12      	subs	r2, r2, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bb8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x14e>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x14c>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2c2>
 8000bd8:	4610      	mov	r0, r2
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000be2:	e79f      	b.n	8000b24 <__udivmoddi4+0x98>
 8000be4:	f1c1 0720 	rsb	r7, r1, #32
 8000be8:	408b      	lsls	r3, r1
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa05 f401 	lsl.w	r4, r5, r1
 8000bf6:	fa20 f307 	lsr.w	r3, r0, r7
 8000bfa:	40fd      	lsrs	r5, r7
 8000bfc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c00:	4323      	orrs	r3, r4
 8000c02:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c06:	fa1f fe8c 	uxth.w	lr, ip
 8000c0a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c0e:	0c1c      	lsrs	r4, r3, #16
 8000c10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c14:	fb08 f50e 	mul.w	r5, r8, lr
 8000c18:	42a5      	cmp	r5, r4
 8000c1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b0>
 8000c24:	eb1c 0404 	adds.w	r4, ip, r4
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2b4>
 8000c30:	42a5      	cmp	r5, r4
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2b4>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4464      	add	r4, ip
 8000c3c:	1b64      	subs	r4, r4, r5
 8000c3e:	b29d      	uxth	r5, r3
 8000c40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c44:	fb09 4413 	mls	r4, r9, r3, r4
 8000c48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c4c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c50:	45a6      	cmp	lr, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1da>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2ac>
 8000c5e:	45a6      	cmp	lr, r4
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2ac>
 8000c62:	3b02      	subs	r3, #2
 8000c64:	4464      	add	r4, ip
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c6e:	eba4 040e 	sub.w	r4, r4, lr
 8000c72:	42ac      	cmp	r4, r5
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46ae      	mov	lr, r5
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x29c>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x298>
 8000c7c:	b156      	cbz	r6, 8000c94 <__udivmoddi4+0x208>
 8000c7e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c82:	eb64 040e 	sbc.w	r4, r4, lr
 8000c86:	fa04 f707 	lsl.w	r7, r4, r7
 8000c8a:	40ca      	lsrs	r2, r1
 8000c8c:	40cc      	lsrs	r4, r1
 8000c8e:	4317      	orrs	r7, r2
 8000c90:	e9c6 7400 	strd	r7, r4, [r6]
 8000c94:	4618      	mov	r0, r3
 8000c96:	2100      	movs	r1, #0
 8000c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9c:	f1c3 0120 	rsb	r1, r3, #32
 8000ca0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ca8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cac:	409d      	lsls	r5, r3
 8000cae:	432a      	orrs	r2, r5
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cbc:	fb07 1510 	mls	r5, r7, r0, r1
 8000cc0:	0c11      	lsrs	r1, r2, #16
 8000cc2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cc6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cca:	428d      	cmp	r5, r1
 8000ccc:	fa04 f403 	lsl.w	r4, r4, r3
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x258>
 8000cd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000cdc:	428d      	cmp	r5, r1
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4461      	add	r1, ip
 8000ce4:	1b49      	subs	r1, r1, r5
 8000ce6:	b292      	uxth	r2, r2
 8000ce8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cec:	fb07 1115 	mls	r1, r7, r5, r1
 8000cf0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cf4:	fb05 f10e 	mul.w	r1, r5, lr
 8000cf8:	4291      	cmp	r1, r2
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x282>
 8000cfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000d00:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000d06:	4291      	cmp	r1, r2
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000d0a:	3d02      	subs	r5, #2
 8000d0c:	4462      	add	r2, ip
 8000d0e:	1a52      	subs	r2, r2, r1
 8000d10:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0xfc>
 8000d16:	4631      	mov	r1, r6
 8000d18:	4630      	mov	r0, r6
 8000d1a:	e708      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000d1c:	4639      	mov	r1, r7
 8000d1e:	e6e6      	b.n	8000aee <__udivmoddi4+0x62>
 8000d20:	4610      	mov	r0, r2
 8000d22:	e6fb      	b.n	8000b1c <__udivmoddi4+0x90>
 8000d24:	4548      	cmp	r0, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f0>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d30:	3b01      	subs	r3, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f0>
 8000d34:	4645      	mov	r5, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x282>
 8000d38:	462b      	mov	r3, r5
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1da>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x258>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b0>
 8000d44:	3d02      	subs	r5, #2
 8000d46:	4462      	add	r2, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x124>
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	e70a      	b.n	8000b64 <__udivmoddi4+0xd8>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x14e>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <SysTickcallback>:
static ESCALATOR_STATUS_t state = STOP;
static ESCALATOR_STATUS_t oldstate = STOP;
static SPEED_STATUS_t speedState = FAST;
static SPEED_STATUS_t oldespeedState = FAST;

void SysTickcallback() {
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
	if (counttime > 0)
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <SysTickcallback+0x38>)
 8000d5e:	881b      	ldrh	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d005      	beq.n	8000d70 <SysTickcallback+0x18>
		counttime--;
 8000d64:	4b0a      	ldr	r3, [pc, #40]	; (8000d90 <SysTickcallback+0x38>)
 8000d66:	881b      	ldrh	r3, [r3, #0]
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <SysTickcallback+0x38>)
 8000d6e:	801a      	strh	r2, [r3, #0]
	if (LCDtime > 0)
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <SysTickcallback+0x3c>)
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d005      	beq.n	8000d84 <SysTickcallback+0x2c>
		LCDtime--;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <SysTickcallback+0x3c>)
 8000d7a:	881b      	ldrh	r3, [r3, #0]
 8000d7c:	3b01      	subs	r3, #1
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <SysTickcallback+0x3c>)
 8000d82:	801a      	strh	r2, [r3, #0]
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	2000008a 	.word	0x2000008a
 8000d94:	2000008c 	.word	0x2000008c

08000d98 <UPLCDinit>:

void UPLCDinit() {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	I2C_CLCD_Clear2();
 8000d9c:	f000 fde5 	bl	800196a <I2C_CLCD_Clear2>
	I2C_CLCD_GotoXY2(0, 0);
 8000da0:	2100      	movs	r1, #0
 8000da2:	2000      	movs	r0, #0
 8000da4:	f000 fd80 	bl	80018a8 <I2C_CLCD_GotoXY2>
	I2C_CLCD_PutStr2("               ");
 8000da8:	480f      	ldr	r0, [pc, #60]	; (8000de8 <UPLCDinit+0x50>)
 8000daa:	f000 fdb9 	bl	8001920 <I2C_CLCD_PutStr2>
	I2C_CLCD_GotoXY2(0, 1);
 8000dae:	2101      	movs	r1, #1
 8000db0:	2000      	movs	r0, #0
 8000db2:	f000 fd79 	bl	80018a8 <I2C_CLCD_GotoXY2>
	I2C_CLCD_PutStr2("               ");
 8000db6:	480c      	ldr	r0, [pc, #48]	; (8000de8 <UPLCDinit+0x50>)
 8000db8:	f000 fdb2 	bl	8001920 <I2C_CLCD_PutStr2>
	I2C_CLCD_GotoXY2(15, 0);
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	200f      	movs	r0, #15
 8000dc0:	f000 fd72 	bl	80018a8 <I2C_CLCD_GotoXY2>
	I2C_CLCD_PutC2(0);
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f000 fd8a 	bl	80018de <I2C_CLCD_PutC2>
	I2C_CLCD_PutC2(1);
 8000dca:	2001      	movs	r0, #1
 8000dcc:	f000 fd87 	bl	80018de <I2C_CLCD_PutC2>
	I2C_CLCD_GotoXY2(15, 1);
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	200f      	movs	r0, #15
 8000dd4:	f000 fd68 	bl	80018a8 <I2C_CLCD_GotoXY2>
	I2C_CLCD_PutC2(2);
 8000dd8:	2002      	movs	r0, #2
 8000dda:	f000 fd80 	bl	80018de <I2C_CLCD_PutC2>
	I2C_CLCD_PutC2(3);
 8000dde:	2003      	movs	r0, #3
 8000de0:	f000 fd7d 	bl	80018de <I2C_CLCD_PutC2>
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	080093e0 	.word	0x080093e0

08000dec <UPLCD>:

void UPLCD() {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	if (LCDtime == 0) {
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <UPLCD+0x1c>)
 8000df2:	881b      	ldrh	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d105      	bne.n	8000e04 <UPLCD+0x18>
		LCDtime = 700;
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <UPLCD+0x1c>)
 8000dfa:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000dfe:	801a      	strh	r2, [r3, #0]
		I2C_CLCD_Left2();
 8000e00:	f000 fdab 	bl	800195a <I2C_CLCD_Left2>
	}

}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	2000008c 	.word	0x2000008c

08000e0c <DOWNLCDinit>:

void DOWNLCDinit()
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
		I2C_CLCD_Clear2();
 8000e10:	f000 fdab 	bl	800196a <I2C_CLCD_Clear2>
		I2C_CLCD_GotoXY2(0, 0);
 8000e14:	2100      	movs	r1, #0
 8000e16:	2000      	movs	r0, #0
 8000e18:	f000 fd46 	bl	80018a8 <I2C_CLCD_GotoXY2>
		I2C_CLCD_PutStr2("               ");
 8000e1c:	480f      	ldr	r0, [pc, #60]	; (8000e5c <DOWNLCDinit+0x50>)
 8000e1e:	f000 fd7f 	bl	8001920 <I2C_CLCD_PutStr2>
		I2C_CLCD_GotoXY2(0, 1);
 8000e22:	2101      	movs	r1, #1
 8000e24:	2000      	movs	r0, #0
 8000e26:	f000 fd3f 	bl	80018a8 <I2C_CLCD_GotoXY2>
		I2C_CLCD_PutStr2("               ");
 8000e2a:	480c      	ldr	r0, [pc, #48]	; (8000e5c <DOWNLCDinit+0x50>)
 8000e2c:	f000 fd78 	bl	8001920 <I2C_CLCD_PutStr2>
		I2C_CLCD_GotoXY2(0, 0);
 8000e30:	2100      	movs	r1, #0
 8000e32:	2000      	movs	r0, #0
 8000e34:	f000 fd38 	bl	80018a8 <I2C_CLCD_GotoXY2>
		I2C_CLCD_PutC2(1);
 8000e38:	2001      	movs	r0, #1
 8000e3a:	f000 fd50 	bl	80018de <I2C_CLCD_PutC2>
		I2C_CLCD_PutC2(4);
 8000e3e:	2004      	movs	r0, #4
 8000e40:	f000 fd4d 	bl	80018de <I2C_CLCD_PutC2>
		I2C_CLCD_GotoXY2(0, 1);
 8000e44:	2101      	movs	r1, #1
 8000e46:	2000      	movs	r0, #0
 8000e48:	f000 fd2e 	bl	80018a8 <I2C_CLCD_GotoXY2>
		I2C_CLCD_PutC2(3);
 8000e4c:	2003      	movs	r0, #3
 8000e4e:	f000 fd46 	bl	80018de <I2C_CLCD_PutC2>
		I2C_CLCD_PutC2(5);
 8000e52:	2005      	movs	r0, #5
 8000e54:	f000 fd43 	bl	80018de <I2C_CLCD_PutC2>
}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	080093e0 	.word	0x080093e0

08000e60 <DOWNLCD>:
void DOWNLCD() {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	if (LCDtime == 0) {
 8000e64:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <DOWNLCD+0x1c>)
 8000e66:	881b      	ldrh	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d105      	bne.n	8000e78 <DOWNLCD+0x18>
		LCDtime = 700;
 8000e6c:	4b03      	ldr	r3, [pc, #12]	; (8000e7c <DOWNLCD+0x1c>)
 8000e6e:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000e72:	801a      	strh	r2, [r3, #0]
		I2C_CLCD_Right2();
 8000e74:	f000 fd69 	bl	800194a <I2C_CLCD_Right2>
	}
}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	2000008c 	.word	0x2000008c

08000e80 <STOPLCDinit>:

void STOPLCDinit()
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
		I2C_CLCD_Clear2();
 8000e84:	f000 fd71 	bl	800196a <I2C_CLCD_Clear2>
		I2C_CLCD_GotoXY2(0, 0);
 8000e88:	2100      	movs	r1, #0
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f000 fd0c 	bl	80018a8 <I2C_CLCD_GotoXY2>
		I2C_CLCD_PutStr2("               ");
 8000e90:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <STOPLCDinit+0x28>)
 8000e92:	f000 fd45 	bl	8001920 <I2C_CLCD_PutStr2>
		I2C_CLCD_GotoXY2(0, 1);
 8000e96:	2101      	movs	r1, #1
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f000 fd05 	bl	80018a8 <I2C_CLCD_GotoXY2>
		I2C_CLCD_PutStr2("               ");
 8000e9e:	4802      	ldr	r0, [pc, #8]	; (8000ea8 <STOPLCDinit+0x28>)
 8000ea0:	f000 fd3e 	bl	8001920 <I2C_CLCD_PutStr2>
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	080093e0 	.word	0x080093e0

08000eac <EscalatorSpeedEventCheck>:

void EscalatorSpeedEventCheck() {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
	char *msg;

	msg = getMessage();
 8000eb2:	f002 f805 	bl	8002ec0 <getMessage>
 8000eb6:	6078      	str	r0, [r7, #4]

	if ((strncmp(msg, "Slow", 4) == 0)
 8000eb8:	2204      	movs	r2, #4
 8000eba:	491b      	ldr	r1, [pc, #108]	; (8000f28 <EscalatorSpeedEventCheck+0x7c>)
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f007 fb03 	bl	80084c8 <strncmp>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d007      	beq.n	8000ed8 <EscalatorSpeedEventCheck+0x2c>
			|| (HAL_GPIO_ReadPin(slow_GPIO_Port, slow_Pin) == 0)) {
 8000ec8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ecc:	4817      	ldr	r0, [pc, #92]	; (8000f2c <EscalatorSpeedEventCheck+0x80>)
 8000ece:	f002 fc1d 	bl	800370c <HAL_GPIO_ReadPin>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d102      	bne.n	8000ede <EscalatorSpeedEventCheck+0x32>
		speedState = SLOW;
 8000ed8:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <EscalatorSpeedEventCheck+0x84>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	701a      	strb	r2, [r3, #0]
	}
	if ((strncmp(msg, "Fast", 4) == 0)
 8000ede:	2204      	movs	r2, #4
 8000ee0:	4914      	ldr	r1, [pc, #80]	; (8000f34 <EscalatorSpeedEventCheck+0x88>)
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f007 faf0 	bl	80084c8 <strncmp>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d007      	beq.n	8000efe <EscalatorSpeedEventCheck+0x52>
			|| (HAL_GPIO_ReadPin(fast_GPIO_Port, fast_Pin) == 0)) {
 8000eee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ef2:	480e      	ldr	r0, [pc, #56]	; (8000f2c <EscalatorSpeedEventCheck+0x80>)
 8000ef4:	f002 fc0a 	bl	800370c <HAL_GPIO_ReadPin>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d102      	bne.n	8000f04 <EscalatorSpeedEventCheck+0x58>
		speedState = FAST;
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <EscalatorSpeedEventCheck+0x84>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	701a      	strb	r2, [r3, #0]
	}
	if ((strncmp(msg, "Stop", 4) == 0)) {
 8000f04:	2204      	movs	r2, #4
 8000f06:	490c      	ldr	r1, [pc, #48]	; (8000f38 <EscalatorSpeedEventCheck+0x8c>)
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f007 fadd 	bl	80084c8 <strncmp>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d105      	bne.n	8000f20 <EscalatorSpeedEventCheck+0x74>
		state = STOP;
 8000f14:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <EscalatorSpeedEventCheck+0x90>)
 8000f16:	2202      	movs	r2, #2
 8000f18:	701a      	strb	r2, [r3, #0]
		count = 0;
 8000f1a:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <EscalatorSpeedEventCheck+0x94>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	701a      	strb	r2, [r3, #0]
	}
}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	080093f0 	.word	0x080093f0
 8000f2c:	40020800 	.word	0x40020800
 8000f30:	20000002 	.word	0x20000002
 8000f34:	080093f8 	.word	0x080093f8
 8000f38:	08009400 	.word	0x08009400
 8000f3c:	20000000 	.word	0x20000000
 8000f40:	20000088 	.word	0x20000088

08000f44 <EscalatorStateCheck>:

void EscalatorStateCheck() {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	switch (speedState) {
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <EscalatorStateCheck+0x20>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d004      	beq.n	8000f5a <EscalatorStateCheck+0x16>
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d105      	bne.n	8000f60 <EscalatorStateCheck+0x1c>
		case FAST:
			EscalatorStateCheck_FAST();
 8000f54:	f000 f81a 	bl	8000f8c <EscalatorStateCheck_FAST>
			break;
 8000f58:	e002      	b.n	8000f60 <EscalatorStateCheck+0x1c>

		case SLOW:
			EscalatorStateCheck_SLOW();
 8000f5a:	f000 f8e3 	bl	8001124 <EscalatorStateCheck_SLOW>
			break;
 8000f5e:	bf00      	nop
	}
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000002 	.word	0x20000002

08000f68 <EscalatorRUN>:
void EscalatorRUN() {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	switch (speedState) {
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <EscalatorRUN+0x20>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d004      	beq.n	8000f7e <EscalatorRUN+0x16>
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d105      	bne.n	8000f84 <EscalatorRUN+0x1c>
		case FAST:
			EscalatorRUN_FAST();
 8000f78:	f000 f934 	bl	80011e4 <EscalatorRUN_FAST>
			break;
 8000f7c:	e002      	b.n	8000f84 <EscalatorRUN+0x1c>

		case SLOW:
			EscalatorRUN_SLOW();
 8000f7e:	f000 fa29 	bl	80013d4 <EscalatorRUN_SLOW>
			break;
 8000f82:	bf00      	nop
	}
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000002 	.word	0x20000002

08000f8c <EscalatorStateCheck_FAST>:

void EscalatorStateCheck_FAST() {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
	uint16_t dist1;
	uint16_t dist2;
	dist1 = getDistance();
 8000f92:	f001 f919 	bl	80021c8 <getDistance>
 8000f96:	4603      	mov	r3, r0
 8000f98:	80fb      	strh	r3, [r7, #6]
	dist2 = getDistance2();
 8000f9a:	f001 f93b 	bl	8002214 <getDistance2>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	80bb      	strh	r3, [r7, #4]

	switch (state) {
 8000fa2:	4b5d      	ldr	r3, [pc, #372]	; (8001118 <EscalatorStateCheck_FAST+0x18c>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d073      	beq.n	8001092 <EscalatorStateCheck_FAST+0x106>
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	f300 80af 	bgt.w	800110e <EscalatorStateCheck_FAST+0x182>
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d039      	beq.n	8001028 <EscalatorStateCheck_FAST+0x9c>
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	f040 80aa 	bne.w	800110e <EscalatorStateCheck_FAST+0x182>
		case DOWN:
			if ((dist1 > dist2) && (dist2 < 20) && (dist2 > 3)) {
 8000fba:	88fa      	ldrh	r2, [r7, #6]
 8000fbc:	88bb      	ldrh	r3, [r7, #4]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d913      	bls.n	8000fea <EscalatorStateCheck_FAST+0x5e>
 8000fc2:	88bb      	ldrh	r3, [r7, #4]
 8000fc4:	2b13      	cmp	r3, #19
 8000fc6:	d810      	bhi.n	8000fea <EscalatorStateCheck_FAST+0x5e>
 8000fc8:	88bb      	ldrh	r3, [r7, #4]
 8000fca:	2b03      	cmp	r3, #3
 8000fcc:	d90d      	bls.n	8000fea <EscalatorStateCheck_FAST+0x5e>
				if (counttime == 0) {
 8000fce:	4b53      	ldr	r3, [pc, #332]	; (800111c <EscalatorStateCheck_FAST+0x190>)
 8000fd0:	881b      	ldrh	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d109      	bne.n	8000fea <EscalatorStateCheck_FAST+0x5e>
					counttime = 1000;
 8000fd6:	4b51      	ldr	r3, [pc, #324]	; (800111c <EscalatorStateCheck_FAST+0x190>)
 8000fd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fdc:	801a      	strh	r2, [r3, #0]
					count++;
 8000fde:	4b50      	ldr	r3, [pc, #320]	; (8001120 <EscalatorStateCheck_FAST+0x194>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4b4e      	ldr	r3, [pc, #312]	; (8001120 <EscalatorStateCheck_FAST+0x194>)
 8000fe8:	701a      	strb	r2, [r3, #0]
				}
			}
			if ((dist1 < dist2) && (dist1 < 20)) {
 8000fea:	88fa      	ldrh	r2, [r7, #6]
 8000fec:	88bb      	ldrh	r3, [r7, #4]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	f080 8088 	bcs.w	8001104 <EscalatorStateCheck_FAST+0x178>
 8000ff4:	88fb      	ldrh	r3, [r7, #6]
 8000ff6:	2b13      	cmp	r3, #19
 8000ff8:	f200 8084 	bhi.w	8001104 <EscalatorStateCheck_FAST+0x178>
				if (counttime == 0) {
 8000ffc:	4b47      	ldr	r3, [pc, #284]	; (800111c <EscalatorStateCheck_FAST+0x190>)
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d17f      	bne.n	8001104 <EscalatorStateCheck_FAST+0x178>
					counttime = 1000;
 8001004:	4b45      	ldr	r3, [pc, #276]	; (800111c <EscalatorStateCheck_FAST+0x190>)
 8001006:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800100a:	801a      	strh	r2, [r3, #0]
					count--;
 800100c:	4b44      	ldr	r3, [pc, #272]	; (8001120 <EscalatorStateCheck_FAST+0x194>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	3b01      	subs	r3, #1
 8001012:	b2da      	uxtb	r2, r3
 8001014:	4b42      	ldr	r3, [pc, #264]	; (8001120 <EscalatorStateCheck_FAST+0x194>)
 8001016:	701a      	strb	r2, [r3, #0]
					if (count == 0) {
 8001018:	4b41      	ldr	r3, [pc, #260]	; (8001120 <EscalatorStateCheck_FAST+0x194>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d171      	bne.n	8001104 <EscalatorStateCheck_FAST+0x178>
						state = STOP;
 8001020:	4b3d      	ldr	r3, [pc, #244]	; (8001118 <EscalatorStateCheck_FAST+0x18c>)
 8001022:	2202      	movs	r2, #2
 8001024:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			break;
 8001026:	e06d      	b.n	8001104 <EscalatorStateCheck_FAST+0x178>
		case UP:
			if ((dist1 < dist2) && (dist1 < 20) && (dist1 > 3)) {
 8001028:	88fa      	ldrh	r2, [r7, #6]
 800102a:	88bb      	ldrh	r3, [r7, #4]
 800102c:	429a      	cmp	r2, r3
 800102e:	d213      	bcs.n	8001058 <EscalatorStateCheck_FAST+0xcc>
 8001030:	88fb      	ldrh	r3, [r7, #6]
 8001032:	2b13      	cmp	r3, #19
 8001034:	d810      	bhi.n	8001058 <EscalatorStateCheck_FAST+0xcc>
 8001036:	88fb      	ldrh	r3, [r7, #6]
 8001038:	2b03      	cmp	r3, #3
 800103a:	d90d      	bls.n	8001058 <EscalatorStateCheck_FAST+0xcc>
				if (counttime == 0) {
 800103c:	4b37      	ldr	r3, [pc, #220]	; (800111c <EscalatorStateCheck_FAST+0x190>)
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d109      	bne.n	8001058 <EscalatorStateCheck_FAST+0xcc>
					counttime = 1000;
 8001044:	4b35      	ldr	r3, [pc, #212]	; (800111c <EscalatorStateCheck_FAST+0x190>)
 8001046:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800104a:	801a      	strh	r2, [r3, #0]
					count++;
 800104c:	4b34      	ldr	r3, [pc, #208]	; (8001120 <EscalatorStateCheck_FAST+0x194>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	3301      	adds	r3, #1
 8001052:	b2da      	uxtb	r2, r3
 8001054:	4b32      	ldr	r3, [pc, #200]	; (8001120 <EscalatorStateCheck_FAST+0x194>)
 8001056:	701a      	strb	r2, [r3, #0]
				}
			}
			if ((dist1 > dist2) && (dist2 < 20)) {
 8001058:	88fa      	ldrh	r2, [r7, #6]
 800105a:	88bb      	ldrh	r3, [r7, #4]
 800105c:	429a      	cmp	r2, r3
 800105e:	d953      	bls.n	8001108 <EscalatorStateCheck_FAST+0x17c>
 8001060:	88bb      	ldrh	r3, [r7, #4]
 8001062:	2b13      	cmp	r3, #19
 8001064:	d850      	bhi.n	8001108 <EscalatorStateCheck_FAST+0x17c>
				if (counttime == 0) {
 8001066:	4b2d      	ldr	r3, [pc, #180]	; (800111c <EscalatorStateCheck_FAST+0x190>)
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d14c      	bne.n	8001108 <EscalatorStateCheck_FAST+0x17c>
					counttime = 1000;
 800106e:	4b2b      	ldr	r3, [pc, #172]	; (800111c <EscalatorStateCheck_FAST+0x190>)
 8001070:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001074:	801a      	strh	r2, [r3, #0]
					count--;
 8001076:	4b2a      	ldr	r3, [pc, #168]	; (8001120 <EscalatorStateCheck_FAST+0x194>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	3b01      	subs	r3, #1
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4b28      	ldr	r3, [pc, #160]	; (8001120 <EscalatorStateCheck_FAST+0x194>)
 8001080:	701a      	strb	r2, [r3, #0]
					if (count == 0) {
 8001082:	4b27      	ldr	r3, [pc, #156]	; (8001120 <EscalatorStateCheck_FAST+0x194>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d13e      	bne.n	8001108 <EscalatorStateCheck_FAST+0x17c>
						state = STOP;
 800108a:	4b23      	ldr	r3, [pc, #140]	; (8001118 <EscalatorStateCheck_FAST+0x18c>)
 800108c:	2202      	movs	r2, #2
 800108e:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			break;
 8001090:	e03a      	b.n	8001108 <EscalatorStateCheck_FAST+0x17c>

		case STOP:
			if ((dist1 > dist2) && (dist2 < 20) && (dist2 > 3)) {
 8001092:	88fa      	ldrh	r2, [r7, #6]
 8001094:	88bb      	ldrh	r3, [r7, #4]
 8001096:	429a      	cmp	r2, r3
 8001098:	d917      	bls.n	80010ca <EscalatorStateCheck_FAST+0x13e>
 800109a:	88bb      	ldrh	r3, [r7, #4]
 800109c:	2b13      	cmp	r3, #19
 800109e:	d814      	bhi.n	80010ca <EscalatorStateCheck_FAST+0x13e>
 80010a0:	88bb      	ldrh	r3, [r7, #4]
 80010a2:	2b03      	cmp	r3, #3
 80010a4:	d911      	bls.n	80010ca <EscalatorStateCheck_FAST+0x13e>
				if (counttime == 0) {
 80010a6:	4b1d      	ldr	r3, [pc, #116]	; (800111c <EscalatorStateCheck_FAST+0x190>)
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d129      	bne.n	8001102 <EscalatorStateCheck_FAST+0x176>
					counttime = 1000;
 80010ae:	4b1b      	ldr	r3, [pc, #108]	; (800111c <EscalatorStateCheck_FAST+0x190>)
 80010b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010b4:	801a      	strh	r2, [r3, #0]
					state = DOWN;
 80010b6:	4b18      	ldr	r3, [pc, #96]	; (8001118 <EscalatorStateCheck_FAST+0x18c>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	701a      	strb	r2, [r3, #0]
					count++;
 80010bc:	4b18      	ldr	r3, [pc, #96]	; (8001120 <EscalatorStateCheck_FAST+0x194>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	3301      	adds	r3, #1
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	4b16      	ldr	r3, [pc, #88]	; (8001120 <EscalatorStateCheck_FAST+0x194>)
 80010c6:	701a      	strb	r2, [r3, #0]
				if (counttime == 0) {
 80010c8:	e01b      	b.n	8001102 <EscalatorStateCheck_FAST+0x176>
				}
			} else if ((dist1 < dist2) && (dist1 < 20) && (dist1 > 3)) {
 80010ca:	88fa      	ldrh	r2, [r7, #6]
 80010cc:	88bb      	ldrh	r3, [r7, #4]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d21c      	bcs.n	800110c <EscalatorStateCheck_FAST+0x180>
 80010d2:	88fb      	ldrh	r3, [r7, #6]
 80010d4:	2b13      	cmp	r3, #19
 80010d6:	d819      	bhi.n	800110c <EscalatorStateCheck_FAST+0x180>
 80010d8:	88fb      	ldrh	r3, [r7, #6]
 80010da:	2b03      	cmp	r3, #3
 80010dc:	d916      	bls.n	800110c <EscalatorStateCheck_FAST+0x180>
				if (counttime == 0) {
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <EscalatorStateCheck_FAST+0x190>)
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d112      	bne.n	800110c <EscalatorStateCheck_FAST+0x180>
					counttime = 1000;
 80010e6:	4b0d      	ldr	r3, [pc, #52]	; (800111c <EscalatorStateCheck_FAST+0x190>)
 80010e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010ec:	801a      	strh	r2, [r3, #0]
					state = UP;
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <EscalatorStateCheck_FAST+0x18c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
					count++;
 80010f4:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <EscalatorStateCheck_FAST+0x194>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	3301      	adds	r3, #1
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <EscalatorStateCheck_FAST+0x194>)
 80010fe:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 8001100:	e004      	b.n	800110c <EscalatorStateCheck_FAST+0x180>
 8001102:	e003      	b.n	800110c <EscalatorStateCheck_FAST+0x180>
			break;
 8001104:	bf00      	nop
 8001106:	e002      	b.n	800110e <EscalatorStateCheck_FAST+0x182>
			break;
 8001108:	bf00      	nop
 800110a:	e000      	b.n	800110e <EscalatorStateCheck_FAST+0x182>
			break;
 800110c:	bf00      	nop
	}
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000000 	.word	0x20000000
 800111c:	2000008a 	.word	0x2000008a
 8001120:	20000088 	.word	0x20000088

08001124 <EscalatorStateCheck_SLOW>:

void EscalatorStateCheck_SLOW() {
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
	uint16_t dist1;
	uint16_t dist2;
	dist1 = getDistance();
 800112a:	f001 f84d 	bl	80021c8 <getDistance>
 800112e:	4603      	mov	r3, r0
 8001130:	80fb      	strh	r3, [r7, #6]
	dist2 = getDistance2();
 8001132:	f001 f86f 	bl	8002214 <getDistance2>
 8001136:	4603      	mov	r3, r0
 8001138:	80bb      	strh	r3, [r7, #4]

	switch (state) {
 800113a:	4b28      	ldr	r3, [pc, #160]	; (80011dc <EscalatorStateCheck_SLOW+0xb8>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b02      	cmp	r3, #2
 8001140:	d015      	beq.n	800116e <EscalatorStateCheck_SLOW+0x4a>
 8001142:	2b02      	cmp	r3, #2
 8001144:	dc45      	bgt.n	80011d2 <EscalatorStateCheck_SLOW+0xae>
 8001146:	2b00      	cmp	r3, #0
 8001148:	d009      	beq.n	800115e <EscalatorStateCheck_SLOW+0x3a>
 800114a:	2b01      	cmp	r3, #1
 800114c:	d141      	bne.n	80011d2 <EscalatorStateCheck_SLOW+0xae>
		case DOWN:
			if (counttime == 0) {
 800114e:	4b24      	ldr	r3, [pc, #144]	; (80011e0 <EscalatorStateCheck_SLOW+0xbc>)
 8001150:	881b      	ldrh	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d138      	bne.n	80011c8 <EscalatorStateCheck_SLOW+0xa4>
				state = STOP;
 8001156:	4b21      	ldr	r3, [pc, #132]	; (80011dc <EscalatorStateCheck_SLOW+0xb8>)
 8001158:	2202      	movs	r2, #2
 800115a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800115c:	e034      	b.n	80011c8 <EscalatorStateCheck_SLOW+0xa4>

		case UP:
			if (counttime == 0) {
 800115e:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <EscalatorStateCheck_SLOW+0xbc>)
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d132      	bne.n	80011cc <EscalatorStateCheck_SLOW+0xa8>
				state = STOP;
 8001166:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <EscalatorStateCheck_SLOW+0xb8>)
 8001168:	2202      	movs	r2, #2
 800116a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800116c:	e02e      	b.n	80011cc <EscalatorStateCheck_SLOW+0xa8>

		case STOP:
			if ((dist1 > dist2) && (dist2 < 20) && (dist2 > 3)) {
 800116e:	88fa      	ldrh	r2, [r7, #6]
 8001170:	88bb      	ldrh	r3, [r7, #4]
 8001172:	429a      	cmp	r2, r3
 8001174:	d911      	bls.n	800119a <EscalatorStateCheck_SLOW+0x76>
 8001176:	88bb      	ldrh	r3, [r7, #4]
 8001178:	2b13      	cmp	r3, #19
 800117a:	d80e      	bhi.n	800119a <EscalatorStateCheck_SLOW+0x76>
 800117c:	88bb      	ldrh	r3, [r7, #4]
 800117e:	2b03      	cmp	r3, #3
 8001180:	d90b      	bls.n	800119a <EscalatorStateCheck_SLOW+0x76>
				if (counttime == 0) {
 8001182:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <EscalatorStateCheck_SLOW+0xbc>)
 8001184:	881b      	ldrh	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d11d      	bne.n	80011c6 <EscalatorStateCheck_SLOW+0xa2>
					counttime = 5000;
 800118a:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <EscalatorStateCheck_SLOW+0xbc>)
 800118c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001190:	801a      	strh	r2, [r3, #0]
					state = DOWN;
 8001192:	4b12      	ldr	r3, [pc, #72]	; (80011dc <EscalatorStateCheck_SLOW+0xb8>)
 8001194:	2201      	movs	r2, #1
 8001196:	701a      	strb	r2, [r3, #0]
				if (counttime == 0) {
 8001198:	e015      	b.n	80011c6 <EscalatorStateCheck_SLOW+0xa2>
				}

			} else if ((dist1 < dist2) && (dist1 < 20) && (dist1 > 3)) {
 800119a:	88fa      	ldrh	r2, [r7, #6]
 800119c:	88bb      	ldrh	r3, [r7, #4]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d216      	bcs.n	80011d0 <EscalatorStateCheck_SLOW+0xac>
 80011a2:	88fb      	ldrh	r3, [r7, #6]
 80011a4:	2b13      	cmp	r3, #19
 80011a6:	d813      	bhi.n	80011d0 <EscalatorStateCheck_SLOW+0xac>
 80011a8:	88fb      	ldrh	r3, [r7, #6]
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	d910      	bls.n	80011d0 <EscalatorStateCheck_SLOW+0xac>
				if (counttime == 0) {
 80011ae:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <EscalatorStateCheck_SLOW+0xbc>)
 80011b0:	881b      	ldrh	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10c      	bne.n	80011d0 <EscalatorStateCheck_SLOW+0xac>
					counttime = 5000;
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <EscalatorStateCheck_SLOW+0xbc>)
 80011b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011bc:	801a      	strh	r2, [r3, #0]
					state = UP;
 80011be:	4b07      	ldr	r3, [pc, #28]	; (80011dc <EscalatorStateCheck_SLOW+0xb8>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 80011c4:	e004      	b.n	80011d0 <EscalatorStateCheck_SLOW+0xac>
 80011c6:	e003      	b.n	80011d0 <EscalatorStateCheck_SLOW+0xac>
			break;
 80011c8:	bf00      	nop
 80011ca:	e002      	b.n	80011d2 <EscalatorStateCheck_SLOW+0xae>
			break;
 80011cc:	bf00      	nop
 80011ce:	e000      	b.n	80011d2 <EscalatorStateCheck_SLOW+0xae>
			break;
 80011d0:	bf00      	nop
	}
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000000 	.word	0x20000000
 80011e0:	2000008a 	.word	0x2000008a

080011e4 <EscalatorRUN_FAST>:

void EscalatorRUN_FAST() {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0

	switch (state) {
 80011e8:	4b6b      	ldr	r3, [pc, #428]	; (8001398 <EscalatorRUN_FAST+0x1b4>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	f000 808e 	beq.w	800130e <EscalatorRUN_FAST+0x12a>
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	f300 80cb 	bgt.w	800138e <EscalatorRUN_FAST+0x1aa>
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d045      	beq.n	8001288 <EscalatorRUN_FAST+0xa4>
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	f040 80c6 	bne.w	800138e <EscalatorRUN_FAST+0x1aa>
		case DOWN:
			if (oldespeedState != speedState || oldstate != state
 8001202:	4b66      	ldr	r3, [pc, #408]	; (800139c <EscalatorRUN_FAST+0x1b8>)
 8001204:	781a      	ldrb	r2, [r3, #0]
 8001206:	4b66      	ldr	r3, [pc, #408]	; (80013a0 <EscalatorRUN_FAST+0x1bc>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	429a      	cmp	r2, r3
 800120c:	d10b      	bne.n	8001226 <EscalatorRUN_FAST+0x42>
 800120e:	4b65      	ldr	r3, [pc, #404]	; (80013a4 <EscalatorRUN_FAST+0x1c0>)
 8001210:	781a      	ldrb	r2, [r3, #0]
 8001212:	4b61      	ldr	r3, [pc, #388]	; (8001398 <EscalatorRUN_FAST+0x1b4>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	429a      	cmp	r2, r3
 8001218:	d105      	bne.n	8001226 <EscalatorRUN_FAST+0x42>
					|| oldcount != count) {
 800121a:	4b63      	ldr	r3, [pc, #396]	; (80013a8 <EscalatorRUN_FAST+0x1c4>)
 800121c:	781a      	ldrb	r2, [r3, #0]
 800121e:	4b63      	ldr	r3, [pc, #396]	; (80013ac <EscalatorRUN_FAST+0x1c8>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	429a      	cmp	r2, r3
 8001224:	d02d      	beq.n	8001282 <EscalatorRUN_FAST+0x9e>
				goBackward(100);
 8001226:	2064      	movs	r0, #100	; 0x64
 8001228:	f000 fca6 	bl	8001b78 <goBackward>
				I2C_CLCD_GotoXY(0, 1);
 800122c:	2101      	movs	r1, #1
 800122e:	2000      	movs	r0, #0
 8001230:	f000 fa58 	bl	80016e4 <I2C_CLCD_GotoXY>
				I2C_CLCD_PutStr("               ");
 8001234:	485e      	ldr	r0, [pc, #376]	; (80013b0 <EscalatorRUN_FAST+0x1cc>)
 8001236:	f000 fa91 	bl	800175c <I2C_CLCD_PutStr>
				I2C_CLCD_GotoXY(0, 1);
 800123a:	2101      	movs	r1, #1
 800123c:	2000      	movs	r0, #0
 800123e:	f000 fa51 	bl	80016e4 <I2C_CLCD_GotoXY>
				I2C_CLCD_PutStr("  FAST  /  DOWN ");
 8001242:	485c      	ldr	r0, [pc, #368]	; (80013b4 <EscalatorRUN_FAST+0x1d0>)
 8001244:	f000 fa8a 	bl	800175c <I2C_CLCD_PutStr>
				printf("speed : FAST\n");
 8001248:	485b      	ldr	r0, [pc, #364]	; (80013b8 <EscalatorRUN_FAST+0x1d4>)
 800124a:	f007 f835 	bl	80082b8 <puts>
				printf("State : DOWN \n");
 800124e:	485b      	ldr	r0, [pc, #364]	; (80013bc <EscalatorRUN_FAST+0x1d8>)
 8001250:	f007 f832 	bl	80082b8 <puts>
				printf("Count : %d \n", count);
 8001254:	4b55      	ldr	r3, [pc, #340]	; (80013ac <EscalatorRUN_FAST+0x1c8>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4619      	mov	r1, r3
 800125a:	4859      	ldr	r0, [pc, #356]	; (80013c0 <EscalatorRUN_FAST+0x1dc>)
 800125c:	f006 ffbe 	bl	80081dc <iprintf>
				oldespeedState = speedState;
 8001260:	4b4f      	ldr	r3, [pc, #316]	; (80013a0 <EscalatorRUN_FAST+0x1bc>)
 8001262:	781a      	ldrb	r2, [r3, #0]
 8001264:	4b4d      	ldr	r3, [pc, #308]	; (800139c <EscalatorRUN_FAST+0x1b8>)
 8001266:	701a      	strb	r2, [r3, #0]
				oldstate = state;
 8001268:	4b4b      	ldr	r3, [pc, #300]	; (8001398 <EscalatorRUN_FAST+0x1b4>)
 800126a:	781a      	ldrb	r2, [r3, #0]
 800126c:	4b4d      	ldr	r3, [pc, #308]	; (80013a4 <EscalatorRUN_FAST+0x1c0>)
 800126e:	701a      	strb	r2, [r3, #0]
				oldcount = count;
 8001270:	4b4e      	ldr	r3, [pc, #312]	; (80013ac <EscalatorRUN_FAST+0x1c8>)
 8001272:	781a      	ldrb	r2, [r3, #0]
 8001274:	4b4c      	ldr	r3, [pc, #304]	; (80013a8 <EscalatorRUN_FAST+0x1c4>)
 8001276:	701a      	strb	r2, [r3, #0]
				printf("\n");
 8001278:	200a      	movs	r0, #10
 800127a:	f006 ffc1 	bl	8008200 <putchar>
				DOWNLCDinit();
 800127e:	f7ff fdc5 	bl	8000e0c <DOWNLCDinit>
			}
			DOWNLCD();
 8001282:	f7ff fded 	bl	8000e60 <DOWNLCD>
			break;
 8001286:	e082      	b.n	800138e <EscalatorRUN_FAST+0x1aa>
		case UP:
			if (oldespeedState != speedState || oldstate != state
 8001288:	4b44      	ldr	r3, [pc, #272]	; (800139c <EscalatorRUN_FAST+0x1b8>)
 800128a:	781a      	ldrb	r2, [r3, #0]
 800128c:	4b44      	ldr	r3, [pc, #272]	; (80013a0 <EscalatorRUN_FAST+0x1bc>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	429a      	cmp	r2, r3
 8001292:	d10b      	bne.n	80012ac <EscalatorRUN_FAST+0xc8>
 8001294:	4b43      	ldr	r3, [pc, #268]	; (80013a4 <EscalatorRUN_FAST+0x1c0>)
 8001296:	781a      	ldrb	r2, [r3, #0]
 8001298:	4b3f      	ldr	r3, [pc, #252]	; (8001398 <EscalatorRUN_FAST+0x1b4>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	429a      	cmp	r2, r3
 800129e:	d105      	bne.n	80012ac <EscalatorRUN_FAST+0xc8>
					|| oldcount != count) {
 80012a0:	4b41      	ldr	r3, [pc, #260]	; (80013a8 <EscalatorRUN_FAST+0x1c4>)
 80012a2:	781a      	ldrb	r2, [r3, #0]
 80012a4:	4b41      	ldr	r3, [pc, #260]	; (80013ac <EscalatorRUN_FAST+0x1c8>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d02d      	beq.n	8001308 <EscalatorRUN_FAST+0x124>
				goForward(100);
 80012ac:	2064      	movs	r0, #100	; 0x64
 80012ae:	f000 fc3d 	bl	8001b2c <goForward>
				I2C_CLCD_GotoXY(0, 1);
 80012b2:	2101      	movs	r1, #1
 80012b4:	2000      	movs	r0, #0
 80012b6:	f000 fa15 	bl	80016e4 <I2C_CLCD_GotoXY>
				I2C_CLCD_PutStr("               ");
 80012ba:	483d      	ldr	r0, [pc, #244]	; (80013b0 <EscalatorRUN_FAST+0x1cc>)
 80012bc:	f000 fa4e 	bl	800175c <I2C_CLCD_PutStr>
				I2C_CLCD_GotoXY(0, 1);
 80012c0:	2101      	movs	r1, #1
 80012c2:	2000      	movs	r0, #0
 80012c4:	f000 fa0e 	bl	80016e4 <I2C_CLCD_GotoXY>
				I2C_CLCD_PutStr("  FAST  /  UP  ");
 80012c8:	483e      	ldr	r0, [pc, #248]	; (80013c4 <EscalatorRUN_FAST+0x1e0>)
 80012ca:	f000 fa47 	bl	800175c <I2C_CLCD_PutStr>
				printf("speed : FAST\n");
 80012ce:	483a      	ldr	r0, [pc, #232]	; (80013b8 <EscalatorRUN_FAST+0x1d4>)
 80012d0:	f006 fff2 	bl	80082b8 <puts>
				printf("State : UP \n");
 80012d4:	483c      	ldr	r0, [pc, #240]	; (80013c8 <EscalatorRUN_FAST+0x1e4>)
 80012d6:	f006 ffef 	bl	80082b8 <puts>
				printf("Count : %d \n", count);
 80012da:	4b34      	ldr	r3, [pc, #208]	; (80013ac <EscalatorRUN_FAST+0x1c8>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	4619      	mov	r1, r3
 80012e0:	4837      	ldr	r0, [pc, #220]	; (80013c0 <EscalatorRUN_FAST+0x1dc>)
 80012e2:	f006 ff7b 	bl	80081dc <iprintf>
				oldespeedState = speedState;
 80012e6:	4b2e      	ldr	r3, [pc, #184]	; (80013a0 <EscalatorRUN_FAST+0x1bc>)
 80012e8:	781a      	ldrb	r2, [r3, #0]
 80012ea:	4b2c      	ldr	r3, [pc, #176]	; (800139c <EscalatorRUN_FAST+0x1b8>)
 80012ec:	701a      	strb	r2, [r3, #0]
				oldstate = state;
 80012ee:	4b2a      	ldr	r3, [pc, #168]	; (8001398 <EscalatorRUN_FAST+0x1b4>)
 80012f0:	781a      	ldrb	r2, [r3, #0]
 80012f2:	4b2c      	ldr	r3, [pc, #176]	; (80013a4 <EscalatorRUN_FAST+0x1c0>)
 80012f4:	701a      	strb	r2, [r3, #0]
				oldcount = count;
 80012f6:	4b2d      	ldr	r3, [pc, #180]	; (80013ac <EscalatorRUN_FAST+0x1c8>)
 80012f8:	781a      	ldrb	r2, [r3, #0]
 80012fa:	4b2b      	ldr	r3, [pc, #172]	; (80013a8 <EscalatorRUN_FAST+0x1c4>)
 80012fc:	701a      	strb	r2, [r3, #0]
				printf("\n");
 80012fe:	200a      	movs	r0, #10
 8001300:	f006 ff7e 	bl	8008200 <putchar>
				UPLCDinit();
 8001304:	f7ff fd48 	bl	8000d98 <UPLCDinit>
			}
			UPLCD();
 8001308:	f7ff fd70 	bl	8000dec <UPLCD>
			break;
 800130c:	e03f      	b.n	800138e <EscalatorRUN_FAST+0x1aa>
		case STOP:
			if (oldespeedState != speedState || oldstate != state
 800130e:	4b23      	ldr	r3, [pc, #140]	; (800139c <EscalatorRUN_FAST+0x1b8>)
 8001310:	781a      	ldrb	r2, [r3, #0]
 8001312:	4b23      	ldr	r3, [pc, #140]	; (80013a0 <EscalatorRUN_FAST+0x1bc>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	429a      	cmp	r2, r3
 8001318:	d10b      	bne.n	8001332 <EscalatorRUN_FAST+0x14e>
 800131a:	4b22      	ldr	r3, [pc, #136]	; (80013a4 <EscalatorRUN_FAST+0x1c0>)
 800131c:	781a      	ldrb	r2, [r3, #0]
 800131e:	4b1e      	ldr	r3, [pc, #120]	; (8001398 <EscalatorRUN_FAST+0x1b4>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	429a      	cmp	r2, r3
 8001324:	d105      	bne.n	8001332 <EscalatorRUN_FAST+0x14e>
					|| oldcount != count) {
 8001326:	4b20      	ldr	r3, [pc, #128]	; (80013a8 <EscalatorRUN_FAST+0x1c4>)
 8001328:	781a      	ldrb	r2, [r3, #0]
 800132a:	4b20      	ldr	r3, [pc, #128]	; (80013ac <EscalatorRUN_FAST+0x1c8>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	429a      	cmp	r2, r3
 8001330:	d02c      	beq.n	800138c <EscalatorRUN_FAST+0x1a8>
				stopMove();
 8001332:	f000 fc47 	bl	8001bc4 <stopMove>
				I2C_CLCD_GotoXY(0, 1);
 8001336:	2101      	movs	r1, #1
 8001338:	2000      	movs	r0, #0
 800133a:	f000 f9d3 	bl	80016e4 <I2C_CLCD_GotoXY>
				I2C_CLCD_PutStr("               ");
 800133e:	481c      	ldr	r0, [pc, #112]	; (80013b0 <EscalatorRUN_FAST+0x1cc>)
 8001340:	f000 fa0c 	bl	800175c <I2C_CLCD_PutStr>
				I2C_CLCD_GotoXY(0, 1);
 8001344:	2101      	movs	r1, #1
 8001346:	2000      	movs	r0, #0
 8001348:	f000 f9cc 	bl	80016e4 <I2C_CLCD_GotoXY>
				I2C_CLCD_PutStr("  FAST  /  STOP ");
 800134c:	481f      	ldr	r0, [pc, #124]	; (80013cc <EscalatorRUN_FAST+0x1e8>)
 800134e:	f000 fa05 	bl	800175c <I2C_CLCD_PutStr>
				printf("speed : FAST\n");
 8001352:	4819      	ldr	r0, [pc, #100]	; (80013b8 <EscalatorRUN_FAST+0x1d4>)
 8001354:	f006 ffb0 	bl	80082b8 <puts>
				printf("State : STOP \n");
 8001358:	481d      	ldr	r0, [pc, #116]	; (80013d0 <EscalatorRUN_FAST+0x1ec>)
 800135a:	f006 ffad 	bl	80082b8 <puts>
				printf("Count : %d \n", count);
 800135e:	4b13      	ldr	r3, [pc, #76]	; (80013ac <EscalatorRUN_FAST+0x1c8>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	4619      	mov	r1, r3
 8001364:	4816      	ldr	r0, [pc, #88]	; (80013c0 <EscalatorRUN_FAST+0x1dc>)
 8001366:	f006 ff39 	bl	80081dc <iprintf>
				oldespeedState = speedState;
 800136a:	4b0d      	ldr	r3, [pc, #52]	; (80013a0 <EscalatorRUN_FAST+0x1bc>)
 800136c:	781a      	ldrb	r2, [r3, #0]
 800136e:	4b0b      	ldr	r3, [pc, #44]	; (800139c <EscalatorRUN_FAST+0x1b8>)
 8001370:	701a      	strb	r2, [r3, #0]
				oldstate = state;
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <EscalatorRUN_FAST+0x1b4>)
 8001374:	781a      	ldrb	r2, [r3, #0]
 8001376:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <EscalatorRUN_FAST+0x1c0>)
 8001378:	701a      	strb	r2, [r3, #0]
				oldcount = count;
 800137a:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <EscalatorRUN_FAST+0x1c8>)
 800137c:	781a      	ldrb	r2, [r3, #0]
 800137e:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <EscalatorRUN_FAST+0x1c4>)
 8001380:	701a      	strb	r2, [r3, #0]
				printf("\n");
 8001382:	200a      	movs	r0, #10
 8001384:	f006 ff3c 	bl	8008200 <putchar>
				STOPLCDinit();
 8001388:	f7ff fd7a 	bl	8000e80 <STOPLCDinit>
			}
			break;
 800138c:	bf00      	nop
	}
	HAL_Delay(100);
 800138e:	2064      	movs	r0, #100	; 0x64
 8001390:	f001 fe70 	bl	8003074 <HAL_Delay>
}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000000 	.word	0x20000000
 800139c:	20000003 	.word	0x20000003
 80013a0:	20000002 	.word	0x20000002
 80013a4:	20000001 	.word	0x20000001
 80013a8:	20000089 	.word	0x20000089
 80013ac:	20000088 	.word	0x20000088
 80013b0:	080093e0 	.word	0x080093e0
 80013b4:	08009408 	.word	0x08009408
 80013b8:	0800941c 	.word	0x0800941c
 80013bc:	0800942c 	.word	0x0800942c
 80013c0:	0800943c 	.word	0x0800943c
 80013c4:	0800944c 	.word	0x0800944c
 80013c8:	0800945c 	.word	0x0800945c
 80013cc:	08009468 	.word	0x08009468
 80013d0:	0800947c 	.word	0x0800947c

080013d4 <EscalatorRUN_SLOW>:

void EscalatorRUN_SLOW() {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	switch (state) {
 80013d8:	4b4f      	ldr	r3, [pc, #316]	; (8001518 <EscalatorRUN_SLOW+0x144>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d069      	beq.n	80014b4 <EscalatorRUN_SLOW+0xe0>
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	f300 8093 	bgt.w	800150c <EscalatorRUN_SLOW+0x138>
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d035      	beq.n	8001456 <EscalatorRUN_SLOW+0x82>
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	f040 808e 	bne.w	800150c <EscalatorRUN_SLOW+0x138>
		case DOWN:
			if (oldespeedState != speedState || oldstate != state) {
 80013f0:	4b4a      	ldr	r3, [pc, #296]	; (800151c <EscalatorRUN_SLOW+0x148>)
 80013f2:	781a      	ldrb	r2, [r3, #0]
 80013f4:	4b4a      	ldr	r3, [pc, #296]	; (8001520 <EscalatorRUN_SLOW+0x14c>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d105      	bne.n	8001408 <EscalatorRUN_SLOW+0x34>
 80013fc:	4b49      	ldr	r3, [pc, #292]	; (8001524 <EscalatorRUN_SLOW+0x150>)
 80013fe:	781a      	ldrb	r2, [r3, #0]
 8001400:	4b45      	ldr	r3, [pc, #276]	; (8001518 <EscalatorRUN_SLOW+0x144>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	429a      	cmp	r2, r3
 8001406:	d023      	beq.n	8001450 <EscalatorRUN_SLOW+0x7c>
				goBackward(80);
 8001408:	2050      	movs	r0, #80	; 0x50
 800140a:	f000 fbb5 	bl	8001b78 <goBackward>
				I2C_CLCD_GotoXY(0, 1);
 800140e:	2101      	movs	r1, #1
 8001410:	2000      	movs	r0, #0
 8001412:	f000 f967 	bl	80016e4 <I2C_CLCD_GotoXY>
				I2C_CLCD_PutStr("               ");
 8001416:	4844      	ldr	r0, [pc, #272]	; (8001528 <EscalatorRUN_SLOW+0x154>)
 8001418:	f000 f9a0 	bl	800175c <I2C_CLCD_PutStr>
				I2C_CLCD_GotoXY(0, 1);
 800141c:	2101      	movs	r1, #1
 800141e:	2000      	movs	r0, #0
 8001420:	f000 f960 	bl	80016e4 <I2C_CLCD_GotoXY>
				I2C_CLCD_PutStr("  SLOW  /  DOWN ");
 8001424:	4841      	ldr	r0, [pc, #260]	; (800152c <EscalatorRUN_SLOW+0x158>)
 8001426:	f000 f999 	bl	800175c <I2C_CLCD_PutStr>
				printf("speed : SLOW\n");
 800142a:	4841      	ldr	r0, [pc, #260]	; (8001530 <EscalatorRUN_SLOW+0x15c>)
 800142c:	f006 ff44 	bl	80082b8 <puts>
				printf("State : DOWN \n");
 8001430:	4840      	ldr	r0, [pc, #256]	; (8001534 <EscalatorRUN_SLOW+0x160>)
 8001432:	f006 ff41 	bl	80082b8 <puts>
				oldespeedState = speedState;
 8001436:	4b3a      	ldr	r3, [pc, #232]	; (8001520 <EscalatorRUN_SLOW+0x14c>)
 8001438:	781a      	ldrb	r2, [r3, #0]
 800143a:	4b38      	ldr	r3, [pc, #224]	; (800151c <EscalatorRUN_SLOW+0x148>)
 800143c:	701a      	strb	r2, [r3, #0]
				oldstate = state;
 800143e:	4b36      	ldr	r3, [pc, #216]	; (8001518 <EscalatorRUN_SLOW+0x144>)
 8001440:	781a      	ldrb	r2, [r3, #0]
 8001442:	4b38      	ldr	r3, [pc, #224]	; (8001524 <EscalatorRUN_SLOW+0x150>)
 8001444:	701a      	strb	r2, [r3, #0]
				printf("\n");
 8001446:	200a      	movs	r0, #10
 8001448:	f006 feda 	bl	8008200 <putchar>
				DOWNLCDinit();
 800144c:	f7ff fcde 	bl	8000e0c <DOWNLCDinit>
			}
			DOWNLCD();
 8001450:	f7ff fd06 	bl	8000e60 <DOWNLCD>
			break;
 8001454:	e05a      	b.n	800150c <EscalatorRUN_SLOW+0x138>
		case UP:
			if (oldespeedState != speedState || oldstate != state) {
 8001456:	4b31      	ldr	r3, [pc, #196]	; (800151c <EscalatorRUN_SLOW+0x148>)
 8001458:	781a      	ldrb	r2, [r3, #0]
 800145a:	4b31      	ldr	r3, [pc, #196]	; (8001520 <EscalatorRUN_SLOW+0x14c>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	429a      	cmp	r2, r3
 8001460:	d105      	bne.n	800146e <EscalatorRUN_SLOW+0x9a>
 8001462:	4b30      	ldr	r3, [pc, #192]	; (8001524 <EscalatorRUN_SLOW+0x150>)
 8001464:	781a      	ldrb	r2, [r3, #0]
 8001466:	4b2c      	ldr	r3, [pc, #176]	; (8001518 <EscalatorRUN_SLOW+0x144>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	429a      	cmp	r2, r3
 800146c:	d01f      	beq.n	80014ae <EscalatorRUN_SLOW+0xda>
				goForward(80);
 800146e:	2050      	movs	r0, #80	; 0x50
 8001470:	f000 fb5c 	bl	8001b2c <goForward>
				I2C_CLCD_PutStr("               ");
 8001474:	482c      	ldr	r0, [pc, #176]	; (8001528 <EscalatorRUN_SLOW+0x154>)
 8001476:	f000 f971 	bl	800175c <I2C_CLCD_PutStr>
				I2C_CLCD_GotoXY(0, 1);
 800147a:	2101      	movs	r1, #1
 800147c:	2000      	movs	r0, #0
 800147e:	f000 f931 	bl	80016e4 <I2C_CLCD_GotoXY>
				I2C_CLCD_PutStr("  SLOW  /  UP  ");
 8001482:	482d      	ldr	r0, [pc, #180]	; (8001538 <EscalatorRUN_SLOW+0x164>)
 8001484:	f000 f96a 	bl	800175c <I2C_CLCD_PutStr>
				printf("speed : SLOW\n");
 8001488:	4829      	ldr	r0, [pc, #164]	; (8001530 <EscalatorRUN_SLOW+0x15c>)
 800148a:	f006 ff15 	bl	80082b8 <puts>
				printf("State : UP \n");
 800148e:	482b      	ldr	r0, [pc, #172]	; (800153c <EscalatorRUN_SLOW+0x168>)
 8001490:	f006 ff12 	bl	80082b8 <puts>
				oldespeedState = speedState;
 8001494:	4b22      	ldr	r3, [pc, #136]	; (8001520 <EscalatorRUN_SLOW+0x14c>)
 8001496:	781a      	ldrb	r2, [r3, #0]
 8001498:	4b20      	ldr	r3, [pc, #128]	; (800151c <EscalatorRUN_SLOW+0x148>)
 800149a:	701a      	strb	r2, [r3, #0]
				oldstate = state;
 800149c:	4b1e      	ldr	r3, [pc, #120]	; (8001518 <EscalatorRUN_SLOW+0x144>)
 800149e:	781a      	ldrb	r2, [r3, #0]
 80014a0:	4b20      	ldr	r3, [pc, #128]	; (8001524 <EscalatorRUN_SLOW+0x150>)
 80014a2:	701a      	strb	r2, [r3, #0]
				printf("\n");
 80014a4:	200a      	movs	r0, #10
 80014a6:	f006 feab 	bl	8008200 <putchar>
				UPLCDinit();
 80014aa:	f7ff fc75 	bl	8000d98 <UPLCDinit>
			}
			UPLCD();
 80014ae:	f7ff fc9d 	bl	8000dec <UPLCD>
			break;
 80014b2:	e02b      	b.n	800150c <EscalatorRUN_SLOW+0x138>
		case STOP:
			stopMove();
 80014b4:	f000 fb86 	bl	8001bc4 <stopMove>
			if (oldespeedState != speedState || oldstate != state) {
 80014b8:	4b18      	ldr	r3, [pc, #96]	; (800151c <EscalatorRUN_SLOW+0x148>)
 80014ba:	781a      	ldrb	r2, [r3, #0]
 80014bc:	4b18      	ldr	r3, [pc, #96]	; (8001520 <EscalatorRUN_SLOW+0x14c>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d105      	bne.n	80014d0 <EscalatorRUN_SLOW+0xfc>
 80014c4:	4b17      	ldr	r3, [pc, #92]	; (8001524 <EscalatorRUN_SLOW+0x150>)
 80014c6:	781a      	ldrb	r2, [r3, #0]
 80014c8:	4b13      	ldr	r3, [pc, #76]	; (8001518 <EscalatorRUN_SLOW+0x144>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d01c      	beq.n	800150a <EscalatorRUN_SLOW+0x136>
				I2C_CLCD_PutStr("               ");
 80014d0:	4815      	ldr	r0, [pc, #84]	; (8001528 <EscalatorRUN_SLOW+0x154>)
 80014d2:	f000 f943 	bl	800175c <I2C_CLCD_PutStr>
				I2C_CLCD_GotoXY(0, 1);
 80014d6:	2101      	movs	r1, #1
 80014d8:	2000      	movs	r0, #0
 80014da:	f000 f903 	bl	80016e4 <I2C_CLCD_GotoXY>
				I2C_CLCD_PutStr("  SLOW  /  STOP  ");
 80014de:	4818      	ldr	r0, [pc, #96]	; (8001540 <EscalatorRUN_SLOW+0x16c>)
 80014e0:	f000 f93c 	bl	800175c <I2C_CLCD_PutStr>
				printf("speed : SLOW\n");
 80014e4:	4812      	ldr	r0, [pc, #72]	; (8001530 <EscalatorRUN_SLOW+0x15c>)
 80014e6:	f006 fee7 	bl	80082b8 <puts>
				printf("State : STOP \n");
 80014ea:	4816      	ldr	r0, [pc, #88]	; (8001544 <EscalatorRUN_SLOW+0x170>)
 80014ec:	f006 fee4 	bl	80082b8 <puts>
				oldespeedState = speedState;
 80014f0:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <EscalatorRUN_SLOW+0x14c>)
 80014f2:	781a      	ldrb	r2, [r3, #0]
 80014f4:	4b09      	ldr	r3, [pc, #36]	; (800151c <EscalatorRUN_SLOW+0x148>)
 80014f6:	701a      	strb	r2, [r3, #0]
				oldstate = state;
 80014f8:	4b07      	ldr	r3, [pc, #28]	; (8001518 <EscalatorRUN_SLOW+0x144>)
 80014fa:	781a      	ldrb	r2, [r3, #0]
 80014fc:	4b09      	ldr	r3, [pc, #36]	; (8001524 <EscalatorRUN_SLOW+0x150>)
 80014fe:	701a      	strb	r2, [r3, #0]
				printf("\n");
 8001500:	200a      	movs	r0, #10
 8001502:	f006 fe7d 	bl	8008200 <putchar>
				STOPLCDinit();
 8001506:	f7ff fcbb 	bl	8000e80 <STOPLCDinit>
			}
			break;
 800150a:	bf00      	nop
	}
	HAL_Delay(100);
 800150c:	2064      	movs	r0, #100	; 0x64
 800150e:	f001 fdb1 	bl	8003074 <HAL_Delay>
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000000 	.word	0x20000000
 800151c:	20000003 	.word	0x20000003
 8001520:	20000002 	.word	0x20000002
 8001524:	20000001 	.word	0x20000001
 8001528:	080093e0 	.word	0x080093e0
 800152c:	0800948c 	.word	0x0800948c
 8001530:	080094a0 	.word	0x080094a0
 8001534:	0800942c 	.word	0x0800942c
 8001538:	080094b0 	.word	0x080094b0
 800153c:	0800945c 	.word	0x0800945c
 8001540:	080094c0 	.word	0x080094c0
 8001544:	0800947c 	.word	0x0800947c

08001548 <initCLCD>:
#include "I2C_CLCD.h"

I2C_HandleTypeDef *myHi2c;
I2C_HandleTypeDef *myHi2c2;

void initCLCD(I2C_HandleTypeDef *inHi2c1,I2C_HandleTypeDef*inHi2c2){
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
	myHi2c = inHi2c1;
 8001552:	4a06      	ldr	r2, [pc, #24]	; (800156c <initCLCD+0x24>)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6013      	str	r3, [r2, #0]
	myHi2c2 = inHi2c2;
 8001558:	4a05      	ldr	r2, [pc, #20]	; (8001570 <initCLCD+0x28>)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	6013      	str	r3, [r2, #0]
	I2C_CLCD_CustomFont_UPARROW2();
 800155e:	f000 fa0c 	bl	800197a <I2C_CLCD_CustomFont_UPARROW2>
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000090 	.word	0x20000090
 8001570:	20000094 	.word	0x20000094

08001574 <I2C_CLCD_Delay_us>:
void I2C_CLCD_Delay_us(uint8_t us) {
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
	volatile uint8_t i;

	for (i = 0; i < 19 * us / 10; i++)
 800157e:	2300      	movs	r3, #0
 8001580:	73fb      	strb	r3, [r7, #15]
 8001582:	e004      	b.n	800158e <I2C_CLCD_Delay_us+0x1a>
 8001584:	7bfb      	ldrb	r3, [r7, #15]
 8001586:	b2db      	uxtb	r3, r3
 8001588:	3301      	adds	r3, #1
 800158a:	b2db      	uxtb	r3, r3
 800158c:	73fb      	strb	r3, [r7, #15]
 800158e:	7bfb      	ldrb	r3, [r7, #15]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	4619      	mov	r1, r3
 8001594:	79fa      	ldrb	r2, [r7, #7]
 8001596:	4613      	mov	r3, r2
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	4413      	add	r3, r2
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	4413      	add	r3, r2
 80015a0:	4a07      	ldr	r2, [pc, #28]	; (80015c0 <I2C_CLCD_Delay_us+0x4c>)
 80015a2:	fb82 0203 	smull	r0, r2, r2, r3
 80015a6:	1092      	asrs	r2, r2, #2
 80015a8:	17db      	asrs	r3, r3, #31
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	4299      	cmp	r1, r3
 80015ae:	dbe9      	blt.n	8001584 <I2C_CLCD_Delay_us+0x10>
		;
}
 80015b0:	bf00      	nop
 80015b2:	bf00      	nop
 80015b4:	3714      	adds	r7, #20
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	66666667 	.word	0x66666667

080015c4 <I2C_CLCD_SendByte>:

void I2C_CLCD_SendByte(uint8_t RS_State, uint8_t Byte) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af02      	add	r7, sp, #8
 80015ca:	4603      	mov	r3, r0
 80015cc:	460a      	mov	r2, r1
 80015ce:	71fb      	strb	r3, [r7, #7]
 80015d0:	4613      	mov	r3, r2
 80015d2:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	uint8_t buffer[4];

	for (i = 0; i < 2; i++) {
 80015d4:	2300      	movs	r3, #0
 80015d6:	73fb      	strb	r3, [r7, #15]
 80015d8:	e01c      	b.n	8001614 <I2C_CLCD_SendByte+0x50>
		buffer[i] = (Byte & 0xf0) | (1 << I2C_CLCD_LED) | (!i << I2C_CLCD_E)
 80015da:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80015de:	f023 030f 	bic.w	r3, r3, #15
 80015e2:	b25b      	sxtb	r3, r3
 80015e4:	f043 0308 	orr.w	r3, r3, #8
 80015e8:	b25b      	sxtb	r3, r3
				| (0 << I2C_CLCD_RW) | (RS_State << I2C_CLCD_RS);
 80015ea:	7bfa      	ldrb	r2, [r7, #15]
 80015ec:	2a00      	cmp	r2, #0
 80015ee:	d101      	bne.n	80015f4 <I2C_CLCD_SendByte+0x30>
 80015f0:	2204      	movs	r2, #4
 80015f2:	e000      	b.n	80015f6 <I2C_CLCD_SendByte+0x32>
 80015f4:	2200      	movs	r2, #0
 80015f6:	4313      	orrs	r3, r2
 80015f8:	b25a      	sxtb	r2, r3
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	4313      	orrs	r3, r2
 8001600:	b25a      	sxtb	r2, r3
		buffer[i] = (Byte & 0xf0) | (1 << I2C_CLCD_LED) | (!i << I2C_CLCD_E)
 8001602:	7bfb      	ldrb	r3, [r7, #15]
				| (0 << I2C_CLCD_RW) | (RS_State << I2C_CLCD_RS);
 8001604:	b2d2      	uxtb	r2, r2
		buffer[i] = (Byte & 0xf0) | (1 << I2C_CLCD_LED) | (!i << I2C_CLCD_E)
 8001606:	3310      	adds	r3, #16
 8001608:	443b      	add	r3, r7
 800160a:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (i = 0; i < 2; i++) {
 800160e:	7bfb      	ldrb	r3, [r7, #15]
 8001610:	3301      	adds	r3, #1
 8001612:	73fb      	strb	r3, [r7, #15]
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d9df      	bls.n	80015da <I2C_CLCD_SendByte+0x16>
	}

	for (i = 0; i < 2; i++) {
 800161a:	2300      	movs	r3, #0
 800161c:	73fb      	strb	r3, [r7, #15]
 800161e:	e01b      	b.n	8001658 <I2C_CLCD_SendByte+0x94>
		buffer[i + 2] = (Byte << 4) | (1 << I2C_CLCD_LED) | (!i << I2C_CLCD_E)
 8001620:	79bb      	ldrb	r3, [r7, #6]
 8001622:	011b      	lsls	r3, r3, #4
 8001624:	b25b      	sxtb	r3, r3
 8001626:	f043 0308 	orr.w	r3, r3, #8
 800162a:	b25b      	sxtb	r3, r3
				| (0 << I2C_CLCD_RW) | (RS_State << I2C_CLCD_RS);
 800162c:	7bfa      	ldrb	r2, [r7, #15]
 800162e:	2a00      	cmp	r2, #0
 8001630:	d101      	bne.n	8001636 <I2C_CLCD_SendByte+0x72>
 8001632:	2204      	movs	r2, #4
 8001634:	e000      	b.n	8001638 <I2C_CLCD_SendByte+0x74>
 8001636:	2200      	movs	r2, #0
 8001638:	4313      	orrs	r3, r2
 800163a:	b25a      	sxtb	r2, r3
 800163c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001640:	4313      	orrs	r3, r2
 8001642:	b25a      	sxtb	r2, r3
		buffer[i + 2] = (Byte << 4) | (1 << I2C_CLCD_LED) | (!i << I2C_CLCD_E)
 8001644:	7bfb      	ldrb	r3, [r7, #15]
 8001646:	3302      	adds	r3, #2
				| (0 << I2C_CLCD_RW) | (RS_State << I2C_CLCD_RS);
 8001648:	b2d2      	uxtb	r2, r2
		buffer[i + 2] = (Byte << 4) | (1 << I2C_CLCD_LED) | (!i << I2C_CLCD_E)
 800164a:	3310      	adds	r3, #16
 800164c:	443b      	add	r3, r7
 800164e:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (i = 0; i < 2; i++) {
 8001652:	7bfb      	ldrb	r3, [r7, #15]
 8001654:	3301      	adds	r3, #1
 8001656:	73fb      	strb	r3, [r7, #15]
 8001658:	7bfb      	ldrb	r3, [r7, #15]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d9e0      	bls.n	8001620 <I2C_CLCD_SendByte+0x5c>
	}
	HAL_I2C_Master_Transmit(myHi2c, PCF8574_AD | WRITE, buffer, 4, 300);
 800165e:	4b09      	ldr	r3, [pc, #36]	; (8001684 <I2C_CLCD_SendByte+0xc0>)
 8001660:	6818      	ldr	r0, [r3, #0]
 8001662:	f107 0208 	add.w	r2, r7, #8
 8001666:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	2304      	movs	r3, #4
 800166e:	214e      	movs	r1, #78	; 0x4e
 8001670:	f002 f9c2 	bl	80039f8 <HAL_I2C_Master_Transmit>

	I2C_CLCD_Delay_us(40);
 8001674:	2028      	movs	r0, #40	; 0x28
 8001676:	f7ff ff7d 	bl	8001574 <I2C_CLCD_Delay_us>
}
 800167a:	bf00      	nop
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000090 	.word	0x20000090

08001688 <I2C_CLCD_init>:

void I2C_CLCD_init(void) {
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t CLCD_Init_CMD[4] = { 0x28, 0x0c, 0x01, 0x06 };
 800168e:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <I2C_CLCD_init+0x58>)
 8001690:	603b      	str	r3, [r7, #0]

	HAL_Delay(100);
 8001692:	2064      	movs	r0, #100	; 0x64
 8001694:	f001 fcee 	bl	8003074 <HAL_Delay>

	I2C_CLCD_SendByte(0, 0x02);
 8001698:	2102      	movs	r1, #2
 800169a:	2000      	movs	r0, #0
 800169c:	f7ff ff92 	bl	80015c4 <I2C_CLCD_SendByte>

	HAL_Delay(2);
 80016a0:	2002      	movs	r0, #2
 80016a2:	f001 fce7 	bl	8003074 <HAL_Delay>

	for (i = 0; i < 4; i++) {
 80016a6:	2300      	movs	r3, #0
 80016a8:	71fb      	strb	r3, [r7, #7]
 80016aa:	e011      	b.n	80016d0 <I2C_CLCD_init+0x48>
		I2C_CLCD_SendByte(0, CLCD_Init_CMD[i]);
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	3308      	adds	r3, #8
 80016b0:	443b      	add	r3, r7
 80016b2:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80016b6:	4619      	mov	r1, r3
 80016b8:	2000      	movs	r0, #0
 80016ba:	f7ff ff83 	bl	80015c4 <I2C_CLCD_SendByte>

		if (i == 2)
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d102      	bne.n	80016ca <I2C_CLCD_init+0x42>
			HAL_Delay(2);
 80016c4:	2002      	movs	r0, #2
 80016c6:	f001 fcd5 	bl	8003074 <HAL_Delay>
	for (i = 0; i < 4; i++) {
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	3301      	adds	r3, #1
 80016ce:	71fb      	strb	r3, [r7, #7]
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	2b03      	cmp	r3, #3
 80016d4:	d9ea      	bls.n	80016ac <I2C_CLCD_init+0x24>
	}
}
 80016d6:	bf00      	nop
 80016d8:	bf00      	nop
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	06010c28 	.word	0x06010c28

080016e4 <I2C_CLCD_GotoXY>:

void I2C_CLCD_GotoXY(uint8_t X, uint8_t Y) {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	460a      	mov	r2, r1
 80016ee:	71fb      	strb	r3, [r7, #7]
 80016f0:	4613      	mov	r3, r2
 80016f2:	71bb      	strb	r3, [r7, #6]
	I2C_CLCD_SendByte(0, 0x80 | (0x40 * Y + X));
 80016f4:	79bb      	ldrb	r3, [r7, #6]
 80016f6:	019b      	lsls	r3, r3, #6
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	4413      	add	r3, r2
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	b25b      	sxtb	r3, r3
 8001702:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001706:	b25b      	sxtb	r3, r3
 8001708:	b2db      	uxtb	r3, r3
 800170a:	4619      	mov	r1, r3
 800170c:	2000      	movs	r0, #0
 800170e:	f7ff ff59 	bl	80015c4 <I2C_CLCD_SendByte>
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <I2C_CLCD_PutC>:

void I2C_CLCD_PutC(uint8_t C) {
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	4603      	mov	r3, r0
 8001722:	71fb      	strb	r3, [r7, #7]
	if (C == '\f') {
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	2b0c      	cmp	r3, #12
 8001728:	d107      	bne.n	800173a <I2C_CLCD_PutC+0x20>
		I2C_CLCD_SendByte(0, 0x01);
 800172a:	2101      	movs	r1, #1
 800172c:	2000      	movs	r0, #0
 800172e:	f7ff ff49 	bl	80015c4 <I2C_CLCD_SendByte>
		HAL_Delay(2);
 8001732:	2002      	movs	r0, #2
 8001734:	f001 fc9e 	bl	8003074 <HAL_Delay>
	} else if (C == '\n') {
		I2C_CLCD_GotoXY(0, 1);
	} else {
		I2C_CLCD_SendByte(1, C);
	}
}
 8001738:	e00c      	b.n	8001754 <I2C_CLCD_PutC+0x3a>
	} else if (C == '\n') {
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	2b0a      	cmp	r3, #10
 800173e:	d104      	bne.n	800174a <I2C_CLCD_PutC+0x30>
		I2C_CLCD_GotoXY(0, 1);
 8001740:	2101      	movs	r1, #1
 8001742:	2000      	movs	r0, #0
 8001744:	f7ff ffce 	bl	80016e4 <I2C_CLCD_GotoXY>
}
 8001748:	e004      	b.n	8001754 <I2C_CLCD_PutC+0x3a>
		I2C_CLCD_SendByte(1, C);
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	4619      	mov	r1, r3
 800174e:	2001      	movs	r0, #1
 8001750:	f7ff ff38 	bl	80015c4 <I2C_CLCD_SendByte>
}
 8001754:	bf00      	nop
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <I2C_CLCD_PutStr>:

void I2C_CLCD_PutStr(uint8_t *Str) {
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	while (*Str)
 8001764:	e006      	b.n	8001774 <I2C_CLCD_PutStr+0x18>
		I2C_CLCD_PutC(*Str++);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	1c5a      	adds	r2, r3, #1
 800176a:	607a      	str	r2, [r7, #4]
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff ffd3 	bl	800171a <I2C_CLCD_PutC>
	while (*Str)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1f4      	bne.n	8001766 <I2C_CLCD_PutStr+0xa>
}
 800177c:	bf00      	nop
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <I2C_CLCD_SendByte2>:
			}
		}
}
 */

void I2C_CLCD_SendByte2(uint8_t RS_State, uint8_t Byte) {
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af02      	add	r7, sp, #8
 800178e:	4603      	mov	r3, r0
 8001790:	460a      	mov	r2, r1
 8001792:	71fb      	strb	r3, [r7, #7]
 8001794:	4613      	mov	r3, r2
 8001796:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	uint8_t buffer[4];

	for (i = 0; i < 2; i++) {
 8001798:	2300      	movs	r3, #0
 800179a:	73fb      	strb	r3, [r7, #15]
 800179c:	e01c      	b.n	80017d8 <I2C_CLCD_SendByte2+0x50>
		buffer[i] = (Byte & 0xf0) | (1 << I2C_CLCD_LED) | (!i << I2C_CLCD_E)
 800179e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80017a2:	f023 030f 	bic.w	r3, r3, #15
 80017a6:	b25b      	sxtb	r3, r3
 80017a8:	f043 0308 	orr.w	r3, r3, #8
 80017ac:	b25b      	sxtb	r3, r3
				| (0 << I2C_CLCD_RW) | (RS_State << I2C_CLCD_RS);
 80017ae:	7bfa      	ldrb	r2, [r7, #15]
 80017b0:	2a00      	cmp	r2, #0
 80017b2:	d101      	bne.n	80017b8 <I2C_CLCD_SendByte2+0x30>
 80017b4:	2204      	movs	r2, #4
 80017b6:	e000      	b.n	80017ba <I2C_CLCD_SendByte2+0x32>
 80017b8:	2200      	movs	r2, #0
 80017ba:	4313      	orrs	r3, r2
 80017bc:	b25a      	sxtb	r2, r3
 80017be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	b25a      	sxtb	r2, r3
		buffer[i] = (Byte & 0xf0) | (1 << I2C_CLCD_LED) | (!i << I2C_CLCD_E)
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
				| (0 << I2C_CLCD_RW) | (RS_State << I2C_CLCD_RS);
 80017c8:	b2d2      	uxtb	r2, r2
		buffer[i] = (Byte & 0xf0) | (1 << I2C_CLCD_LED) | (!i << I2C_CLCD_E)
 80017ca:	3310      	adds	r3, #16
 80017cc:	443b      	add	r3, r7
 80017ce:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (i = 0; i < 2; i++) {
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	3301      	adds	r3, #1
 80017d6:	73fb      	strb	r3, [r7, #15]
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d9df      	bls.n	800179e <I2C_CLCD_SendByte2+0x16>
	}

	for (i = 0; i < 2; i++) {
 80017de:	2300      	movs	r3, #0
 80017e0:	73fb      	strb	r3, [r7, #15]
 80017e2:	e01b      	b.n	800181c <I2C_CLCD_SendByte2+0x94>
		buffer[i + 2] = (Byte << 4) | (1 << I2C_CLCD_LED) | (!i << I2C_CLCD_E)
 80017e4:	79bb      	ldrb	r3, [r7, #6]
 80017e6:	011b      	lsls	r3, r3, #4
 80017e8:	b25b      	sxtb	r3, r3
 80017ea:	f043 0308 	orr.w	r3, r3, #8
 80017ee:	b25b      	sxtb	r3, r3
				| (0 << I2C_CLCD_RW) | (RS_State << I2C_CLCD_RS);
 80017f0:	7bfa      	ldrb	r2, [r7, #15]
 80017f2:	2a00      	cmp	r2, #0
 80017f4:	d101      	bne.n	80017fa <I2C_CLCD_SendByte2+0x72>
 80017f6:	2204      	movs	r2, #4
 80017f8:	e000      	b.n	80017fc <I2C_CLCD_SendByte2+0x74>
 80017fa:	2200      	movs	r2, #0
 80017fc:	4313      	orrs	r3, r2
 80017fe:	b25a      	sxtb	r2, r3
 8001800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001804:	4313      	orrs	r3, r2
 8001806:	b25a      	sxtb	r2, r3
		buffer[i + 2] = (Byte << 4) | (1 << I2C_CLCD_LED) | (!i << I2C_CLCD_E)
 8001808:	7bfb      	ldrb	r3, [r7, #15]
 800180a:	3302      	adds	r3, #2
				| (0 << I2C_CLCD_RW) | (RS_State << I2C_CLCD_RS);
 800180c:	b2d2      	uxtb	r2, r2
		buffer[i + 2] = (Byte << 4) | (1 << I2C_CLCD_LED) | (!i << I2C_CLCD_E)
 800180e:	3310      	adds	r3, #16
 8001810:	443b      	add	r3, r7
 8001812:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (i = 0; i < 2; i++) {
 8001816:	7bfb      	ldrb	r3, [r7, #15]
 8001818:	3301      	adds	r3, #1
 800181a:	73fb      	strb	r3, [r7, #15]
 800181c:	7bfb      	ldrb	r3, [r7, #15]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d9e0      	bls.n	80017e4 <I2C_CLCD_SendByte2+0x5c>
	}
	HAL_I2C_Master_Transmit(myHi2c2, PCF8574_AD | WRITE, buffer, 4, 300);
 8001822:	4b09      	ldr	r3, [pc, #36]	; (8001848 <I2C_CLCD_SendByte2+0xc0>)
 8001824:	6818      	ldr	r0, [r3, #0]
 8001826:	f107 0208 	add.w	r2, r7, #8
 800182a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	2304      	movs	r3, #4
 8001832:	214e      	movs	r1, #78	; 0x4e
 8001834:	f002 f8e0 	bl	80039f8 <HAL_I2C_Master_Transmit>

	I2C_CLCD_Delay_us(40);
 8001838:	2028      	movs	r0, #40	; 0x28
 800183a:	f7ff fe9b 	bl	8001574 <I2C_CLCD_Delay_us>
}
 800183e:	bf00      	nop
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000094 	.word	0x20000094

0800184c <I2C_CLCD_init2>:

void I2C_CLCD_init2(void) {
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t CLCD_Init_CMD[4] = { 0x28, 0x0c, 0x01, 0x06 };
 8001852:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <I2C_CLCD_init2+0x58>)
 8001854:	603b      	str	r3, [r7, #0]

	HAL_Delay(100);
 8001856:	2064      	movs	r0, #100	; 0x64
 8001858:	f001 fc0c 	bl	8003074 <HAL_Delay>

	I2C_CLCD_SendByte2(0, 0x02);
 800185c:	2102      	movs	r1, #2
 800185e:	2000      	movs	r0, #0
 8001860:	f7ff ff92 	bl	8001788 <I2C_CLCD_SendByte2>

	HAL_Delay(2);
 8001864:	2002      	movs	r0, #2
 8001866:	f001 fc05 	bl	8003074 <HAL_Delay>

	for (i = 0; i < 4; i++) {
 800186a:	2300      	movs	r3, #0
 800186c:	71fb      	strb	r3, [r7, #7]
 800186e:	e011      	b.n	8001894 <I2C_CLCD_init2+0x48>
		I2C_CLCD_SendByte2(0, CLCD_Init_CMD[i]);
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	3308      	adds	r3, #8
 8001874:	443b      	add	r3, r7
 8001876:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800187a:	4619      	mov	r1, r3
 800187c:	2000      	movs	r0, #0
 800187e:	f7ff ff83 	bl	8001788 <I2C_CLCD_SendByte2>

		if (i == 2)
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	2b02      	cmp	r3, #2
 8001886:	d102      	bne.n	800188e <I2C_CLCD_init2+0x42>
			HAL_Delay(2);
 8001888:	2002      	movs	r0, #2
 800188a:	f001 fbf3 	bl	8003074 <HAL_Delay>
	for (i = 0; i < 4; i++) {
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	3301      	adds	r3, #1
 8001892:	71fb      	strb	r3, [r7, #7]
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	2b03      	cmp	r3, #3
 8001898:	d9ea      	bls.n	8001870 <I2C_CLCD_init2+0x24>
	}
}
 800189a:	bf00      	nop
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	06010c28 	.word	0x06010c28

080018a8 <I2C_CLCD_GotoXY2>:

void I2C_CLCD_GotoXY2(uint8_t X, uint8_t Y) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	460a      	mov	r2, r1
 80018b2:	71fb      	strb	r3, [r7, #7]
 80018b4:	4613      	mov	r3, r2
 80018b6:	71bb      	strb	r3, [r7, #6]
	I2C_CLCD_SendByte2(0, 0x80 | (0x40 * Y + X));
 80018b8:	79bb      	ldrb	r3, [r7, #6]
 80018ba:	019b      	lsls	r3, r3, #6
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	4413      	add	r3, r2
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	b25b      	sxtb	r3, r3
 80018c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018ca:	b25b      	sxtb	r3, r3
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	4619      	mov	r1, r3
 80018d0:	2000      	movs	r0, #0
 80018d2:	f7ff ff59 	bl	8001788 <I2C_CLCD_SendByte2>
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <I2C_CLCD_PutC2>:

void I2C_CLCD_PutC2(uint8_t C) {
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	4603      	mov	r3, r0
 80018e6:	71fb      	strb	r3, [r7, #7]
	if (C == '\f') {
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	2b0c      	cmp	r3, #12
 80018ec:	d107      	bne.n	80018fe <I2C_CLCD_PutC2+0x20>
		I2C_CLCD_SendByte2(0, 0x01);
 80018ee:	2101      	movs	r1, #1
 80018f0:	2000      	movs	r0, #0
 80018f2:	f7ff ff49 	bl	8001788 <I2C_CLCD_SendByte2>
		HAL_Delay(2);
 80018f6:	2002      	movs	r0, #2
 80018f8:	f001 fbbc 	bl	8003074 <HAL_Delay>
	} else if (C == '\n') {
		I2C_CLCD_GotoXY2(0, 1);
	} else {
		I2C_CLCD_SendByte2(1, C);
	}
}
 80018fc:	e00c      	b.n	8001918 <I2C_CLCD_PutC2+0x3a>
	} else if (C == '\n') {
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	2b0a      	cmp	r3, #10
 8001902:	d104      	bne.n	800190e <I2C_CLCD_PutC2+0x30>
		I2C_CLCD_GotoXY2(0, 1);
 8001904:	2101      	movs	r1, #1
 8001906:	2000      	movs	r0, #0
 8001908:	f7ff ffce 	bl	80018a8 <I2C_CLCD_GotoXY2>
}
 800190c:	e004      	b.n	8001918 <I2C_CLCD_PutC2+0x3a>
		I2C_CLCD_SendByte2(1, C);
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	4619      	mov	r1, r3
 8001912:	2001      	movs	r0, #1
 8001914:	f7ff ff38 	bl	8001788 <I2C_CLCD_SendByte2>
}
 8001918:	bf00      	nop
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <I2C_CLCD_PutStr2>:

void I2C_CLCD_PutStr2(uint8_t *Str) {
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	while (*Str)
 8001928:	e006      	b.n	8001938 <I2C_CLCD_PutStr2+0x18>
		I2C_CLCD_PutC2(*Str++);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	1c5a      	adds	r2, r3, #1
 800192e:	607a      	str	r2, [r7, #4]
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff ffd3 	bl	80018de <I2C_CLCD_PutC2>
	while (*Str)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1f4      	bne.n	800192a <I2C_CLCD_PutStr2+0xa>
}
 8001940:	bf00      	nop
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <I2C_CLCD_Right2>:

void I2C_CLCD_Cursor2(uint8_t on) {
	I2C_CLCD_SendByte2(0, (0x0c | (on << 1)));
}

void I2C_CLCD_Right2() {
 800194a:	b580      	push	{r7, lr}
 800194c:	af00      	add	r7, sp, #0
	I2C_CLCD_SendByte2(0, 0b00011100);
 800194e:	211c      	movs	r1, #28
 8001950:	2000      	movs	r0, #0
 8001952:	f7ff ff19 	bl	8001788 <I2C_CLCD_SendByte2>
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}

0800195a <I2C_CLCD_Left2>:

void I2C_CLCD_Left2() {
 800195a:	b580      	push	{r7, lr}
 800195c:	af00      	add	r7, sp, #0
	I2C_CLCD_SendByte2(0, 0b00011000);
 800195e:	2118      	movs	r1, #24
 8001960:	2000      	movs	r0, #0
 8001962:	f7ff ff11 	bl	8001788 <I2C_CLCD_SendByte2>
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}

0800196a <I2C_CLCD_Clear2>:
		}
	}
}

void I2C_CLCD_Clear2()
{
 800196a:	b580      	push	{r7, lr}
 800196c:	af00      	add	r7, sp, #0
   I2C_CLCD_SendByte2(0, 0b00000001);
 800196e:	2101      	movs	r1, #1
 8001970:	2000      	movs	r0, #0
 8001972:	f7ff ff09 	bl	8001788 <I2C_CLCD_SendByte2>
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}

0800197a <I2C_CLCD_CustomFont_UPARROW2>:

void I2C_CLCD_CustomFont_UPARROW2()
{
 800197a:	b580      	push	{r7, lr}
 800197c:	af00      	add	r7, sp, #0
   I2C_CLCD_SendByte2(0, 0x40);      // set CGRAM address(0b0100 0000)
 800197e:	2140      	movs	r1, #64	; 0x40
 8001980:	2000      	movs	r0, #0
 8001982:	f7ff ff01 	bl	8001788 <I2C_CLCD_SendByte2>

   I2C_CLCD_SendByte2(1, 0b00000);   // PutC(0)
 8001986:	2100      	movs	r1, #0
 8001988:	2001      	movs	r0, #1
 800198a:	f7ff fefd 	bl	8001788 <I2C_CLCD_SendByte2>
   I2C_CLCD_SendByte2(1, 0b00000);
 800198e:	2100      	movs	r1, #0
 8001990:	2001      	movs	r0, #1
 8001992:	f7ff fef9 	bl	8001788 <I2C_CLCD_SendByte2>
   I2C_CLCD_SendByte2(1, 0b00000);
 8001996:	2100      	movs	r1, #0
 8001998:	2001      	movs	r0, #1
 800199a:	f7ff fef5 	bl	8001788 <I2C_CLCD_SendByte2>
   I2C_CLCD_SendByte2(1, 0b00001);
 800199e:	2101      	movs	r1, #1
 80019a0:	2001      	movs	r0, #1
 80019a2:	f7ff fef1 	bl	8001788 <I2C_CLCD_SendByte2>
   I2C_CLCD_SendByte2(1, 0b00011);
 80019a6:	2103      	movs	r1, #3
 80019a8:	2001      	movs	r0, #1
 80019aa:	f7ff feed 	bl	8001788 <I2C_CLCD_SendByte2>
   I2C_CLCD_SendByte2(1, 0b00111);
 80019ae:	2107      	movs	r1, #7
 80019b0:	2001      	movs	r0, #1
 80019b2:	f7ff fee9 	bl	8001788 <I2C_CLCD_SendByte2>
   I2C_CLCD_SendByte2(1, 0b01111);
 80019b6:	210f      	movs	r1, #15
 80019b8:	2001      	movs	r0, #1
 80019ba:	f7ff fee5 	bl	8001788 <I2C_CLCD_SendByte2>
   I2C_CLCD_SendByte2(1, 0b11111);
 80019be:	211f      	movs	r1, #31
 80019c0:	2001      	movs	r0, #1
 80019c2:	f7ff fee1 	bl	8001788 <I2C_CLCD_SendByte2>

   I2C_CLCD_SendByte2(1, 0b00000);   // PutC(1)
 80019c6:	2100      	movs	r1, #0
 80019c8:	2001      	movs	r0, #1
 80019ca:	f7ff fedd 	bl	8001788 <I2C_CLCD_SendByte2>
   I2C_CLCD_SendByte2(1, 0b00000);
 80019ce:	2100      	movs	r1, #0
 80019d0:	2001      	movs	r0, #1
 80019d2:	f7ff fed9 	bl	8001788 <I2C_CLCD_SendByte2>
   I2C_CLCD_SendByte2(1, 0b00000);
 80019d6:	2100      	movs	r1, #0
 80019d8:	2001      	movs	r0, #1
 80019da:	f7ff fed5 	bl	8001788 <I2C_CLCD_SendByte2>
   I2C_CLCD_SendByte2(1, 0b00000);
 80019de:	2100      	movs	r1, #0
 80019e0:	2001      	movs	r0, #1
 80019e2:	f7ff fed1 	bl	8001788 <I2C_CLCD_SendByte2>
   I2C_CLCD_SendByte2(1, 0b00000);
 80019e6:	2100      	movs	r1, #0
 80019e8:	2001      	movs	r0, #1
 80019ea:	f7ff fecd 	bl	8001788 <I2C_CLCD_SendByte2>
   I2C_CLCD_SendByte2(1, 0b00000);
 80019ee:	2100      	movs	r1, #0
 80019f0:	2001      	movs	r0, #1
 80019f2:	f7ff fec9 	bl	8001788 <I2C_CLCD_SendByte2>
   I2C_CLCD_SendByte2(1, 0b00000);
 80019f6:	2100      	movs	r1, #0
 80019f8:	2001      	movs	r0, #1
 80019fa:	f7ff fec5 	bl	8001788 <I2C_CLCD_SendByte2>
   I2C_CLCD_SendByte2(1, 0b11111);
 80019fe:	211f      	movs	r1, #31
 8001a00:	2001      	movs	r0, #1
 8001a02:	f7ff fec1 	bl	8001788 <I2C_CLCD_SendByte2>

   I2C_CLCD_SendByte2(1, 0b11111);   // PutC(2)
 8001a06:	211f      	movs	r1, #31
 8001a08:	2001      	movs	r0, #1
 8001a0a:	f7ff febd 	bl	8001788 <I2C_CLCD_SendByte2>
   I2C_CLCD_SendByte2(1, 0b01111);
 8001a0e:	210f      	movs	r1, #15
 8001a10:	2001      	movs	r0, #1
 8001a12:	f7ff feb9 	bl	8001788 <I2C_CLCD_SendByte2>
   I2C_CLCD_SendByte2(1, 0b00111);
 8001a16:	2107      	movs	r1, #7
 8001a18:	2001      	movs	r0, #1
 8001a1a:	f7ff feb5 	bl	8001788 <I2C_CLCD_SendByte2>
   I2C_CLCD_SendByte2(1, 0b00011);
 8001a1e:	2103      	movs	r1, #3
 8001a20:	2001      	movs	r0, #1
 8001a22:	f7ff feb1 	bl	8001788 <I2C_CLCD_SendByte2>
   I2C_CLCD_SendByte2(1, 0b00001);
 8001a26:	2101      	movs	r1, #1
 8001a28:	2001      	movs	r0, #1
 8001a2a:	f7ff fead 	bl	8001788 <I2C_CLCD_SendByte2>
   I2C_CLCD_SendByte2(1, 0b00000);
 8001a2e:	2100      	movs	r1, #0
 8001a30:	2001      	movs	r0, #1
 8001a32:	f7ff fea9 	bl	8001788 <I2C_CLCD_SendByte2>
   I2C_CLCD_SendByte2(1, 0b00000);
 8001a36:	2100      	movs	r1, #0
 8001a38:	2001      	movs	r0, #1
 8001a3a:	f7ff fea5 	bl	8001788 <I2C_CLCD_SendByte2>
   I2C_CLCD_SendByte2(1, 0b00000);
 8001a3e:	2100      	movs	r1, #0
 8001a40:	2001      	movs	r0, #1
 8001a42:	f7ff fea1 	bl	8001788 <I2C_CLCD_SendByte2>

   I2C_CLCD_SendByte2(1, 0b11111);   // PutC(3)
 8001a46:	211f      	movs	r1, #31
 8001a48:	2001      	movs	r0, #1
 8001a4a:	f7ff fe9d 	bl	8001788 <I2C_CLCD_SendByte2>
   I2C_CLCD_SendByte2(1, 0b00000);
 8001a4e:	2100      	movs	r1, #0
 8001a50:	2001      	movs	r0, #1
 8001a52:	f7ff fe99 	bl	8001788 <I2C_CLCD_SendByte2>
   I2C_CLCD_SendByte2(1, 0b00000);
 8001a56:	2100      	movs	r1, #0
 8001a58:	2001      	movs	r0, #1
 8001a5a:	f7ff fe95 	bl	8001788 <I2C_CLCD_SendByte2>
   I2C_CLCD_SendByte2(1, 0b00000);
 8001a5e:	2100      	movs	r1, #0
 8001a60:	2001      	movs	r0, #1
 8001a62:	f7ff fe91 	bl	8001788 <I2C_CLCD_SendByte2>
   I2C_CLCD_SendByte2(1, 0b00000);
 8001a66:	2100      	movs	r1, #0
 8001a68:	2001      	movs	r0, #1
 8001a6a:	f7ff fe8d 	bl	8001788 <I2C_CLCD_SendByte2>
   I2C_CLCD_SendByte2(1, 0b00000);
 8001a6e:	2100      	movs	r1, #0
 8001a70:	2001      	movs	r0, #1
 8001a72:	f7ff fe89 	bl	8001788 <I2C_CLCD_SendByte2>
   I2C_CLCD_SendByte2(1, 0b00000);
 8001a76:	2100      	movs	r1, #0
 8001a78:	2001      	movs	r0, #1
 8001a7a:	f7ff fe85 	bl	8001788 <I2C_CLCD_SendByte2>
   I2C_CLCD_SendByte2(1, 0b00000);
 8001a7e:	2100      	movs	r1, #0
 8001a80:	2001      	movs	r0, #1
 8001a82:	f7ff fe81 	bl	8001788 <I2C_CLCD_SendByte2>

   I2C_CLCD_SendByte2(1, 0b00000);   // PutC(4)
 8001a86:	2100      	movs	r1, #0
 8001a88:	2001      	movs	r0, #1
 8001a8a:	f7ff fe7d 	bl	8001788 <I2C_CLCD_SendByte2>
   I2C_CLCD_SendByte2(1, 0b00000);
 8001a8e:	2100      	movs	r1, #0
 8001a90:	2001      	movs	r0, #1
 8001a92:	f7ff fe79 	bl	8001788 <I2C_CLCD_SendByte2>
   I2C_CLCD_SendByte2(1, 0b00000);
 8001a96:	2100      	movs	r1, #0
 8001a98:	2001      	movs	r0, #1
 8001a9a:	f7ff fe75 	bl	8001788 <I2C_CLCD_SendByte2>
   I2C_CLCD_SendByte2(1, 0b10000);
 8001a9e:	2110      	movs	r1, #16
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	f7ff fe71 	bl	8001788 <I2C_CLCD_SendByte2>
   I2C_CLCD_SendByte2(1, 0b11000);
 8001aa6:	2118      	movs	r1, #24
 8001aa8:	2001      	movs	r0, #1
 8001aaa:	f7ff fe6d 	bl	8001788 <I2C_CLCD_SendByte2>
   I2C_CLCD_SendByte2(1, 0b11100);
 8001aae:	211c      	movs	r1, #28
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	f7ff fe69 	bl	8001788 <I2C_CLCD_SendByte2>
   I2C_CLCD_SendByte2(1, 0b11110);
 8001ab6:	211e      	movs	r1, #30
 8001ab8:	2001      	movs	r0, #1
 8001aba:	f7ff fe65 	bl	8001788 <I2C_CLCD_SendByte2>
   I2C_CLCD_SendByte2(1, 0b11111);
 8001abe:	211f      	movs	r1, #31
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	f7ff fe61 	bl	8001788 <I2C_CLCD_SendByte2>

   I2C_CLCD_SendByte2(1, 0b11111);   // PutC(5)
 8001ac6:	211f      	movs	r1, #31
 8001ac8:	2001      	movs	r0, #1
 8001aca:	f7ff fe5d 	bl	8001788 <I2C_CLCD_SendByte2>
   I2C_CLCD_SendByte2(1, 0b11110);
 8001ace:	211e      	movs	r1, #30
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	f7ff fe59 	bl	8001788 <I2C_CLCD_SendByte2>
   I2C_CLCD_SendByte2(1, 0b11100);
 8001ad6:	211c      	movs	r1, #28
 8001ad8:	2001      	movs	r0, #1
 8001ada:	f7ff fe55 	bl	8001788 <I2C_CLCD_SendByte2>
   I2C_CLCD_SendByte2(1, 0b11000);
 8001ade:	2118      	movs	r1, #24
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	f7ff fe51 	bl	8001788 <I2C_CLCD_SendByte2>
   I2C_CLCD_SendByte2(1, 0b10000);
 8001ae6:	2110      	movs	r1, #16
 8001ae8:	2001      	movs	r0, #1
 8001aea:	f7ff fe4d 	bl	8001788 <I2C_CLCD_SendByte2>
   I2C_CLCD_SendByte2(1, 0b00000);
 8001aee:	2100      	movs	r1, #0
 8001af0:	2001      	movs	r0, #1
 8001af2:	f7ff fe49 	bl	8001788 <I2C_CLCD_SendByte2>
   I2C_CLCD_SendByte2(1, 0b00000);
 8001af6:	2100      	movs	r1, #0
 8001af8:	2001      	movs	r0, #1
 8001afa:	f7ff fe45 	bl	8001788 <I2C_CLCD_SendByte2>
   I2C_CLCD_SendByte2(1, 0b00000);
 8001afe:	2100      	movs	r1, #0
 8001b00:	2001      	movs	r0, #1
 8001b02:	f7ff fe41 	bl	8001788 <I2C_CLCD_SendByte2>
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <initMotor>:
#include "Motor.h"
#include <stdio.h>
STATUS_t state;
TIM_HandleTypeDef *myHtim;

void initMotor(TIM_HandleTypeDef *inHtim){
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
	myHtim = inHtim;
 8001b14:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <initMotor+0x1c>)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6013      	str	r3, [r2, #0]
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	2000009c 	.word	0x2000009c

08001b2c <goForward>:

//Motor
void goForward(uint8_t percent) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, esc_A_Pin, 1);
 8001b36:	2201      	movs	r2, #1
 8001b38:	2101      	movs	r1, #1
 8001b3a:	480c      	ldr	r0, [pc, #48]	; (8001b6c <goForward+0x40>)
 8001b3c:	f001 fdfe 	bl	800373c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, esc_B_Pin, 0);
 8001b40:	2200      	movs	r2, #0
 8001b42:	2102      	movs	r1, #2
 8001b44:	4809      	ldr	r0, [pc, #36]	; (8001b6c <goForward+0x40>)
 8001b46:	f001 fdf9 	bl	800373c <HAL_GPIO_WritePin>
	myHtim->Instance->CCR1 = (percent*10)-1;
 8001b4a:	79fa      	ldrb	r2, [r7, #7]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	1e5a      	subs	r2, r3, #1
 8001b56:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <goForward+0x44>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	635a      	str	r2, [r3, #52]	; 0x34
	state = FORWARD;
 8001b5e:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <goForward+0x48>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	701a      	strb	r2, [r3, #0]
}
 8001b64:	bf00      	nop
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40020800 	.word	0x40020800
 8001b70:	2000009c 	.word	0x2000009c
 8001b74:	20000098 	.word	0x20000098

08001b78 <goBackward>:
void goBackward(uint8_t percent) {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, esc_A_Pin, 0);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2101      	movs	r1, #1
 8001b86:	480c      	ldr	r0, [pc, #48]	; (8001bb8 <goBackward+0x40>)
 8001b88:	f001 fdd8 	bl	800373c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, esc_B_Pin, 1);
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	2102      	movs	r1, #2
 8001b90:	4809      	ldr	r0, [pc, #36]	; (8001bb8 <goBackward+0x40>)
 8001b92:	f001 fdd3 	bl	800373c <HAL_GPIO_WritePin>
	myHtim->Instance->CCR1 = (percent*10)-1;
 8001b96:	79fa      	ldrb	r2, [r7, #7]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	1e5a      	subs	r2, r3, #1
 8001ba2:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <goBackward+0x44>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	635a      	str	r2, [r3, #52]	; 0x34
	state = BACKWARD;
 8001baa:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <goBackward+0x48>)
 8001bac:	2202      	movs	r2, #2
 8001bae:	701a      	strb	r2, [r3, #0]
}
 8001bb0:	bf00      	nop
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40020800 	.word	0x40020800
 8001bbc:	2000009c 	.word	0x2000009c
 8001bc0:	20000098 	.word	0x20000098

08001bc4 <stopMove>:

void stopMove() {
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, esc_A_Pin, 0);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	2101      	movs	r1, #1
 8001bcc:	4808      	ldr	r0, [pc, #32]	; (8001bf0 <stopMove+0x2c>)
 8001bce:	f001 fdb5 	bl	800373c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, esc_B_Pin, 0);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2102      	movs	r1, #2
 8001bd6:	4806      	ldr	r0, [pc, #24]	; (8001bf0 <stopMove+0x2c>)
 8001bd8:	f001 fdb0 	bl	800373c <HAL_GPIO_WritePin>
	myHtim->Instance->CCR1 = 0;
 8001bdc:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <stopMove+0x30>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2200      	movs	r2, #0
 8001be4:	635a      	str	r2, [r3, #52]	; 0x34
	state = NONE;
 8001be6:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <stopMove+0x34>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	701a      	strb	r2, [r3, #0]
}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40020800 	.word	0x40020800
 8001bf4:	2000009c 	.word	0x2000009c
 8001bf8:	20000098 	.word	0x20000098

08001bfc <initRTC>:
#include "RTC.h"

I2C_HandleTypeDef *myHi2c1;
DateTime_t dateTime;

void initRTC(UART_HandleTypeDef *inHi2c1) {
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
	myHi2c1 = inHi2c1;
 8001c04:	4a04      	ldr	r2, [pc, #16]	; (8001c18 <initRTC+0x1c>)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6013      	str	r3, [r2, #0]
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	200000a0 	.word	0x200000a0

08001c1c <BCD2Decimal>:
uint8_t BCD2Decimal(uint8_t inData) {
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	71fb      	strb	r3, [r7, #7]
	uint8_t upper = inData >> 4;
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	091b      	lsrs	r3, r3, #4
 8001c2a:	73fb      	strb	r3, [r7, #15]
	uint8_t lower = inData & 0x0f;
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	73bb      	strb	r3, [r7, #14]
	return upper * 10 + lower;
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
 8001c36:	461a      	mov	r2, r3
 8001c38:	0092      	lsls	r2, r2, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	7bbb      	ldrb	r3, [r7, #14]
 8001c42:	4413      	add	r3, r2
 8001c44:	b2db      	uxtb	r3, r3
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <Decimal2BCD>:

uint8_t Decimal2BCD(uint8_t inData) {
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
	uint8_t upper = inData / 10;
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	4a0e      	ldr	r2, [pc, #56]	; (8001c9c <Decimal2BCD+0x48>)
 8001c62:	fba2 2303 	umull	r2, r3, r2, r3
 8001c66:	08db      	lsrs	r3, r3, #3
 8001c68:	73fb      	strb	r3, [r7, #15]
	uint8_t lower = inData % 10;
 8001c6a:	79fa      	ldrb	r2, [r7, #7]
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <Decimal2BCD+0x48>)
 8001c6e:	fba3 1302 	umull	r1, r3, r3, r2
 8001c72:	08d9      	lsrs	r1, r3, #3
 8001c74:	460b      	mov	r3, r1
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	440b      	add	r3, r1
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	73bb      	strb	r3, [r7, #14]
	return upper << 4 | lower;
 8001c80:	7bfb      	ldrb	r3, [r7, #15]
 8001c82:	011b      	lsls	r3, r3, #4
 8001c84:	b25a      	sxtb	r2, r3
 8001c86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	b25b      	sxtb	r3, r3
 8001c8e:	b2db      	uxtb	r3, r3
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	cccccccd 	.word	0xcccccccd

08001ca0 <setRTC>:

void setRTC(DateTime_t inData) {
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af02      	add	r7, sp, #8
 8001ca6:	463b      	mov	r3, r7
 8001ca8:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t txBuffer[8];
	txBuffer[7] = Decimal2BCD(inData.year);
 8001cac:	783b      	ldrb	r3, [r7, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff ffd0 	bl	8001c54 <Decimal2BCD>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	73fb      	strb	r3, [r7, #15]
	txBuffer[6] = Decimal2BCD(inData.month);
 8001cb8:	787b      	ldrb	r3, [r7, #1]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff ffca 	bl	8001c54 <Decimal2BCD>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	73bb      	strb	r3, [r7, #14]
	txBuffer[5] = Decimal2BCD(inData.date);
 8001cc4:	78bb      	ldrb	r3, [r7, #2]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff ffc4 	bl	8001c54 <Decimal2BCD>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	737b      	strb	r3, [r7, #13]
	txBuffer[3] = Decimal2BCD(inData.hour);
 8001cd0:	793b      	ldrb	r3, [r7, #4]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff ffbe 	bl	8001c54 <Decimal2BCD>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	72fb      	strb	r3, [r7, #11]
	txBuffer[2] = Decimal2BCD(inData.min);
 8001cdc:	797b      	ldrb	r3, [r7, #5]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff ffb8 	bl	8001c54 <Decimal2BCD>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	72bb      	strb	r3, [r7, #10]
	txBuffer[1] = Decimal2BCD(inData.sec);
 8001ce8:	79bb      	ldrb	r3, [r7, #6]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff ffb2 	bl	8001c54 <Decimal2BCD>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	727b      	strb	r3, [r7, #9]
	txBuffer[0] = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(myHi2c1, RTC_ADD, txBuffer, sizeof(txBuffer), 10);
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <setRTC+0x74>)
 8001cfa:	6818      	ldr	r0, [r3, #0]
 8001cfc:	f107 0208 	add.w	r2, r7, #8
 8001d00:	230a      	movs	r3, #10
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	2308      	movs	r3, #8
 8001d06:	21d0      	movs	r1, #208	; 0xd0
 8001d08:	f001 fe76 	bl	80039f8 <HAL_I2C_Master_Transmit>
}
 8001d0c:	bf00      	nop
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	200000a0 	.word	0x200000a0

08001d18 <getRTC>:

DateTime_t getRTC() {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08a      	sub	sp, #40	; 0x28
 8001d1c:	af02      	add	r7, sp, #8
 8001d1e:	6078      	str	r0, [r7, #4]
	DateTime_t result;
	uint8_t rxBuffer[7];
	uint8_t address = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(myHi2c1, RTC_ADD, &address, 1, 10);
 8001d24:	4b25      	ldr	r3, [pc, #148]	; (8001dbc <getRTC+0xa4>)
 8001d26:	6818      	ldr	r0, [r3, #0]
 8001d28:	f107 020f 	add.w	r2, r7, #15
 8001d2c:	230a      	movs	r3, #10
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	2301      	movs	r3, #1
 8001d32:	21d0      	movs	r1, #208	; 0xd0
 8001d34:	f001 fe60 	bl	80039f8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(myHi2c1, RTC_ADD | READ, rxBuffer, 7, 10);
 8001d38:	4b20      	ldr	r3, [pc, #128]	; (8001dbc <getRTC+0xa4>)
 8001d3a:	6818      	ldr	r0, [r3, #0]
 8001d3c:	f107 0210 	add.w	r2, r7, #16
 8001d40:	230a      	movs	r3, #10
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	2307      	movs	r3, #7
 8001d46:	21d1      	movs	r1, #209	; 0xd1
 8001d48:	f001 ff54 	bl	8003bf4 <HAL_I2C_Master_Receive>
	result.year = BCD2Decimal(rxBuffer[6]);
 8001d4c:	7dbb      	ldrb	r3, [r7, #22]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff ff64 	bl	8001c1c <BCD2Decimal>
 8001d54:	4603      	mov	r3, r0
 8001d56:	763b      	strb	r3, [r7, #24]
	result.month = BCD2Decimal(rxBuffer[5]);
 8001d58:	7d7b      	ldrb	r3, [r7, #21]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff ff5e 	bl	8001c1c <BCD2Decimal>
 8001d60:	4603      	mov	r3, r0
 8001d62:	767b      	strb	r3, [r7, #25]
	result.date = BCD2Decimal(rxBuffer[4]);
 8001d64:	7d3b      	ldrb	r3, [r7, #20]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff ff58 	bl	8001c1c <BCD2Decimal>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	76bb      	strb	r3, [r7, #26]
	result.day = BCD2Decimal(rxBuffer[3]);
 8001d70:	7cfb      	ldrb	r3, [r7, #19]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff ff52 	bl	8001c1c <BCD2Decimal>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	76fb      	strb	r3, [r7, #27]
	result.hour = BCD2Decimal(rxBuffer[2]);
 8001d7c:	7cbb      	ldrb	r3, [r7, #18]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff ff4c 	bl	8001c1c <BCD2Decimal>
 8001d84:	4603      	mov	r3, r0
 8001d86:	773b      	strb	r3, [r7, #28]
	result.min = BCD2Decimal(rxBuffer[1]);
 8001d88:	7c7b      	ldrb	r3, [r7, #17]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff ff46 	bl	8001c1c <BCD2Decimal>
 8001d90:	4603      	mov	r3, r0
 8001d92:	777b      	strb	r3, [r7, #29]
	result.sec = BCD2Decimal(rxBuffer[0]);
 8001d94:	7c3b      	ldrb	r3, [r7, #16]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff ff40 	bl	8001c1c <BCD2Decimal>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	77bb      	strb	r3, [r7, #30]
	return result;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	461a      	mov	r2, r3
 8001da4:	f107 0318 	add.w	r3, r7, #24
 8001da8:	6818      	ldr	r0, [r3, #0]
 8001daa:	6010      	str	r0, [r2, #0]
 8001dac:	8899      	ldrh	r1, [r3, #4]
 8001dae:	799b      	ldrb	r3, [r3, #6]
 8001db0:	8091      	strh	r1, [r2, #4]
 8001db2:	7193      	strb	r3, [r2, #6]
}
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	3720      	adds	r7, #32
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	200000a0 	.word	0x200000a0

08001dc0 <write4ByteEEPROM>:
	HAL_I2C_Mem_Read(myHi2c1, ROM_ADD, address, 2, &result, 2, 10);
	return result;

}

void write4ByteEEPROM(uint16_t address, uint16_t data) {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af04      	add	r7, sp, #16
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	460a      	mov	r2, r1
 8001dca:	80fb      	strh	r3, [r7, #6]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(myHi2c1, ROM_ADD, address, 2, &data, 4, 10);
 8001dd0:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <write4ByteEEPROM+0x38>)
 8001dd2:	6818      	ldr	r0, [r3, #0]
 8001dd4:	88fa      	ldrh	r2, [r7, #6]
 8001dd6:	230a      	movs	r3, #10
 8001dd8:	9302      	str	r3, [sp, #8]
 8001dda:	2304      	movs	r3, #4
 8001ddc:	9301      	str	r3, [sp, #4]
 8001dde:	1d3b      	adds	r3, r7, #4
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	2302      	movs	r3, #2
 8001de4:	21a0      	movs	r1, #160	; 0xa0
 8001de6:	f002 f937 	bl	8004058 <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 8001dea:	2014      	movs	r0, #20
 8001dec:	f001 f942 	bl	8003074 <HAL_Delay>
}
 8001df0:	bf00      	nop
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	200000a0 	.word	0x200000a0

08001dfc <read4ByteEEPROM>:

uint32_t read4ByteEEPROM(uint16_t address) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b088      	sub	sp, #32
 8001e00:	af04      	add	r7, sp, #16
 8001e02:	4603      	mov	r3, r0
 8001e04:	80fb      	strh	r3, [r7, #6]
	uint32_t result;
	HAL_I2C_Mem_Read(myHi2c1, ROM_ADD, address, 2, &result, 4, 10);
 8001e06:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <read4ByteEEPROM+0x30>)
 8001e08:	6818      	ldr	r0, [r3, #0]
 8001e0a:	88fa      	ldrh	r2, [r7, #6]
 8001e0c:	230a      	movs	r3, #10
 8001e0e:	9302      	str	r3, [sp, #8]
 8001e10:	2304      	movs	r3, #4
 8001e12:	9301      	str	r3, [sp, #4]
 8001e14:	f107 030c 	add.w	r3, r7, #12
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	21a0      	movs	r1, #160	; 0xa0
 8001e1e:	f002 fa15 	bl	800424c <HAL_I2C_Mem_Read>
	return result;
 8001e22:	68fb      	ldr	r3, [r7, #12]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	200000a0 	.word	0x200000a0

08001e30 <timeinit>:

void timeinit() {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
	if (MagicNumber != read4ByteEEPROM(eeMagicNumberBase)) {
 8001e34:	2000      	movs	r0, #0
 8001e36:	f7ff ffe1 	bl	8001dfc <read4ByteEEPROM>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	4a10      	ldr	r2, [pc, #64]	; (8001e80 <timeinit+0x50>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d01b      	beq.n	8001e7a <timeinit+0x4a>
		//초기 ?��?��
		dateTime.year = 24;
 8001e42:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <timeinit+0x54>)
 8001e44:	2218      	movs	r2, #24
 8001e46:	701a      	strb	r2, [r3, #0]
		dateTime.month = 3;
 8001e48:	4b0e      	ldr	r3, [pc, #56]	; (8001e84 <timeinit+0x54>)
 8001e4a:	2203      	movs	r2, #3
 8001e4c:	705a      	strb	r2, [r3, #1]
		dateTime.date = 29;
 8001e4e:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <timeinit+0x54>)
 8001e50:	221d      	movs	r2, #29
 8001e52:	709a      	strb	r2, [r3, #2]
		dateTime.hour = 14;
 8001e54:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <timeinit+0x54>)
 8001e56:	220e      	movs	r2, #14
 8001e58:	711a      	strb	r2, [r3, #4]
		dateTime.min = 29;
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <timeinit+0x54>)
 8001e5c:	221d      	movs	r2, #29
 8001e5e:	715a      	strb	r2, [r3, #5]
		dateTime.sec = 0;
 8001e60:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <timeinit+0x54>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	719a      	strb	r2, [r3, #6]
		setRTC(dateTime);
 8001e66:	4b07      	ldr	r3, [pc, #28]	; (8001e84 <timeinit+0x54>)
 8001e68:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e6c:	f7ff ff18 	bl	8001ca0 <setRTC>
		//매직?���?? 기록
		write4ByteEEPROM(eeMagicNumberBase, MagicNumber);
 8001e70:	f64a 5114 	movw	r1, #44308	; 0xad14
 8001e74:	2000      	movs	r0, #0
 8001e76:	f7ff ffa3 	bl	8001dc0 <write4ByteEEPROM>
	}
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	257fad14 	.word	0x257fad14
 8001e84:	200000a4 	.word	0x200000a4

08001e88 <timeLCDprint>:

void timeLCDprint() {
 8001e88:	b5b0      	push	{r4, r5, r7, lr}
 8001e8a:	b0a0      	sub	sp, #128	; 0x80
 8001e8c:	af04      	add	r7, sp, #16
	dateTime = getRTC();
 8001e8e:	4c1b      	ldr	r4, [pc, #108]	; (8001efc <timeLCDprint+0x74>)
 8001e90:	463b      	mov	r3, r7
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff ff40 	bl	8001d18 <getRTC>
 8001e98:	4622      	mov	r2, r4
 8001e9a:	463b      	mov	r3, r7
 8001e9c:	6818      	ldr	r0, [r3, #0]
 8001e9e:	6010      	str	r0, [r2, #0]
 8001ea0:	8899      	ldrh	r1, [r3, #4]
 8001ea2:	799b      	ldrb	r3, [r3, #6]
 8001ea4:	8091      	strh	r1, [r2, #4]
 8001ea6:	7193      	strb	r3, [r2, #6]

	char STR1[100];
	sprintf(STR1, "20%02d-%02d-%02d %02d:%02d\n", dateTime.year, dateTime.month,
 8001ea8:	4b14      	ldr	r3, [pc, #80]	; (8001efc <timeLCDprint+0x74>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	461c      	mov	r4, r3
 8001eae:	4b13      	ldr	r3, [pc, #76]	; (8001efc <timeLCDprint+0x74>)
 8001eb0:	785b      	ldrb	r3, [r3, #1]
 8001eb2:	461d      	mov	r5, r3
			dateTime.date, dateTime.hour, dateTime.min);
 8001eb4:	4b11      	ldr	r3, [pc, #68]	; (8001efc <timeLCDprint+0x74>)
 8001eb6:	789b      	ldrb	r3, [r3, #2]
	sprintf(STR1, "20%02d-%02d-%02d %02d:%02d\n", dateTime.year, dateTime.month,
 8001eb8:	461a      	mov	r2, r3
			dateTime.date, dateTime.hour, dateTime.min);
 8001eba:	4b10      	ldr	r3, [pc, #64]	; (8001efc <timeLCDprint+0x74>)
 8001ebc:	791b      	ldrb	r3, [r3, #4]
	sprintf(STR1, "20%02d-%02d-%02d %02d:%02d\n", dateTime.year, dateTime.month,
 8001ebe:	4619      	mov	r1, r3
			dateTime.date, dateTime.hour, dateTime.min);
 8001ec0:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <timeLCDprint+0x74>)
 8001ec2:	795b      	ldrb	r3, [r3, #5]
	sprintf(STR1, "20%02d-%02d-%02d %02d:%02d\n", dateTime.year, dateTime.month,
 8001ec4:	f107 000c 	add.w	r0, r7, #12
 8001ec8:	9302      	str	r3, [sp, #8]
 8001eca:	9101      	str	r1, [sp, #4]
 8001ecc:	9200      	str	r2, [sp, #0]
 8001ece:	462b      	mov	r3, r5
 8001ed0:	4622      	mov	r2, r4
 8001ed2:	490b      	ldr	r1, [pc, #44]	; (8001f00 <timeLCDprint+0x78>)
 8001ed4:	f006 f9f8 	bl	80082c8 <siprintf>

	I2C_CLCD_GotoXY(0, 0);
 8001ed8:	2100      	movs	r1, #0
 8001eda:	2000      	movs	r0, #0
 8001edc:	f7ff fc02 	bl	80016e4 <I2C_CLCD_GotoXY>
	I2C_CLCD_PutStr(STR1);
 8001ee0:	f107 030c 	add.w	r3, r7, #12
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff fc39 	bl	800175c <I2C_CLCD_PutStr>

	I2C_CLCD_GotoXY(1, 0);
 8001eea:	2100      	movs	r1, #0
 8001eec:	2001      	movs	r0, #1
 8001eee:	f7ff fbf9 	bl	80016e4 <I2C_CLCD_GotoXY>
}
 8001ef2:	bf00      	nop
 8001ef4:	3770      	adds	r7, #112	; 0x70
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bdb0      	pop	{r4, r5, r7, pc}
 8001efa:	bf00      	nop
 8001efc:	200000a4 	.word	0x200000a4
 8001f00:	080094d4 	.word	0x080094d4

08001f04 <initUltraSonic>:
uint8_t IsFirstCapture1 = 0;
uint8_t IsFirstCapture3 = 0;
uint32_t Distance1 = 0;
uint32_t Distance3 = 0;

void initUltraSonic(TIM_HandleTypeDef *inHtim1, TIM_HandleTypeDef *inHtim11) {
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
	myHtim1 = inHtim1;
 8001f0e:	4a06      	ldr	r2, [pc, #24]	; (8001f28 <initUltraSonic+0x24>)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6013      	str	r3, [r2, #0]
	myHtim11 = inHtim11;
 8001f14:	4a05      	ldr	r2, [pc, #20]	; (8001f2c <initUltraSonic+0x28>)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	6013      	str	r3, [r2, #0]
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	200000ac 	.word	0x200000ac
 8001f2c:	200000b0 	.word	0x200000b0

08001f30 <delayUs>:
void delayUs(uint16_t time) {
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	80fb      	strh	r3, [r7, #6]
	myHtim11->Instance->CNT = 0;
 8001f3a:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <delayUs+0x34>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2200      	movs	r2, #0
 8001f42:	625a      	str	r2, [r3, #36]	; 0x24
	while (myHtim11->Instance->CNT < time);
 8001f44:	bf00      	nop
 8001f46:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <delayUs+0x34>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f4e:	88fb      	ldrh	r3, [r7, #6]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d3f8      	bcc.n	8001f46 <delayUs+0x16>
}
 8001f54:	bf00      	nop
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	200000b0 	.word	0x200000b0

08001f68 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	7f1b      	ldrb	r3, [r3, #28]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	f040 8082 	bne.w	800207e <HAL_TIM_IC_CaptureCallback+0x116>
		if (IsFirstCapture1 == 0) {
 8001f7a:	4b89      	ldr	r3, [pc, #548]	; (80021a0 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d11a      	bne.n	8001fb8 <HAL_TIM_IC_CaptureCallback+0x50>
			IC_Val1_Channel1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001f82:	2100      	movs	r1, #0
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f004 fb2d 	bl	80065e4 <HAL_TIM_ReadCapturedValue>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	4a85      	ldr	r2, [pc, #532]	; (80021a4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001f8e:	6013      	str	r3, [r2, #0]
			IsFirstCapture1 = 1;
 8001f90:	4b83      	ldr	r3, [pc, #524]	; (80021a0 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6a1a      	ldr	r2, [r3, #32]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 020a 	bic.w	r2, r2, #10
 8001fa4:	621a      	str	r2, [r3, #32]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6a1a      	ldr	r2, [r3, #32]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f042 0202 	orr.w	r2, r2, #2
 8001fb4:	621a      	str	r2, [r3, #32]
 8001fb6:	e062      	b.n	800207e <HAL_TIM_IC_CaptureCallback+0x116>
					TIM_INPUTCHANNELPOLARITY_FALLING);
		} else if (IsFirstCapture1 == 1) {
 8001fb8:	4b79      	ldr	r3, [pc, #484]	; (80021a0 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d15e      	bne.n	800207e <HAL_TIM_IC_CaptureCallback+0x116>
			IC_Val2_Channel1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f004 fb0e 	bl	80065e4 <HAL_TIM_ReadCapturedValue>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	4a77      	ldr	r2, [pc, #476]	; (80021a8 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001fcc:	6013      	str	r3, [r2, #0]
			htim->Instance->CNT = 0;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2_Channel1 > IC_Val1_Channel1)
 8001fd6:	4b74      	ldr	r3, [pc, #464]	; (80021a8 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	4b72      	ldr	r3, [pc, #456]	; (80021a4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d907      	bls.n	8001ff2 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference1 = IC_Val2_Channel1 - IC_Val1_Channel1;
 8001fe2:	4b71      	ldr	r3, [pc, #452]	; (80021a8 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	4b6f      	ldr	r3, [pc, #444]	; (80021a4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	4a6f      	ldr	r2, [pc, #444]	; (80021ac <HAL_TIM_IC_CaptureCallback+0x244>)
 8001fee:	6013      	str	r3, [r2, #0]
 8001ff0:	e00f      	b.n	8002012 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1_Channel1 > IC_Val2_Channel1)
 8001ff2:	4b6c      	ldr	r3, [pc, #432]	; (80021a4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	4b6c      	ldr	r3, [pc, #432]	; (80021a8 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d909      	bls.n	8002012 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference1 = (0xffff - IC_Val1_Channel1) + IC_Val2_Channel1;
 8001ffe:	4b6a      	ldr	r3, [pc, #424]	; (80021a8 <HAL_TIM_IC_CaptureCallback+0x240>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	4b68      	ldr	r3, [pc, #416]	; (80021a4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800200c:	33ff      	adds	r3, #255	; 0xff
 800200e:	4a67      	ldr	r2, [pc, #412]	; (80021ac <HAL_TIM_IC_CaptureCallback+0x244>)
 8002010:	6013      	str	r3, [r2, #0]
			Distance1 = Difference1 * 0.034 / 2;
 8002012:	4b66      	ldr	r3, [pc, #408]	; (80021ac <HAL_TIM_IC_CaptureCallback+0x244>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe fa74 	bl	8000504 <__aeabi_ui2d>
 800201c:	a35e      	add	r3, pc, #376	; (adr r3, 8002198 <HAL_TIM_IC_CaptureCallback+0x230>)
 800201e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002022:	f7fe fae9 	bl	80005f8 <__aeabi_dmul>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	4610      	mov	r0, r2
 800202c:	4619      	mov	r1, r3
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002036:	f7fe fc09 	bl	800084c <__aeabi_ddiv>
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	4610      	mov	r0, r2
 8002040:	4619      	mov	r1, r3
 8002042:	f7fe fceb 	bl	8000a1c <__aeabi_d2uiz>
 8002046:	4603      	mov	r3, r0
 8002048:	4a59      	ldr	r2, [pc, #356]	; (80021b0 <HAL_TIM_IC_CaptureCallback+0x248>)
 800204a:	6013      	str	r3, [r2, #0]
			IsFirstCapture1 = 0;
 800204c:	4b54      	ldr	r3, [pc, #336]	; (80021a0 <HAL_TIM_IC_CaptureCallback+0x238>)
 800204e:	2200      	movs	r2, #0
 8002050:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6a1a      	ldr	r2, [r3, #32]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 020a 	bic.w	r2, r2, #10
 8002060:	621a      	str	r2, [r3, #32]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6a12      	ldr	r2, [r2, #32]
 800206c:	621a      	str	r2, [r3, #32]
					TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68da      	ldr	r2, [r3, #12]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0202 	bic.w	r2, r2, #2
 800207c:	60da      	str	r2, [r3, #12]
		}
	}
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	7f1b      	ldrb	r3, [r3, #28]
 8002082:	2b04      	cmp	r3, #4
 8002084:	f040 8082 	bne.w	800218c <HAL_TIM_IC_CaptureCallback+0x224>
		if (IsFirstCapture3 == 0) {
 8002088:	4b4a      	ldr	r3, [pc, #296]	; (80021b4 <HAL_TIM_IC_CaptureCallback+0x24c>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d11a      	bne.n	80020c6 <HAL_TIM_IC_CaptureCallback+0x15e>
			IC_Val1_Channel3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8002090:	2108      	movs	r1, #8
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f004 faa6 	bl	80065e4 <HAL_TIM_ReadCapturedValue>
 8002098:	4603      	mov	r3, r0
 800209a:	4a47      	ldr	r2, [pc, #284]	; (80021b8 <HAL_TIM_IC_CaptureCallback+0x250>)
 800209c:	6013      	str	r3, [r2, #0]
			IsFirstCapture3 = 1;
 800209e:	4b45      	ldr	r3, [pc, #276]	; (80021b4 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3,
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6a1a      	ldr	r2, [r3, #32]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 80020b2:	621a      	str	r2, [r3, #32]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6a1a      	ldr	r2, [r3, #32]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020c2:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3,
					TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
		}
	}
}
 80020c4:	e062      	b.n	800218c <HAL_TIM_IC_CaptureCallback+0x224>
		} else if (IsFirstCapture3 == 1) {
 80020c6:	4b3b      	ldr	r3, [pc, #236]	; (80021b4 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d15e      	bne.n	800218c <HAL_TIM_IC_CaptureCallback+0x224>
			IC_Val2_Channel3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 80020ce:	2108      	movs	r1, #8
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f004 fa87 	bl	80065e4 <HAL_TIM_ReadCapturedValue>
 80020d6:	4603      	mov	r3, r0
 80020d8:	4a38      	ldr	r2, [pc, #224]	; (80021bc <HAL_TIM_IC_CaptureCallback+0x254>)
 80020da:	6013      	str	r3, [r2, #0]
			htim->Instance->CNT = 0;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2200      	movs	r2, #0
 80020e2:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2_Channel3 > IC_Val1_Channel3)
 80020e4:	4b35      	ldr	r3, [pc, #212]	; (80021bc <HAL_TIM_IC_CaptureCallback+0x254>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	4b33      	ldr	r3, [pc, #204]	; (80021b8 <HAL_TIM_IC_CaptureCallback+0x250>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d907      	bls.n	8002100 <HAL_TIM_IC_CaptureCallback+0x198>
				Difference3 = IC_Val2_Channel3 - IC_Val1_Channel3;
 80020f0:	4b32      	ldr	r3, [pc, #200]	; (80021bc <HAL_TIM_IC_CaptureCallback+0x254>)
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	4b30      	ldr	r3, [pc, #192]	; (80021b8 <HAL_TIM_IC_CaptureCallback+0x250>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	4a31      	ldr	r2, [pc, #196]	; (80021c0 <HAL_TIM_IC_CaptureCallback+0x258>)
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	e00f      	b.n	8002120 <HAL_TIM_IC_CaptureCallback+0x1b8>
			else if (IC_Val1_Channel3 > IC_Val2_Channel3)
 8002100:	4b2d      	ldr	r3, [pc, #180]	; (80021b8 <HAL_TIM_IC_CaptureCallback+0x250>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	4b2d      	ldr	r3, [pc, #180]	; (80021bc <HAL_TIM_IC_CaptureCallback+0x254>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	d909      	bls.n	8002120 <HAL_TIM_IC_CaptureCallback+0x1b8>
				Difference3 = (0xffff - IC_Val1_Channel3) + IC_Val2_Channel3;
 800210c:	4b2b      	ldr	r3, [pc, #172]	; (80021bc <HAL_TIM_IC_CaptureCallback+0x254>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4b29      	ldr	r3, [pc, #164]	; (80021b8 <HAL_TIM_IC_CaptureCallback+0x250>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800211a:	33ff      	adds	r3, #255	; 0xff
 800211c:	4a28      	ldr	r2, [pc, #160]	; (80021c0 <HAL_TIM_IC_CaptureCallback+0x258>)
 800211e:	6013      	str	r3, [r2, #0]
			Distance3 = Difference3 * 0.034 / 2;
 8002120:	4b27      	ldr	r3, [pc, #156]	; (80021c0 <HAL_TIM_IC_CaptureCallback+0x258>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f7fe f9ed 	bl	8000504 <__aeabi_ui2d>
 800212a:	a31b      	add	r3, pc, #108	; (adr r3, 8002198 <HAL_TIM_IC_CaptureCallback+0x230>)
 800212c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002130:	f7fe fa62 	bl	80005f8 <__aeabi_dmul>
 8002134:	4602      	mov	r2, r0
 8002136:	460b      	mov	r3, r1
 8002138:	4610      	mov	r0, r2
 800213a:	4619      	mov	r1, r3
 800213c:	f04f 0200 	mov.w	r2, #0
 8002140:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002144:	f7fe fb82 	bl	800084c <__aeabi_ddiv>
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	4610      	mov	r0, r2
 800214e:	4619      	mov	r1, r3
 8002150:	f7fe fc64 	bl	8000a1c <__aeabi_d2uiz>
 8002154:	4603      	mov	r3, r0
 8002156:	4a1b      	ldr	r2, [pc, #108]	; (80021c4 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8002158:	6013      	str	r3, [r2, #0]
			IsFirstCapture3 = 0;
 800215a:	4b16      	ldr	r3, [pc, #88]	; (80021b4 <HAL_TIM_IC_CaptureCallback+0x24c>)
 800215c:	2200      	movs	r2, #0
 800215e:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6a1a      	ldr	r2, [r3, #32]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 800216e:	621a      	str	r2, [r3, #32]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6a12      	ldr	r2, [r2, #32]
 800217a:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 0208 	bic.w	r2, r2, #8
 800218a:	60da      	str	r2, [r3, #12]
}
 800218c:	bf00      	nop
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	f3af 8000 	nop.w
 8002198:	b020c49c 	.word	0xb020c49c
 800219c:	3fa16872 	.word	0x3fa16872
 80021a0:	200000cc 	.word	0x200000cc
 80021a4:	200000b4 	.word	0x200000b4
 80021a8:	200000b8 	.word	0x200000b8
 80021ac:	200000c4 	.word	0x200000c4
 80021b0:	200000d0 	.word	0x200000d0
 80021b4:	200000cd 	.word	0x200000cd
 80021b8:	200000bc 	.word	0x200000bc
 80021bc:	200000c0 	.word	0x200000c0
 80021c0:	200000c8 	.word	0x200000c8
 80021c4:	200000d4 	.word	0x200000d4

080021c8 <getDistance>:

uint32_t getDistance() {
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
	//trigger
	HAL_GPIO_WritePin(trigger_GPIO_Port, trigger_Pin, 1);
 80021cc:	2201      	movs	r2, #1
 80021ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021d2:	480d      	ldr	r0, [pc, #52]	; (8002208 <getDistance+0x40>)
 80021d4:	f001 fab2 	bl	800373c <HAL_GPIO_WritePin>
	delayUs(10);
 80021d8:	200a      	movs	r0, #10
 80021da:	f7ff fea9 	bl	8001f30 <delayUs>
	HAL_GPIO_WritePin(trigger_GPIO_Port, trigger_Pin, 0);
 80021de:	2200      	movs	r2, #0
 80021e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021e4:	4808      	ldr	r0, [pc, #32]	; (8002208 <getDistance+0x40>)
 80021e6:	f001 faa9 	bl	800373c <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(myHtim1, TIM_IT_CC1);
 80021ea:	4b08      	ldr	r3, [pc, #32]	; (800220c <getDistance+0x44>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68da      	ldr	r2, [r3, #12]
 80021f2:	4b06      	ldr	r3, [pc, #24]	; (800220c <getDistance+0x44>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f042 0202 	orr.w	r2, r2, #2
 80021fc:	60da      	str	r2, [r3, #12]
	return Distance1;
 80021fe:	4b04      	ldr	r3, [pc, #16]	; (8002210 <getDistance+0x48>)
 8002200:	681b      	ldr	r3, [r3, #0]
}
 8002202:	4618      	mov	r0, r3
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40020000 	.word	0x40020000
 800220c:	200000ac 	.word	0x200000ac
 8002210:	200000d0 	.word	0x200000d0

08002214 <getDistance2>:
uint32_t getDistance2() {
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
	//trigger
	HAL_GPIO_WritePin(trigger2_GPIO_Port, trigger2_Pin, 1);
 8002218:	2201      	movs	r2, #1
 800221a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800221e:	480d      	ldr	r0, [pc, #52]	; (8002254 <getDistance2+0x40>)
 8002220:	f001 fa8c 	bl	800373c <HAL_GPIO_WritePin>
	delayUs(10);
 8002224:	200a      	movs	r0, #10
 8002226:	f7ff fe83 	bl	8001f30 <delayUs>
	HAL_GPIO_WritePin(trigger2_GPIO_Port, trigger2_Pin, 0);
 800222a:	2200      	movs	r2, #0
 800222c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002230:	4808      	ldr	r0, [pc, #32]	; (8002254 <getDistance2+0x40>)
 8002232:	f001 fa83 	bl	800373c <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(myHtim1, TIM_IT_CC3);
 8002236:	4b08      	ldr	r3, [pc, #32]	; (8002258 <getDistance2+0x44>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68da      	ldr	r2, [r3, #12]
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <getDistance2+0x44>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f042 0208 	orr.w	r2, r2, #8
 8002248:	60da      	str	r2, [r3, #12]
	return Distance3;
 800224a:	4b04      	ldr	r3, [pc, #16]	; (800225c <getDistance2+0x48>)
 800224c:	681b      	ldr	r3, [r3, #0]
}
 800224e:	4618      	mov	r0, r3
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40020000 	.word	0x40020000
 8002258:	200000ac 	.word	0x200000ac
 800225c:	200000d4 	.word	0x200000d4

08002260 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002264:	f000 fe94 	bl	8002f90 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002268:	f000 f86c 	bl	8002344 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800226c:	f000 fa70 	bl	8002750 <MX_GPIO_Init>
	MX_TIM1_Init();
 8002270:	f000 f92c 	bl	80024cc <MX_TIM1_Init>
	MX_TIM3_Init();
 8002274:	f000 f9a8 	bl	80025c8 <MX_TIM3_Init>
	MX_TIM11_Init();
 8002278:	f000 fa1c 	bl	80026b4 <MX_TIM11_Init>
	MX_USART2_UART_Init();
 800227c:	f000 fa3e 	bl	80026fc <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8002280:	f000 f8c8 	bl	8002414 <MX_I2C1_Init>
	MX_I2C2_Init();
 8002284:	f000 f8f4 	bl	8002470 <MX_I2C2_Init>
	/* USER CODE BEGIN 2 */
	initUart(&huart2);
 8002288:	4827      	ldr	r0, [pc, #156]	; (8002328 <main+0xc8>)
 800228a:	f000 fd9f 	bl	8002dcc <initUart>
	initMotor(&htim3);
 800228e:	4827      	ldr	r0, [pc, #156]	; (800232c <main+0xcc>)
 8002290:	f7ff fc3c 	bl	8001b0c <initMotor>
	initUltraSonic(&htim1, &htim11);
 8002294:	4926      	ldr	r1, [pc, #152]	; (8002330 <main+0xd0>)
 8002296:	4827      	ldr	r0, [pc, #156]	; (8002334 <main+0xd4>)
 8002298:	f7ff fe34 	bl	8001f04 <initUltraSonic>
	initRTC(&hi2c1);
 800229c:	4826      	ldr	r0, [pc, #152]	; (8002338 <main+0xd8>)
 800229e:	f7ff fcad 	bl	8001bfc <initRTC>
	initCLCD(&hi2c1, &hi2c2);
 80022a2:	4926      	ldr	r1, [pc, #152]	; (800233c <main+0xdc>)
 80022a4:	4824      	ldr	r0, [pc, #144]	; (8002338 <main+0xd8>)
 80022a6:	f7ff f94f 	bl	8001548 <initCLCD>
	HAL_TIM_Base_Start(&htim11);
 80022aa:	4821      	ldr	r0, [pc, #132]	; (8002330 <main+0xd0>)
 80022ac:	f003 fbac 	bl	8005a08 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80022b0:	2100      	movs	r1, #0
 80022b2:	4820      	ldr	r0, [pc, #128]	; (8002334 <main+0xd4>)
 80022b4:	f003 fd66 	bl	8005d84 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 80022b8:	2108      	movs	r1, #8
 80022ba:	481e      	ldr	r0, [pc, #120]	; (8002334 <main+0xd4>)
 80022bc:	f003 fd62 	bl	8005d84 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80022c0:	2100      	movs	r1, #0
 80022c2:	481a      	ldr	r0, [pc, #104]	; (800232c <main+0xcc>)
 80022c4:	f003 fc54 	bl	8005b70 <HAL_TIM_PWM_Start>

	//RTC 시간 초기화
	timeinit();
 80022c8:	f7ff fdb2 	bl	8001e30 <timeinit>

	I2C_CLCD_init();
 80022cc:	f7ff f9dc 	bl	8001688 <I2C_CLCD_init>
	I2C_CLCD_GotoXY(0, 0);
 80022d0:	2100      	movs	r1, #0
 80022d2:	2000      	movs	r0, #0
 80022d4:	f7ff fa06 	bl	80016e4 <I2C_CLCD_GotoXY>
	I2C_CLCD_PutStr("               ");
 80022d8:	4819      	ldr	r0, [pc, #100]	; (8002340 <main+0xe0>)
 80022da:	f7ff fa3f 	bl	800175c <I2C_CLCD_PutStr>
	I2C_CLCD_GotoXY(0, 1);
 80022de:	2101      	movs	r1, #1
 80022e0:	2000      	movs	r0, #0
 80022e2:	f7ff f9ff 	bl	80016e4 <I2C_CLCD_GotoXY>
	I2C_CLCD_PutStr("               ");
 80022e6:	4816      	ldr	r0, [pc, #88]	; (8002340 <main+0xe0>)
 80022e8:	f7ff fa38 	bl	800175c <I2C_CLCD_PutStr>

	I2C_CLCD_init2();
 80022ec:	f7ff faae 	bl	800184c <I2C_CLCD_init2>
	I2C_CLCD_GotoXY2(0, 0);
 80022f0:	2100      	movs	r1, #0
 80022f2:	2000      	movs	r0, #0
 80022f4:	f7ff fad8 	bl	80018a8 <I2C_CLCD_GotoXY2>
	I2C_CLCD_PutStr2("               ");
 80022f8:	4811      	ldr	r0, [pc, #68]	; (8002340 <main+0xe0>)
 80022fa:	f7ff fb11 	bl	8001920 <I2C_CLCD_PutStr2>
	I2C_CLCD_GotoXY2(0, 1);
 80022fe:	2101      	movs	r1, #1
 8002300:	2000      	movs	r0, #0
 8002302:	f7ff fad1 	bl	80018a8 <I2C_CLCD_GotoXY2>
	I2C_CLCD_PutStr2("               ");
 8002306:	480e      	ldr	r0, [pc, #56]	; (8002340 <main+0xe0>)
 8002308:	f7ff fb0a 	bl	8001920 <I2C_CLCD_PutStr2>
	I2C_CLCD_GotoXY2(0, 1);
 800230c:	2101      	movs	r1, #1
 800230e:	2000      	movs	r0, #0
 8002310:	f7ff faca 	bl	80018a8 <I2C_CLCD_GotoXY2>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		timeLCDprint();
 8002314:	f7ff fdb8 	bl	8001e88 <timeLCDprint>
		EscalatorSpeedEventCheck();
 8002318:	f7fe fdc8 	bl	8000eac <EscalatorSpeedEventCheck>
		EscalatorStateCheck();
 800231c:	f7fe fe12 	bl	8000f44 <EscalatorStateCheck>
		EscalatorRUN();
 8002320:	f7fe fe22 	bl	8000f68 <EscalatorRUN>
	while (1) {
 8002324:	e7f6      	b.n	8002314 <main+0xb4>
 8002326:	bf00      	nop
 8002328:	20000258 	.word	0x20000258
 800232c:	200001c8 	.word	0x200001c8
 8002330:	20000210 	.word	0x20000210
 8002334:	20000180 	.word	0x20000180
 8002338:	200000d8 	.word	0x200000d8
 800233c:	2000012c 	.word	0x2000012c
 8002340:	080094f0 	.word	0x080094f0

08002344 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002344:	b580      	push	{r7, lr}
 8002346:	b094      	sub	sp, #80	; 0x50
 8002348:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800234a:	f107 0320 	add.w	r3, r7, #32
 800234e:	2230      	movs	r2, #48	; 0x30
 8002350:	2100      	movs	r1, #0
 8002352:	4618      	mov	r0, r3
 8002354:	f006 f8b0 	bl	80084b8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002358:	f107 030c 	add.w	r3, r7, #12
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]
 8002366:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002368:	2300      	movs	r3, #0
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	4b27      	ldr	r3, [pc, #156]	; (800240c <SystemClock_Config+0xc8>)
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002370:	4a26      	ldr	r2, [pc, #152]	; (800240c <SystemClock_Config+0xc8>)
 8002372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002376:	6413      	str	r3, [r2, #64]	; 0x40
 8002378:	4b24      	ldr	r3, [pc, #144]	; (800240c <SystemClock_Config+0xc8>)
 800237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002380:	60bb      	str	r3, [r7, #8]
 8002382:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002384:	2300      	movs	r3, #0
 8002386:	607b      	str	r3, [r7, #4]
 8002388:	4b21      	ldr	r3, [pc, #132]	; (8002410 <SystemClock_Config+0xcc>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a20      	ldr	r2, [pc, #128]	; (8002410 <SystemClock_Config+0xcc>)
 800238e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002392:	6013      	str	r3, [r2, #0]
 8002394:	4b1e      	ldr	r3, [pc, #120]	; (8002410 <SystemClock_Config+0xcc>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800239c:	607b      	str	r3, [r7, #4]
 800239e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023a0:	2302      	movs	r3, #2
 80023a2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023a4:	2301      	movs	r3, #1
 80023a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023a8:	2310      	movs	r3, #16
 80023aa:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023ac:	2302      	movs	r3, #2
 80023ae:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80023b0:	2300      	movs	r3, #0
 80023b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80023b4:	2308      	movs	r3, #8
 80023b6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 80023b8:	2364      	movs	r3, #100	; 0x64
 80023ba:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023bc:	2302      	movs	r3, #2
 80023be:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80023c0:	2304      	movs	r3, #4
 80023c2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80023c4:	f107 0320 	add.w	r3, r7, #32
 80023c8:	4618      	mov	r0, r3
 80023ca:	f002 fe75 	bl	80050b8 <HAL_RCC_OscConfig>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <SystemClock_Config+0x94>
		Error_Handler();
 80023d4:	f000 fa30 	bl	8002838 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80023d8:	230f      	movs	r3, #15
 80023da:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023dc:	2302      	movs	r3, #2
 80023de:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023e8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80023ee:	f107 030c 	add.w	r3, r7, #12
 80023f2:	2103      	movs	r1, #3
 80023f4:	4618      	mov	r0, r3
 80023f6:	f003 f8d7 	bl	80055a8 <HAL_RCC_ClockConfig>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <SystemClock_Config+0xc0>
		Error_Handler();
 8002400:	f000 fa1a 	bl	8002838 <Error_Handler>
	}
}
 8002404:	bf00      	nop
 8002406:	3750      	adds	r7, #80	; 0x50
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40023800 	.word	0x40023800
 8002410:	40007000 	.word	0x40007000

08002414 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002418:	4b12      	ldr	r3, [pc, #72]	; (8002464 <MX_I2C1_Init+0x50>)
 800241a:	4a13      	ldr	r2, [pc, #76]	; (8002468 <MX_I2C1_Init+0x54>)
 800241c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800241e:	4b11      	ldr	r3, [pc, #68]	; (8002464 <MX_I2C1_Init+0x50>)
 8002420:	4a12      	ldr	r2, [pc, #72]	; (800246c <MX_I2C1_Init+0x58>)
 8002422:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002424:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <MX_I2C1_Init+0x50>)
 8002426:	2200      	movs	r2, #0
 8002428:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800242a:	4b0e      	ldr	r3, [pc, #56]	; (8002464 <MX_I2C1_Init+0x50>)
 800242c:	2200      	movs	r2, #0
 800242e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002430:	4b0c      	ldr	r3, [pc, #48]	; (8002464 <MX_I2C1_Init+0x50>)
 8002432:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002436:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002438:	4b0a      	ldr	r3, [pc, #40]	; (8002464 <MX_I2C1_Init+0x50>)
 800243a:	2200      	movs	r2, #0
 800243c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800243e:	4b09      	ldr	r3, [pc, #36]	; (8002464 <MX_I2C1_Init+0x50>)
 8002440:	2200      	movs	r2, #0
 8002442:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002444:	4b07      	ldr	r3, [pc, #28]	; (8002464 <MX_I2C1_Init+0x50>)
 8002446:	2200      	movs	r2, #0
 8002448:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800244a:	4b06      	ldr	r3, [pc, #24]	; (8002464 <MX_I2C1_Init+0x50>)
 800244c:	2200      	movs	r2, #0
 800244e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002450:	4804      	ldr	r0, [pc, #16]	; (8002464 <MX_I2C1_Init+0x50>)
 8002452:	f001 f98d 	bl	8003770 <HAL_I2C_Init>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <MX_I2C1_Init+0x4c>
		Error_Handler();
 800245c:	f000 f9ec 	bl	8002838 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002460:	bf00      	nop
 8002462:	bd80      	pop	{r7, pc}
 8002464:	200000d8 	.word	0x200000d8
 8002468:	40005400 	.word	0x40005400
 800246c:	000186a0 	.word	0x000186a0

08002470 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8002474:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <MX_I2C2_Init+0x50>)
 8002476:	4a13      	ldr	r2, [pc, #76]	; (80024c4 <MX_I2C2_Init+0x54>)
 8002478:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 800247a:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <MX_I2C2_Init+0x50>)
 800247c:	4a12      	ldr	r2, [pc, #72]	; (80024c8 <MX_I2C2_Init+0x58>)
 800247e:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002480:	4b0f      	ldr	r3, [pc, #60]	; (80024c0 <MX_I2C2_Init+0x50>)
 8002482:	2200      	movs	r2, #0
 8002484:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8002486:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <MX_I2C2_Init+0x50>)
 8002488:	2200      	movs	r2, #0
 800248a:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800248c:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <MX_I2C2_Init+0x50>)
 800248e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002492:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002494:	4b0a      	ldr	r3, [pc, #40]	; (80024c0 <MX_I2C2_Init+0x50>)
 8002496:	2200      	movs	r2, #0
 8002498:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 800249a:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <MX_I2C2_Init+0x50>)
 800249c:	2200      	movs	r2, #0
 800249e:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024a0:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <MX_I2C2_Init+0x50>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024a6:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <MX_I2C2_Init+0x50>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 80024ac:	4804      	ldr	r0, [pc, #16]	; (80024c0 <MX_I2C2_Init+0x50>)
 80024ae:	f001 f95f 	bl	8003770 <HAL_I2C_Init>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <MX_I2C2_Init+0x4c>
		Error_Handler();
 80024b8:	f000 f9be 	bl	8002838 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 80024bc:	bf00      	nop
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	2000012c 	.word	0x2000012c
 80024c4:	40005800 	.word	0x40005800
 80024c8:	000186a0 	.word	0x000186a0

080024cc <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08a      	sub	sp, #40	; 0x28
 80024d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80024d2:	f107 0318 	add.w	r3, r7, #24
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	605a      	str	r2, [r3, #4]
 80024dc:	609a      	str	r2, [r3, #8]
 80024de:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80024e0:	f107 0310 	add.w	r3, r7, #16
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80024ea:	463b      	mov	r3, r7
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80024f6:	4b32      	ldr	r3, [pc, #200]	; (80025c0 <MX_TIM1_Init+0xf4>)
 80024f8:	4a32      	ldr	r2, [pc, #200]	; (80025c4 <MX_TIM1_Init+0xf8>)
 80024fa:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 100 - 1;
 80024fc:	4b30      	ldr	r3, [pc, #192]	; (80025c0 <MX_TIM1_Init+0xf4>)
 80024fe:	2263      	movs	r2, #99	; 0x63
 8002500:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002502:	4b2f      	ldr	r3, [pc, #188]	; (80025c0 <MX_TIM1_Init+0xf4>)
 8002504:	2200      	movs	r2, #0
 8002506:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8002508:	4b2d      	ldr	r3, [pc, #180]	; (80025c0 <MX_TIM1_Init+0xf4>)
 800250a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800250e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002510:	4b2b      	ldr	r3, [pc, #172]	; (80025c0 <MX_TIM1_Init+0xf4>)
 8002512:	2200      	movs	r2, #0
 8002514:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002516:	4b2a      	ldr	r3, [pc, #168]	; (80025c0 <MX_TIM1_Init+0xf4>)
 8002518:	2200      	movs	r2, #0
 800251a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800251c:	4b28      	ldr	r3, [pc, #160]	; (80025c0 <MX_TIM1_Init+0xf4>)
 800251e:	2200      	movs	r2, #0
 8002520:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8002522:	4827      	ldr	r0, [pc, #156]	; (80025c0 <MX_TIM1_Init+0xf4>)
 8002524:	f003 fa20 	bl	8005968 <HAL_TIM_Base_Init>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <MX_TIM1_Init+0x66>
		Error_Handler();
 800252e:	f000 f983 	bl	8002838 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002532:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002536:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8002538:	f107 0318 	add.w	r3, r7, #24
 800253c:	4619      	mov	r1, r3
 800253e:	4820      	ldr	r0, [pc, #128]	; (80025c0 <MX_TIM1_Init+0xf4>)
 8002540:	f003 ff88 	bl	8006454 <HAL_TIM_ConfigClockSource>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <MX_TIM1_Init+0x82>
		Error_Handler();
 800254a:	f000 f975 	bl	8002838 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK) {
 800254e:	481c      	ldr	r0, [pc, #112]	; (80025c0 <MX_TIM1_Init+0xf4>)
 8002550:	f003 fbbe 	bl	8005cd0 <HAL_TIM_IC_Init>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <MX_TIM1_Init+0x92>
		Error_Handler();
 800255a:	f000 f96d 	bl	8002838 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800255e:	2300      	movs	r3, #0
 8002560:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002562:	2300      	movs	r3, #0
 8002564:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8002566:	f107 0310 	add.w	r3, r7, #16
 800256a:	4619      	mov	r1, r3
 800256c:	4814      	ldr	r0, [pc, #80]	; (80025c0 <MX_TIM1_Init+0xf4>)
 800256e:	f004 fc9b 	bl	8006ea8 <HAL_TIMEx_MasterConfigSynchronization>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <MX_TIM1_Init+0xb0>
		Error_Handler();
 8002578:	f000 f95e 	bl	8002838 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800257c:	2300      	movs	r3, #0
 800257e:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002580:	2301      	movs	r3, #1
 8002582:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002584:	2300      	movs	r3, #0
 8002586:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8002588:	2300      	movs	r3, #0
 800258a:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 800258c:	463b      	mov	r3, r7
 800258e:	2200      	movs	r2, #0
 8002590:	4619      	mov	r1, r3
 8002592:	480b      	ldr	r0, [pc, #44]	; (80025c0 <MX_TIM1_Init+0xf4>)
 8002594:	f003 fe00 	bl	8006198 <HAL_TIM_IC_ConfigChannel>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <MX_TIM1_Init+0xd6>
		Error_Handler();
 800259e:	f000 f94b 	bl	8002838 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 80025a2:	463b      	mov	r3, r7
 80025a4:	2208      	movs	r2, #8
 80025a6:	4619      	mov	r1, r3
 80025a8:	4805      	ldr	r0, [pc, #20]	; (80025c0 <MX_TIM1_Init+0xf4>)
 80025aa:	f003 fdf5 	bl	8006198 <HAL_TIM_IC_ConfigChannel>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <MX_TIM1_Init+0xec>
		Error_Handler();
 80025b4:	f000 f940 	bl	8002838 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80025b8:	bf00      	nop
 80025ba:	3728      	adds	r7, #40	; 0x28
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	20000180 	.word	0x20000180
 80025c4:	40010000 	.word	0x40010000

080025c8 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b08e      	sub	sp, #56	; 0x38
 80025cc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80025ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	605a      	str	r2, [r3, #4]
 80025d8:	609a      	str	r2, [r3, #8]
 80025da:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80025dc:	f107 0320 	add.w	r3, r7, #32
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80025e6:	1d3b      	adds	r3, r7, #4
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	609a      	str	r2, [r3, #8]
 80025f0:	60da      	str	r2, [r3, #12]
 80025f2:	611a      	str	r2, [r3, #16]
 80025f4:	615a      	str	r2, [r3, #20]
 80025f6:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80025f8:	4b2c      	ldr	r3, [pc, #176]	; (80026ac <MX_TIM3_Init+0xe4>)
 80025fa:	4a2d      	ldr	r2, [pc, #180]	; (80026b0 <MX_TIM3_Init+0xe8>)
 80025fc:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 2 - 1;
 80025fe:	4b2b      	ldr	r3, [pc, #172]	; (80026ac <MX_TIM3_Init+0xe4>)
 8002600:	2201      	movs	r2, #1
 8002602:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002604:	4b29      	ldr	r3, [pc, #164]	; (80026ac <MX_TIM3_Init+0xe4>)
 8002606:	2200      	movs	r2, #0
 8002608:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000 - 1;
 800260a:	4b28      	ldr	r3, [pc, #160]	; (80026ac <MX_TIM3_Init+0xe4>)
 800260c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002610:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002612:	4b26      	ldr	r3, [pc, #152]	; (80026ac <MX_TIM3_Init+0xe4>)
 8002614:	2200      	movs	r2, #0
 8002616:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002618:	4b24      	ldr	r3, [pc, #144]	; (80026ac <MX_TIM3_Init+0xe4>)
 800261a:	2200      	movs	r2, #0
 800261c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800261e:	4823      	ldr	r0, [pc, #140]	; (80026ac <MX_TIM3_Init+0xe4>)
 8002620:	f003 f9a2 	bl	8005968 <HAL_TIM_Base_Init>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <MX_TIM3_Init+0x66>
		Error_Handler();
 800262a:	f000 f905 	bl	8002838 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800262e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002632:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8002634:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002638:	4619      	mov	r1, r3
 800263a:	481c      	ldr	r0, [pc, #112]	; (80026ac <MX_TIM3_Init+0xe4>)
 800263c:	f003 ff0a 	bl	8006454 <HAL_TIM_ConfigClockSource>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_TIM3_Init+0x82>
		Error_Handler();
 8002646:	f000 f8f7 	bl	8002838 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 800264a:	4818      	ldr	r0, [pc, #96]	; (80026ac <MX_TIM3_Init+0xe4>)
 800264c:	f003 fa36 	bl	8005abc <HAL_TIM_PWM_Init>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <MX_TIM3_Init+0x92>
		Error_Handler();
 8002656:	f000 f8ef 	bl	8002838 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800265a:	2300      	movs	r3, #0
 800265c:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800265e:	2300      	movs	r3, #0
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8002662:	f107 0320 	add.w	r3, r7, #32
 8002666:	4619      	mov	r1, r3
 8002668:	4810      	ldr	r0, [pc, #64]	; (80026ac <MX_TIM3_Init+0xe4>)
 800266a:	f004 fc1d 	bl	8006ea8 <HAL_TIMEx_MasterConfigSynchronization>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <MX_TIM3_Init+0xb0>
		Error_Handler();
 8002674:	f000 f8e0 	bl	8002838 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002678:	2360      	movs	r3, #96	; 0x60
 800267a:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002680:	2300      	movs	r3, #0
 8002682:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002684:	2300      	movs	r3, #0
 8002686:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8002688:	1d3b      	adds	r3, r7, #4
 800268a:	2200      	movs	r2, #0
 800268c:	4619      	mov	r1, r3
 800268e:	4807      	ldr	r0, [pc, #28]	; (80026ac <MX_TIM3_Init+0xe4>)
 8002690:	f003 fe1e 	bl	80062d0 <HAL_TIM_PWM_ConfigChannel>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <MX_TIM3_Init+0xd6>
		Error_Handler();
 800269a:	f000 f8cd 	bl	8002838 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 800269e:	4803      	ldr	r0, [pc, #12]	; (80026ac <MX_TIM3_Init+0xe4>)
 80026a0:	f000 fa18 	bl	8002ad4 <HAL_TIM_MspPostInit>

}
 80026a4:	bf00      	nop
 80026a6:	3738      	adds	r7, #56	; 0x38
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	200001c8 	.word	0x200001c8
 80026b0:	40000400 	.word	0x40000400

080026b4 <MX_TIM11_Init>:
/**
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void) {
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
	/* USER CODE END TIM11_Init 0 */

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 80026b8:	4b0e      	ldr	r3, [pc, #56]	; (80026f4 <MX_TIM11_Init+0x40>)
 80026ba:	4a0f      	ldr	r2, [pc, #60]	; (80026f8 <MX_TIM11_Init+0x44>)
 80026bc:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 100 - 1;
 80026be:	4b0d      	ldr	r3, [pc, #52]	; (80026f4 <MX_TIM11_Init+0x40>)
 80026c0:	2263      	movs	r2, #99	; 0x63
 80026c2:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026c4:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <MX_TIM11_Init+0x40>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 65535;
 80026ca:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <MX_TIM11_Init+0x40>)
 80026cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026d0:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026d2:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <MX_TIM11_Init+0x40>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026d8:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <MX_TIM11_Init+0x40>)
 80026da:	2200      	movs	r2, #0
 80026dc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK) {
 80026de:	4805      	ldr	r0, [pc, #20]	; (80026f4 <MX_TIM11_Init+0x40>)
 80026e0:	f003 f942 	bl	8005968 <HAL_TIM_Base_Init>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_TIM11_Init+0x3a>
		Error_Handler();
 80026ea:	f000 f8a5 	bl	8002838 <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */

}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20000210 	.word	0x20000210
 80026f8:	40014800 	.word	0x40014800

080026fc <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002700:	4b11      	ldr	r3, [pc, #68]	; (8002748 <MX_USART2_UART_Init+0x4c>)
 8002702:	4a12      	ldr	r2, [pc, #72]	; (800274c <MX_USART2_UART_Init+0x50>)
 8002704:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002706:	4b10      	ldr	r3, [pc, #64]	; (8002748 <MX_USART2_UART_Init+0x4c>)
 8002708:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800270c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800270e:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <MX_USART2_UART_Init+0x4c>)
 8002710:	2200      	movs	r2, #0
 8002712:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002714:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <MX_USART2_UART_Init+0x4c>)
 8002716:	2200      	movs	r2, #0
 8002718:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800271a:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <MX_USART2_UART_Init+0x4c>)
 800271c:	2200      	movs	r2, #0
 800271e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002720:	4b09      	ldr	r3, [pc, #36]	; (8002748 <MX_USART2_UART_Init+0x4c>)
 8002722:	220c      	movs	r2, #12
 8002724:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002726:	4b08      	ldr	r3, [pc, #32]	; (8002748 <MX_USART2_UART_Init+0x4c>)
 8002728:	2200      	movs	r2, #0
 800272a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800272c:	4b06      	ldr	r3, [pc, #24]	; (8002748 <MX_USART2_UART_Init+0x4c>)
 800272e:	2200      	movs	r2, #0
 8002730:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002732:	4805      	ldr	r0, [pc, #20]	; (8002748 <MX_USART2_UART_Init+0x4c>)
 8002734:	f004 fc3a 	bl	8006fac <HAL_UART_Init>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800273e:	f000 f87b 	bl	8002838 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20000258 	.word	0x20000258
 800274c:	40004400 	.word	0x40004400

08002750 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002750:	b580      	push	{r7, lr}
 8002752:	b088      	sub	sp, #32
 8002754:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002756:	f107 030c 	add.w	r3, r7, #12
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	605a      	str	r2, [r3, #4]
 8002760:	609a      	str	r2, [r3, #8]
 8002762:	60da      	str	r2, [r3, #12]
 8002764:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	60bb      	str	r3, [r7, #8]
 800276a:	4b30      	ldr	r3, [pc, #192]	; (800282c <MX_GPIO_Init+0xdc>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	4a2f      	ldr	r2, [pc, #188]	; (800282c <MX_GPIO_Init+0xdc>)
 8002770:	f043 0304 	orr.w	r3, r3, #4
 8002774:	6313      	str	r3, [r2, #48]	; 0x30
 8002776:	4b2d      	ldr	r3, [pc, #180]	; (800282c <MX_GPIO_Init+0xdc>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	f003 0304 	and.w	r3, r3, #4
 800277e:	60bb      	str	r3, [r7, #8]
 8002780:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	607b      	str	r3, [r7, #4]
 8002786:	4b29      	ldr	r3, [pc, #164]	; (800282c <MX_GPIO_Init+0xdc>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	4a28      	ldr	r2, [pc, #160]	; (800282c <MX_GPIO_Init+0xdc>)
 800278c:	f043 0301 	orr.w	r3, r3, #1
 8002790:	6313      	str	r3, [r2, #48]	; 0x30
 8002792:	4b26      	ldr	r3, [pc, #152]	; (800282c <MX_GPIO_Init+0xdc>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	607b      	str	r3, [r7, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	603b      	str	r3, [r7, #0]
 80027a2:	4b22      	ldr	r3, [pc, #136]	; (800282c <MX_GPIO_Init+0xdc>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	4a21      	ldr	r2, [pc, #132]	; (800282c <MX_GPIO_Init+0xdc>)
 80027a8:	f043 0302 	orr.w	r3, r3, #2
 80027ac:	6313      	str	r3, [r2, #48]	; 0x30
 80027ae:	4b1f      	ldr	r3, [pc, #124]	; (800282c <MX_GPIO_Init+0xdc>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	603b      	str	r3, [r7, #0]
 80027b8:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, esc_A_Pin | esc_B_Pin, GPIO_PIN_RESET);
 80027ba:	2200      	movs	r2, #0
 80027bc:	2103      	movs	r1, #3
 80027be:	481c      	ldr	r0, [pc, #112]	; (8002830 <MX_GPIO_Init+0xe0>)
 80027c0:	f000 ffbc 	bl	800373c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, trigger_Pin | trigger2_Pin, GPIO_PIN_RESET);
 80027c4:	2200      	movs	r2, #0
 80027c6:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 80027ca:	481a      	ldr	r0, [pc, #104]	; (8002834 <MX_GPIO_Init+0xe4>)
 80027cc:	f000 ffb6 	bl	800373c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : esc_A_Pin esc_B_Pin */
	GPIO_InitStruct.Pin = esc_A_Pin | esc_B_Pin;
 80027d0:	2303      	movs	r3, #3
 80027d2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027d4:	2301      	movs	r3, #1
 80027d6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027dc:	2300      	movs	r3, #0
 80027de:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027e0:	f107 030c 	add.w	r3, r7, #12
 80027e4:	4619      	mov	r1, r3
 80027e6:	4812      	ldr	r0, [pc, #72]	; (8002830 <MX_GPIO_Init+0xe0>)
 80027e8:	f000 fe0c 	bl	8003404 <HAL_GPIO_Init>

	/*Configure GPIO pins : trigger_Pin trigger2_Pin */
	GPIO_InitStruct.Pin = trigger_Pin | trigger2_Pin;
 80027ec:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80027f0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027f2:	2301      	movs	r3, #1
 80027f4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fa:	2300      	movs	r3, #0
 80027fc:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027fe:	f107 030c 	add.w	r3, r7, #12
 8002802:	4619      	mov	r1, r3
 8002804:	480b      	ldr	r0, [pc, #44]	; (8002834 <MX_GPIO_Init+0xe4>)
 8002806:	f000 fdfd 	bl	8003404 <HAL_GPIO_Init>

	/*Configure GPIO pins : slow_Pin fast_Pin */
	GPIO_InitStruct.Pin = slow_Pin | fast_Pin;
 800280a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800280e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002810:	2300      	movs	r3, #0
 8002812:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002814:	2301      	movs	r3, #1
 8002816:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002818:	f107 030c 	add.w	r3, r7, #12
 800281c:	4619      	mov	r1, r3
 800281e:	4804      	ldr	r0, [pc, #16]	; (8002830 <MX_GPIO_Init+0xe0>)
 8002820:	f000 fdf0 	bl	8003404 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002824:	bf00      	nop
 8002826:	3720      	adds	r7, #32
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40023800 	.word	0x40023800
 8002830:	40020800 	.word	0x40020800
 8002834:	40020000 	.word	0x40020000

08002838 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800283c:	b672      	cpsid	i
}
 800283e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002840:	e7fe      	b.n	8002840 <Error_Handler+0x8>
	...

08002844 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	607b      	str	r3, [r7, #4]
 800284e:	4b10      	ldr	r3, [pc, #64]	; (8002890 <HAL_MspInit+0x4c>)
 8002850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002852:	4a0f      	ldr	r2, [pc, #60]	; (8002890 <HAL_MspInit+0x4c>)
 8002854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002858:	6453      	str	r3, [r2, #68]	; 0x44
 800285a:	4b0d      	ldr	r3, [pc, #52]	; (8002890 <HAL_MspInit+0x4c>)
 800285c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002862:	607b      	str	r3, [r7, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	603b      	str	r3, [r7, #0]
 800286a:	4b09      	ldr	r3, [pc, #36]	; (8002890 <HAL_MspInit+0x4c>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	4a08      	ldr	r2, [pc, #32]	; (8002890 <HAL_MspInit+0x4c>)
 8002870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002874:	6413      	str	r3, [r2, #64]	; 0x40
 8002876:	4b06      	ldr	r3, [pc, #24]	; (8002890 <HAL_MspInit+0x4c>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287e:	603b      	str	r3, [r7, #0]
 8002880:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	40023800 	.word	0x40023800

08002894 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08c      	sub	sp, #48	; 0x30
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289c:	f107 031c 	add.w	r3, r7, #28
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a3a      	ldr	r2, [pc, #232]	; (800299c <HAL_I2C_MspInit+0x108>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d12c      	bne.n	8002910 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	61bb      	str	r3, [r7, #24]
 80028ba:	4b39      	ldr	r3, [pc, #228]	; (80029a0 <HAL_I2C_MspInit+0x10c>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	4a38      	ldr	r2, [pc, #224]	; (80029a0 <HAL_I2C_MspInit+0x10c>)
 80028c0:	f043 0302 	orr.w	r3, r3, #2
 80028c4:	6313      	str	r3, [r2, #48]	; 0x30
 80028c6:	4b36      	ldr	r3, [pc, #216]	; (80029a0 <HAL_I2C_MspInit+0x10c>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	61bb      	str	r3, [r7, #24]
 80028d0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028d2:	23c0      	movs	r3, #192	; 0xc0
 80028d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028d6:	2312      	movs	r3, #18
 80028d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028da:	2301      	movs	r3, #1
 80028dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028de:	2303      	movs	r3, #3
 80028e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028e2:	2304      	movs	r3, #4
 80028e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e6:	f107 031c 	add.w	r3, r7, #28
 80028ea:	4619      	mov	r1, r3
 80028ec:	482d      	ldr	r0, [pc, #180]	; (80029a4 <HAL_I2C_MspInit+0x110>)
 80028ee:	f000 fd89 	bl	8003404 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]
 80028f6:	4b2a      	ldr	r3, [pc, #168]	; (80029a0 <HAL_I2C_MspInit+0x10c>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	4a29      	ldr	r2, [pc, #164]	; (80029a0 <HAL_I2C_MspInit+0x10c>)
 80028fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002900:	6413      	str	r3, [r2, #64]	; 0x40
 8002902:	4b27      	ldr	r3, [pc, #156]	; (80029a0 <HAL_I2C_MspInit+0x10c>)
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800290a:	617b      	str	r3, [r7, #20]
 800290c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800290e:	e041      	b.n	8002994 <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a24      	ldr	r2, [pc, #144]	; (80029a8 <HAL_I2C_MspInit+0x114>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d13c      	bne.n	8002994 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	613b      	str	r3, [r7, #16]
 800291e:	4b20      	ldr	r3, [pc, #128]	; (80029a0 <HAL_I2C_MspInit+0x10c>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	4a1f      	ldr	r2, [pc, #124]	; (80029a0 <HAL_I2C_MspInit+0x10c>)
 8002924:	f043 0302 	orr.w	r3, r3, #2
 8002928:	6313      	str	r3, [r2, #48]	; 0x30
 800292a:	4b1d      	ldr	r3, [pc, #116]	; (80029a0 <HAL_I2C_MspInit+0x10c>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	613b      	str	r3, [r7, #16]
 8002934:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002936:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800293a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800293c:	2312      	movs	r3, #18
 800293e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002940:	2301      	movs	r3, #1
 8002942:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002944:	2303      	movs	r3, #3
 8002946:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002948:	2304      	movs	r3, #4
 800294a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800294c:	f107 031c 	add.w	r3, r7, #28
 8002950:	4619      	mov	r1, r3
 8002952:	4814      	ldr	r0, [pc, #80]	; (80029a4 <HAL_I2C_MspInit+0x110>)
 8002954:	f000 fd56 	bl	8003404 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002958:	2308      	movs	r3, #8
 800295a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800295c:	2312      	movs	r3, #18
 800295e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002960:	2301      	movs	r3, #1
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002964:	2303      	movs	r3, #3
 8002966:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002968:	2309      	movs	r3, #9
 800296a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800296c:	f107 031c 	add.w	r3, r7, #28
 8002970:	4619      	mov	r1, r3
 8002972:	480c      	ldr	r0, [pc, #48]	; (80029a4 <HAL_I2C_MspInit+0x110>)
 8002974:	f000 fd46 	bl	8003404 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002978:	2300      	movs	r3, #0
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <HAL_I2C_MspInit+0x10c>)
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	4a07      	ldr	r2, [pc, #28]	; (80029a0 <HAL_I2C_MspInit+0x10c>)
 8002982:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002986:	6413      	str	r3, [r2, #64]	; 0x40
 8002988:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <HAL_I2C_MspInit+0x10c>)
 800298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	68fb      	ldr	r3, [r7, #12]
}
 8002994:	bf00      	nop
 8002996:	3730      	adds	r7, #48	; 0x30
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40005400 	.word	0x40005400
 80029a0:	40023800 	.word	0x40023800
 80029a4:	40020400 	.word	0x40020400
 80029a8:	40005800 	.word	0x40005800

080029ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b08c      	sub	sp, #48	; 0x30
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b4:	f107 031c 	add.w	r3, r7, #28
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a3d      	ldr	r2, [pc, #244]	; (8002ac0 <HAL_TIM_Base_MspInit+0x114>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d13d      	bne.n	8002a4a <HAL_TIM_Base_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	61bb      	str	r3, [r7, #24]
 80029d2:	4b3c      	ldr	r3, [pc, #240]	; (8002ac4 <HAL_TIM_Base_MspInit+0x118>)
 80029d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d6:	4a3b      	ldr	r2, [pc, #236]	; (8002ac4 <HAL_TIM_Base_MspInit+0x118>)
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	6453      	str	r3, [r2, #68]	; 0x44
 80029de:	4b39      	ldr	r3, [pc, #228]	; (8002ac4 <HAL_TIM_Base_MspInit+0x118>)
 80029e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	61bb      	str	r3, [r7, #24]
 80029e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	617b      	str	r3, [r7, #20]
 80029ee:	4b35      	ldr	r3, [pc, #212]	; (8002ac4 <HAL_TIM_Base_MspInit+0x118>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	4a34      	ldr	r2, [pc, #208]	; (8002ac4 <HAL_TIM_Base_MspInit+0x118>)
 80029f4:	f043 0301 	orr.w	r3, r3, #1
 80029f8:	6313      	str	r3, [r2, #48]	; 0x30
 80029fa:	4b32      	ldr	r3, [pc, #200]	; (8002ac4 <HAL_TIM_Base_MspInit+0x118>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	617b      	str	r3, [r7, #20]
 8002a04:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = echo_Pin|echo2_Pin;
 8002a06:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8002a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a10:	2300      	movs	r3, #0
 8002a12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a14:	2300      	movs	r3, #0
 8002a16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a1c:	f107 031c 	add.w	r3, r7, #28
 8002a20:	4619      	mov	r1, r3
 8002a22:	4829      	ldr	r0, [pc, #164]	; (8002ac8 <HAL_TIM_Base_MspInit+0x11c>)
 8002a24:	f000 fcee 	bl	8003404 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002a28:	2200      	movs	r2, #0
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	201a      	movs	r0, #26
 8002a2e:	f000 fc20 	bl	8003272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002a32:	201a      	movs	r0, #26
 8002a34:	f000 fc39 	bl	80032aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	201b      	movs	r0, #27
 8002a3e:	f000 fc18 	bl	8003272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002a42:	201b      	movs	r0, #27
 8002a44:	f000 fc31 	bl	80032aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002a48:	e036      	b.n	8002ab8 <HAL_TIM_Base_MspInit+0x10c>
  else if(htim_base->Instance==TIM3)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a1f      	ldr	r2, [pc, #124]	; (8002acc <HAL_TIM_Base_MspInit+0x120>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d116      	bne.n	8002a82 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a54:	2300      	movs	r3, #0
 8002a56:	613b      	str	r3, [r7, #16]
 8002a58:	4b1a      	ldr	r3, [pc, #104]	; (8002ac4 <HAL_TIM_Base_MspInit+0x118>)
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	4a19      	ldr	r2, [pc, #100]	; (8002ac4 <HAL_TIM_Base_MspInit+0x118>)
 8002a5e:	f043 0302 	orr.w	r3, r3, #2
 8002a62:	6413      	str	r3, [r2, #64]	; 0x40
 8002a64:	4b17      	ldr	r3, [pc, #92]	; (8002ac4 <HAL_TIM_Base_MspInit+0x118>)
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	613b      	str	r3, [r7, #16]
 8002a6e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002a70:	2200      	movs	r2, #0
 8002a72:	2100      	movs	r1, #0
 8002a74:	201d      	movs	r0, #29
 8002a76:	f000 fbfc 	bl	8003272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a7a:	201d      	movs	r0, #29
 8002a7c:	f000 fc15 	bl	80032aa <HAL_NVIC_EnableIRQ>
}
 8002a80:	e01a      	b.n	8002ab8 <HAL_TIM_Base_MspInit+0x10c>
  else if(htim_base->Instance==TIM11)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a12      	ldr	r2, [pc, #72]	; (8002ad0 <HAL_TIM_Base_MspInit+0x124>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d115      	bne.n	8002ab8 <HAL_TIM_Base_MspInit+0x10c>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	4b0c      	ldr	r3, [pc, #48]	; (8002ac4 <HAL_TIM_Base_MspInit+0x118>)
 8002a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a94:	4a0b      	ldr	r2, [pc, #44]	; (8002ac4 <HAL_TIM_Base_MspInit+0x118>)
 8002a96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a9a:	6453      	str	r3, [r2, #68]	; 0x44
 8002a9c:	4b09      	ldr	r3, [pc, #36]	; (8002ac4 <HAL_TIM_Base_MspInit+0x118>)
 8002a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	2100      	movs	r1, #0
 8002aac:	201a      	movs	r0, #26
 8002aae:	f000 fbe0 	bl	8003272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002ab2:	201a      	movs	r0, #26
 8002ab4:	f000 fbf9 	bl	80032aa <HAL_NVIC_EnableIRQ>
}
 8002ab8:	bf00      	nop
 8002aba:	3730      	adds	r7, #48	; 0x30
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40010000 	.word	0x40010000
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	40020000 	.word	0x40020000
 8002acc:	40000400 	.word	0x40000400
 8002ad0:	40014800 	.word	0x40014800

08002ad4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b088      	sub	sp, #32
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002adc:	f107 030c 	add.w	r3, r7, #12
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	605a      	str	r2, [r3, #4]
 8002ae6:	609a      	str	r2, [r3, #8]
 8002ae8:	60da      	str	r2, [r3, #12]
 8002aea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a12      	ldr	r2, [pc, #72]	; (8002b3c <HAL_TIM_MspPostInit+0x68>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d11d      	bne.n	8002b32 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	60bb      	str	r3, [r7, #8]
 8002afa:	4b11      	ldr	r3, [pc, #68]	; (8002b40 <HAL_TIM_MspPostInit+0x6c>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	4a10      	ldr	r2, [pc, #64]	; (8002b40 <HAL_TIM_MspPostInit+0x6c>)
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	6313      	str	r3, [r2, #48]	; 0x30
 8002b06:	4b0e      	ldr	r3, [pc, #56]	; (8002b40 <HAL_TIM_MspPostInit+0x6c>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	60bb      	str	r3, [r7, #8]
 8002b10:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = esc_Pin;
 8002b12:	2340      	movs	r3, #64	; 0x40
 8002b14:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b16:	2302      	movs	r3, #2
 8002b18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b22:	2302      	movs	r3, #2
 8002b24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(esc_GPIO_Port, &GPIO_InitStruct);
 8002b26:	f107 030c 	add.w	r3, r7, #12
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4805      	ldr	r0, [pc, #20]	; (8002b44 <HAL_TIM_MspPostInit+0x70>)
 8002b2e:	f000 fc69 	bl	8003404 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002b32:	bf00      	nop
 8002b34:	3720      	adds	r7, #32
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40000400 	.word	0x40000400
 8002b40:	40023800 	.word	0x40023800
 8002b44:	40020000 	.word	0x40020000

08002b48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b08a      	sub	sp, #40	; 0x28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b50:	f107 0314 	add.w	r3, r7, #20
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	605a      	str	r2, [r3, #4]
 8002b5a:	609a      	str	r2, [r3, #8]
 8002b5c:	60da      	str	r2, [r3, #12]
 8002b5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a1d      	ldr	r2, [pc, #116]	; (8002bdc <HAL_UART_MspInit+0x94>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d133      	bne.n	8002bd2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	613b      	str	r3, [r7, #16]
 8002b6e:	4b1c      	ldr	r3, [pc, #112]	; (8002be0 <HAL_UART_MspInit+0x98>)
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	4a1b      	ldr	r2, [pc, #108]	; (8002be0 <HAL_UART_MspInit+0x98>)
 8002b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b78:	6413      	str	r3, [r2, #64]	; 0x40
 8002b7a:	4b19      	ldr	r3, [pc, #100]	; (8002be0 <HAL_UART_MspInit+0x98>)
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b82:	613b      	str	r3, [r7, #16]
 8002b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	4b15      	ldr	r3, [pc, #84]	; (8002be0 <HAL_UART_MspInit+0x98>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	4a14      	ldr	r2, [pc, #80]	; (8002be0 <HAL_UART_MspInit+0x98>)
 8002b90:	f043 0301 	orr.w	r3, r3, #1
 8002b94:	6313      	str	r3, [r2, #48]	; 0x30
 8002b96:	4b12      	ldr	r3, [pc, #72]	; (8002be0 <HAL_UART_MspInit+0x98>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002ba2:	230c      	movs	r3, #12
 8002ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002baa:	2300      	movs	r3, #0
 8002bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002bb2:	2307      	movs	r3, #7
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb6:	f107 0314 	add.w	r3, r7, #20
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4809      	ldr	r0, [pc, #36]	; (8002be4 <HAL_UART_MspInit+0x9c>)
 8002bbe:	f000 fc21 	bl	8003404 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	2026      	movs	r0, #38	; 0x26
 8002bc8:	f000 fb53 	bl	8003272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002bcc:	2026      	movs	r0, #38	; 0x26
 8002bce:	f000 fb6c 	bl	80032aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002bd2:	bf00      	nop
 8002bd4:	3728      	adds	r7, #40	; 0x28
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	40004400 	.word	0x40004400
 8002be0:	40023800 	.word	0x40023800
 8002be4:	40020000 	.word	0x40020000

08002be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002bec:	e7fe      	b.n	8002bec <NMI_Handler+0x4>

08002bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bf2:	e7fe      	b.n	8002bf2 <HardFault_Handler+0x4>

08002bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bf8:	e7fe      	b.n	8002bf8 <MemManage_Handler+0x4>

08002bfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bfe:	e7fe      	b.n	8002bfe <BusFault_Handler+0x4>

08002c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c04:	e7fe      	b.n	8002c04 <UsageFault_Handler+0x4>

08002c06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c06:	b480      	push	{r7}
 8002c08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c0a:	bf00      	nop
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c18:	bf00      	nop
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c22:	b480      	push	{r7}
 8002c24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c26:	bf00      	nop
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	SysTickcallback();
 8002c34:	f7fe f890 	bl	8000d58 <SysTickcallback>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c38:	f000 f9fc 	bl	8003034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c3c:	bf00      	nop
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c44:	4803      	ldr	r0, [pc, #12]	; (8002c54 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8002c46:	f003 f9b7 	bl	8005fb8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8002c4a:	4803      	ldr	r0, [pc, #12]	; (8002c58 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002c4c:	f003 f9b4 	bl	8005fb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002c50:	bf00      	nop
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	20000180 	.word	0x20000180
 8002c58:	20000210 	.word	0x20000210

08002c5c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c60:	4802      	ldr	r0, [pc, #8]	; (8002c6c <TIM1_CC_IRQHandler+0x10>)
 8002c62:	f003 f9a9 	bl	8005fb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002c66:	bf00      	nop
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000180 	.word	0x20000180

08002c70 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002c74:	4802      	ldr	r0, [pc, #8]	; (8002c80 <TIM3_IRQHandler+0x10>)
 8002c76:	f003 f99f 	bl	8005fb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002c7a:	bf00      	nop
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	200001c8 	.word	0x200001c8

08002c84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002c88:	4802      	ldr	r0, [pc, #8]	; (8002c94 <USART2_IRQHandler+0x10>)
 8002c8a:	f004 fa8f 	bl	80071ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	20000258 	.word	0x20000258

08002c98 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	617b      	str	r3, [r7, #20]
 8002ca8:	e00a      	b.n	8002cc0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002caa:	f3af 8000 	nop.w
 8002cae:	4601      	mov	r1, r0
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	1c5a      	adds	r2, r3, #1
 8002cb4:	60ba      	str	r2, [r7, #8]
 8002cb6:	b2ca      	uxtb	r2, r1
 8002cb8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	dbf0      	blt.n	8002caa <_read+0x12>
  }

  return len;
 8002cc8:	687b      	ldr	r3, [r7, #4]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3718      	adds	r7, #24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002cda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
 8002cf2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cfa:	605a      	str	r2, [r3, #4]
  return 0;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <_isatty>:

int _isatty(int file)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d12:	2301      	movs	r3, #1
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
	...

08002d3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d44:	4a14      	ldr	r2, [pc, #80]	; (8002d98 <_sbrk+0x5c>)
 8002d46:	4b15      	ldr	r3, [pc, #84]	; (8002d9c <_sbrk+0x60>)
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d50:	4b13      	ldr	r3, [pc, #76]	; (8002da0 <_sbrk+0x64>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d102      	bne.n	8002d5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d58:	4b11      	ldr	r3, [pc, #68]	; (8002da0 <_sbrk+0x64>)
 8002d5a:	4a12      	ldr	r2, [pc, #72]	; (8002da4 <_sbrk+0x68>)
 8002d5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d5e:	4b10      	ldr	r3, [pc, #64]	; (8002da0 <_sbrk+0x64>)
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4413      	add	r3, r2
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d207      	bcs.n	8002d7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d6c:	f005 fc04 	bl	8008578 <__errno>
 8002d70:	4603      	mov	r3, r0
 8002d72:	220c      	movs	r2, #12
 8002d74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d76:	f04f 33ff 	mov.w	r3, #4294967295
 8002d7a:	e009      	b.n	8002d90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d7c:	4b08      	ldr	r3, [pc, #32]	; (8002da0 <_sbrk+0x64>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d82:	4b07      	ldr	r3, [pc, #28]	; (8002da0 <_sbrk+0x64>)
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4413      	add	r3, r2
 8002d8a:	4a05      	ldr	r2, [pc, #20]	; (8002da0 <_sbrk+0x64>)
 8002d8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3718      	adds	r7, #24
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	20020000 	.word	0x20020000
 8002d9c:	00000400 	.word	0x00000400
 8002da0:	200002a0 	.word	0x200002a0
 8002da4:	20000568 	.word	0x20000568

08002da8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002dac:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <SystemInit+0x20>)
 8002dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db2:	4a05      	ldr	r2, [pc, #20]	; (8002dc8 <SystemInit+0x20>)
 8002db4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002db8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dbc:	bf00      	nop
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	e000ed00 	.word	0xe000ed00

08002dcc <initUart>:
uint8_t rxBuffer[rxBufferMax];
uint8_t rxChar;
UART_HandleTypeDef *myHuart;

//init device
void initUart(UART_HandleTypeDef *inHuart){
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
	myHuart = inHuart;
 8002dd4:	4a06      	ldr	r2, [pc, #24]	; (8002df0 <initUart+0x24>)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(myHuart, &rxChar, 1);
 8002dda:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <initUart+0x24>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2201      	movs	r2, #1
 8002de0:	4904      	ldr	r1, [pc, #16]	; (8002df4 <initUart+0x28>)
 8002de2:	4618      	mov	r0, r3
 8002de4:	f004 f9bd 	bl	8007162 <HAL_UART_Receive_IT>
}
 8002de8:	bf00      	nop
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	200003ac 	.word	0x200003ac
 8002df4:	200003ab 	.word	0x200003ab

08002df8 <HAL_UART_RxCpltCallback>:

//process received charactor
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
	rxBuffer[rxBufferPp++] = rxChar;
 8002e00:	4b11      	ldr	r3, [pc, #68]	; (8002e48 <HAL_UART_RxCpltCallback+0x50>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	1c5a      	adds	r2, r3, #1
 8002e06:	4910      	ldr	r1, [pc, #64]	; (8002e48 <HAL_UART_RxCpltCallback+0x50>)
 8002e08:	600a      	str	r2, [r1, #0]
 8002e0a:	4a10      	ldr	r2, [pc, #64]	; (8002e4c <HAL_UART_RxCpltCallback+0x54>)
 8002e0c:	7811      	ldrb	r1, [r2, #0]
 8002e0e:	4a10      	ldr	r2, [pc, #64]	; (8002e50 <HAL_UART_RxCpltCallback+0x58>)
 8002e10:	54d1      	strb	r1, [r2, r3]
	rxBufferPp %= rxBufferMax;
 8002e12:	4b0d      	ldr	r3, [pc, #52]	; (8002e48 <HAL_UART_RxCpltCallback+0x50>)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	4b0f      	ldr	r3, [pc, #60]	; (8002e54 <HAL_UART_RxCpltCallback+0x5c>)
 8002e18:	fb83 1302 	smull	r1, r3, r3, r2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	11d9      	asrs	r1, r3, #7
 8002e20:	17d3      	asrs	r3, r2, #31
 8002e22:	1ac9      	subs	r1, r1, r3
 8002e24:	460b      	mov	r3, r1
 8002e26:	021b      	lsls	r3, r3, #8
 8002e28:	1a5b      	subs	r3, r3, r1
 8002e2a:	1ad1      	subs	r1, r2, r3
 8002e2c:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <HAL_UART_RxCpltCallback+0x50>)
 8002e2e:	6019      	str	r1, [r3, #0]
	HAL_UART_Receive_IT(myHuart, &rxChar, 1);
 8002e30:	4b09      	ldr	r3, [pc, #36]	; (8002e58 <HAL_UART_RxCpltCallback+0x60>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2201      	movs	r2, #1
 8002e36:	4905      	ldr	r1, [pc, #20]	; (8002e4c <HAL_UART_RxCpltCallback+0x54>)
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f004 f992 	bl	8007162 <HAL_UART_Receive_IT>
}
 8002e3e:	bf00      	nop
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	200002a8 	.word	0x200002a8
 8002e4c:	200003ab 	.word	0x200003ab
 8002e50:	200002ac 	.word	0x200002ac
 8002e54:	80808081 	.word	0x80808081
 8002e58:	200003ac 	.word	0x200003ac

08002e5c <getChar>:

//get charactor from buffer
uint8_t getChar(){
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
	uint8_t result;
	if(rxBufferGp == rxBufferPp) return 0;
 8002e62:	4b13      	ldr	r3, [pc, #76]	; (8002eb0 <getChar+0x54>)
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	4b13      	ldr	r3, [pc, #76]	; (8002eb4 <getChar+0x58>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d101      	bne.n	8002e72 <getChar+0x16>
 8002e6e:	2300      	movs	r3, #0
 8002e70:	e017      	b.n	8002ea2 <getChar+0x46>
	result = rxBuffer[rxBufferGp++];
 8002e72:	4b0f      	ldr	r3, [pc, #60]	; (8002eb0 <getChar+0x54>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	1c5a      	adds	r2, r3, #1
 8002e78:	490d      	ldr	r1, [pc, #52]	; (8002eb0 <getChar+0x54>)
 8002e7a:	600a      	str	r2, [r1, #0]
 8002e7c:	4a0e      	ldr	r2, [pc, #56]	; (8002eb8 <getChar+0x5c>)
 8002e7e:	5cd3      	ldrb	r3, [r2, r3]
 8002e80:	71fb      	strb	r3, [r7, #7]
	rxBufferGp %= rxBufferMax;
 8002e82:	4b0b      	ldr	r3, [pc, #44]	; (8002eb0 <getChar+0x54>)
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	4b0d      	ldr	r3, [pc, #52]	; (8002ebc <getChar+0x60>)
 8002e88:	fb83 1302 	smull	r1, r3, r3, r2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	11d9      	asrs	r1, r3, #7
 8002e90:	17d3      	asrs	r3, r2, #31
 8002e92:	1ac9      	subs	r1, r1, r3
 8002e94:	460b      	mov	r3, r1
 8002e96:	021b      	lsls	r3, r3, #8
 8002e98:	1a5b      	subs	r3, r3, r1
 8002e9a:	1ad1      	subs	r1, r2, r3
 8002e9c:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <getChar+0x54>)
 8002e9e:	6019      	str	r1, [r3, #0]
	return result;
 8002ea0:	79fb      	ldrb	r3, [r7, #7]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	200002a4 	.word	0x200002a4
 8002eb4:	200002a8 	.word	0x200002a8
 8002eb8:	200002ac 	.word	0x200002ac
 8002ebc:	80808081 	.word	0x80808081

08002ec0 <getMessage>:

char *getMessage(){
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
	static char msgBuffer[100];
	static int pos = 0;
	char ch = getChar();
 8002ec6:	f7ff ffc9 	bl	8002e5c <getChar>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	71fb      	strb	r3, [r7, #7]
	if(ch != 0){
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d014      	beq.n	8002efe <getMessage+0x3e>
		switch(ch){
 8002ed4:	79fb      	ldrb	r3, [r7, #7]
 8002ed6:	2b0a      	cmp	r3, #10
 8002ed8:	d108      	bne.n	8002eec <getMessage+0x2c>
			case '\n':
				memset(msgBuffer,0,100);
 8002eda:	2264      	movs	r2, #100	; 0x64
 8002edc:	2100      	movs	r1, #0
 8002ede:	480a      	ldr	r0, [pc, #40]	; (8002f08 <getMessage+0x48>)
 8002ee0:	f005 faea 	bl	80084b8 <memset>
				pos = 0;
 8002ee4:	4b09      	ldr	r3, [pc, #36]	; (8002f0c <getMessage+0x4c>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	601a      	str	r2, [r3, #0]
				break;
 8002eea:	e008      	b.n	8002efe <getMessage+0x3e>
			default:
				msgBuffer[pos++] = ch;
 8002eec:	4b07      	ldr	r3, [pc, #28]	; (8002f0c <getMessage+0x4c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	1c5a      	adds	r2, r3, #1
 8002ef2:	4906      	ldr	r1, [pc, #24]	; (8002f0c <getMessage+0x4c>)
 8002ef4:	600a      	str	r2, [r1, #0]
 8002ef6:	4904      	ldr	r1, [pc, #16]	; (8002f08 <getMessage+0x48>)
 8002ef8:	79fa      	ldrb	r2, [r7, #7]
 8002efa:	54ca      	strb	r2, [r1, r3]
				break;
 8002efc:	bf00      	nop
		}
	}
	return msgBuffer;
 8002efe:	4b02      	ldr	r3, [pc, #8]	; (8002f08 <getMessage+0x48>)
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	200003b0 	.word	0x200003b0
 8002f0c:	20000414 	.word	0x20000414

08002f10 <_write>:

int _write(int file, char *p, int len) {
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(myHuart, p, len, 10);
 8002f1c:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <_write+0x28>)
 8002f1e:	6818      	ldr	r0, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	230a      	movs	r3, #10
 8002f26:	68b9      	ldr	r1, [r7, #8]
 8002f28:	f004 f890 	bl	800704c <HAL_UART_Transmit>
	return len;
 8002f2c:	687b      	ldr	r3, [r7, #4]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	200003ac 	.word	0x200003ac

08002f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f40:	f7ff ff32 	bl	8002da8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f44:	480c      	ldr	r0, [pc, #48]	; (8002f78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f46:	490d      	ldr	r1, [pc, #52]	; (8002f7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f48:	4a0d      	ldr	r2, [pc, #52]	; (8002f80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f4c:	e002      	b.n	8002f54 <LoopCopyDataInit>

08002f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f52:	3304      	adds	r3, #4

08002f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f58:	d3f9      	bcc.n	8002f4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f5a:	4a0a      	ldr	r2, [pc, #40]	; (8002f84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f5c:	4c0a      	ldr	r4, [pc, #40]	; (8002f88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f60:	e001      	b.n	8002f66 <LoopFillZerobss>

08002f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f64:	3204      	adds	r2, #4

08002f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f68:	d3fb      	bcc.n	8002f62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f6a:	f005 fb0b 	bl	8008584 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f6e:	f7ff f977 	bl	8002260 <main>
  bx  lr    
 8002f72:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f7c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002f80:	0800955c 	.word	0x0800955c
  ldr r2, =_sbss
 8002f84:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002f88:	20000568 	.word	0x20000568

08002f8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f8c:	e7fe      	b.n	8002f8c <ADC_IRQHandler>
	...

08002f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f94:	4b0e      	ldr	r3, [pc, #56]	; (8002fd0 <HAL_Init+0x40>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a0d      	ldr	r2, [pc, #52]	; (8002fd0 <HAL_Init+0x40>)
 8002f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fa0:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <HAL_Init+0x40>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a0a      	ldr	r2, [pc, #40]	; (8002fd0 <HAL_Init+0x40>)
 8002fa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002faa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fac:	4b08      	ldr	r3, [pc, #32]	; (8002fd0 <HAL_Init+0x40>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a07      	ldr	r2, [pc, #28]	; (8002fd0 <HAL_Init+0x40>)
 8002fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fb8:	2003      	movs	r0, #3
 8002fba:	f000 f94f 	bl	800325c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fbe:	200f      	movs	r0, #15
 8002fc0:	f000 f808 	bl	8002fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fc4:	f7ff fc3e 	bl	8002844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40023c00 	.word	0x40023c00

08002fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fdc:	4b12      	ldr	r3, [pc, #72]	; (8003028 <HAL_InitTick+0x54>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4b12      	ldr	r3, [pc, #72]	; (800302c <HAL_InitTick+0x58>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 f967 	bl	80032c6 <HAL_SYSTICK_Config>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e00e      	b.n	8003020 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b0f      	cmp	r3, #15
 8003006:	d80a      	bhi.n	800301e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003008:	2200      	movs	r2, #0
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	f04f 30ff 	mov.w	r0, #4294967295
 8003010:	f000 f92f 	bl	8003272 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003014:	4a06      	ldr	r2, [pc, #24]	; (8003030 <HAL_InitTick+0x5c>)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800301a:	2300      	movs	r3, #0
 800301c:	e000      	b.n	8003020 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
}
 8003020:	4618      	mov	r0, r3
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	20000004 	.word	0x20000004
 800302c:	2000000c 	.word	0x2000000c
 8003030:	20000008 	.word	0x20000008

08003034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003038:	4b06      	ldr	r3, [pc, #24]	; (8003054 <HAL_IncTick+0x20>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	461a      	mov	r2, r3
 800303e:	4b06      	ldr	r3, [pc, #24]	; (8003058 <HAL_IncTick+0x24>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4413      	add	r3, r2
 8003044:	4a04      	ldr	r2, [pc, #16]	; (8003058 <HAL_IncTick+0x24>)
 8003046:	6013      	str	r3, [r2, #0]
}
 8003048:	bf00      	nop
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	2000000c 	.word	0x2000000c
 8003058:	20000418 	.word	0x20000418

0800305c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  return uwTick;
 8003060:	4b03      	ldr	r3, [pc, #12]	; (8003070 <HAL_GetTick+0x14>)
 8003062:	681b      	ldr	r3, [r3, #0]
}
 8003064:	4618      	mov	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	20000418 	.word	0x20000418

08003074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800307c:	f7ff ffee 	bl	800305c <HAL_GetTick>
 8003080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308c:	d005      	beq.n	800309a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800308e:	4b0a      	ldr	r3, [pc, #40]	; (80030b8 <HAL_Delay+0x44>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	461a      	mov	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	4413      	add	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800309a:	bf00      	nop
 800309c:	f7ff ffde 	bl	800305c <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d8f7      	bhi.n	800309c <HAL_Delay+0x28>
  {
  }
}
 80030ac:	bf00      	nop
 80030ae:	bf00      	nop
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	2000000c 	.word	0x2000000c

080030bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030cc:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <__NVIC_SetPriorityGrouping+0x44>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030d8:	4013      	ands	r3, r2
 80030da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ee:	4a04      	ldr	r2, [pc, #16]	; (8003100 <__NVIC_SetPriorityGrouping+0x44>)
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	60d3      	str	r3, [r2, #12]
}
 80030f4:	bf00      	nop
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	e000ed00 	.word	0xe000ed00

08003104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003108:	4b04      	ldr	r3, [pc, #16]	; (800311c <__NVIC_GetPriorityGrouping+0x18>)
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	0a1b      	lsrs	r3, r3, #8
 800310e:	f003 0307 	and.w	r3, r3, #7
}
 8003112:	4618      	mov	r0, r3
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	e000ed00 	.word	0xe000ed00

08003120 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	4603      	mov	r3, r0
 8003128:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800312a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312e:	2b00      	cmp	r3, #0
 8003130:	db0b      	blt.n	800314a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003132:	79fb      	ldrb	r3, [r7, #7]
 8003134:	f003 021f 	and.w	r2, r3, #31
 8003138:	4907      	ldr	r1, [pc, #28]	; (8003158 <__NVIC_EnableIRQ+0x38>)
 800313a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313e:	095b      	lsrs	r3, r3, #5
 8003140:	2001      	movs	r0, #1
 8003142:	fa00 f202 	lsl.w	r2, r0, r2
 8003146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	e000e100 	.word	0xe000e100

0800315c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	4603      	mov	r3, r0
 8003164:	6039      	str	r1, [r7, #0]
 8003166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316c:	2b00      	cmp	r3, #0
 800316e:	db0a      	blt.n	8003186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	b2da      	uxtb	r2, r3
 8003174:	490c      	ldr	r1, [pc, #48]	; (80031a8 <__NVIC_SetPriority+0x4c>)
 8003176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317a:	0112      	lsls	r2, r2, #4
 800317c:	b2d2      	uxtb	r2, r2
 800317e:	440b      	add	r3, r1
 8003180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003184:	e00a      	b.n	800319c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	b2da      	uxtb	r2, r3
 800318a:	4908      	ldr	r1, [pc, #32]	; (80031ac <__NVIC_SetPriority+0x50>)
 800318c:	79fb      	ldrb	r3, [r7, #7]
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	3b04      	subs	r3, #4
 8003194:	0112      	lsls	r2, r2, #4
 8003196:	b2d2      	uxtb	r2, r2
 8003198:	440b      	add	r3, r1
 800319a:	761a      	strb	r2, [r3, #24]
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	e000e100 	.word	0xe000e100
 80031ac:	e000ed00 	.word	0xe000ed00

080031b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b089      	sub	sp, #36	; 0x24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f1c3 0307 	rsb	r3, r3, #7
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	bf28      	it	cs
 80031ce:	2304      	movcs	r3, #4
 80031d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	3304      	adds	r3, #4
 80031d6:	2b06      	cmp	r3, #6
 80031d8:	d902      	bls.n	80031e0 <NVIC_EncodePriority+0x30>
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	3b03      	subs	r3, #3
 80031de:	e000      	b.n	80031e2 <NVIC_EncodePriority+0x32>
 80031e0:	2300      	movs	r3, #0
 80031e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031e4:	f04f 32ff 	mov.w	r2, #4294967295
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	43da      	mvns	r2, r3
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	401a      	ands	r2, r3
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031f8:	f04f 31ff 	mov.w	r1, #4294967295
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003202:	43d9      	mvns	r1, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003208:	4313      	orrs	r3, r2
         );
}
 800320a:	4618      	mov	r0, r3
 800320c:	3724      	adds	r7, #36	; 0x24
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
	...

08003218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3b01      	subs	r3, #1
 8003224:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003228:	d301      	bcc.n	800322e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800322a:	2301      	movs	r3, #1
 800322c:	e00f      	b.n	800324e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800322e:	4a0a      	ldr	r2, [pc, #40]	; (8003258 <SysTick_Config+0x40>)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3b01      	subs	r3, #1
 8003234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003236:	210f      	movs	r1, #15
 8003238:	f04f 30ff 	mov.w	r0, #4294967295
 800323c:	f7ff ff8e 	bl	800315c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003240:	4b05      	ldr	r3, [pc, #20]	; (8003258 <SysTick_Config+0x40>)
 8003242:	2200      	movs	r2, #0
 8003244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003246:	4b04      	ldr	r3, [pc, #16]	; (8003258 <SysTick_Config+0x40>)
 8003248:	2207      	movs	r2, #7
 800324a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	e000e010 	.word	0xe000e010

0800325c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f7ff ff29 	bl	80030bc <__NVIC_SetPriorityGrouping>
}
 800326a:	bf00      	nop
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003272:	b580      	push	{r7, lr}
 8003274:	b086      	sub	sp, #24
 8003276:	af00      	add	r7, sp, #0
 8003278:	4603      	mov	r3, r0
 800327a:	60b9      	str	r1, [r7, #8]
 800327c:	607a      	str	r2, [r7, #4]
 800327e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003280:	2300      	movs	r3, #0
 8003282:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003284:	f7ff ff3e 	bl	8003104 <__NVIC_GetPriorityGrouping>
 8003288:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	68b9      	ldr	r1, [r7, #8]
 800328e:	6978      	ldr	r0, [r7, #20]
 8003290:	f7ff ff8e 	bl	80031b0 <NVIC_EncodePriority>
 8003294:	4602      	mov	r2, r0
 8003296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800329a:	4611      	mov	r1, r2
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff ff5d 	bl	800315c <__NVIC_SetPriority>
}
 80032a2:	bf00      	nop
 80032a4:	3718      	adds	r7, #24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b082      	sub	sp, #8
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	4603      	mov	r3, r0
 80032b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff ff31 	bl	8003120 <__NVIC_EnableIRQ>
}
 80032be:	bf00      	nop
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b082      	sub	sp, #8
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7ff ffa2 	bl	8003218 <SysTick_Config>
 80032d4:	4603      	mov	r3, r0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b084      	sub	sp, #16
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ea:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80032ec:	f7ff feb6 	bl	800305c <HAL_GetTick>
 80032f0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d008      	beq.n	8003310 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2280      	movs	r2, #128	; 0x80
 8003302:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e052      	b.n	80033b6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0216 	bic.w	r2, r2, #22
 800331e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	695a      	ldr	r2, [r3, #20]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800332e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003334:	2b00      	cmp	r3, #0
 8003336:	d103      	bne.n	8003340 <HAL_DMA_Abort+0x62>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800333c:	2b00      	cmp	r3, #0
 800333e:	d007      	beq.n	8003350 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0208 	bic.w	r2, r2, #8
 800334e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0201 	bic.w	r2, r2, #1
 800335e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003360:	e013      	b.n	800338a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003362:	f7ff fe7b 	bl	800305c <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b05      	cmp	r3, #5
 800336e:	d90c      	bls.n	800338a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2220      	movs	r2, #32
 8003374:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2203      	movs	r2, #3
 800337a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e015      	b.n	80033b6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1e4      	bne.n	8003362 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339c:	223f      	movs	r2, #63	; 0x3f
 800339e:	409a      	lsls	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d004      	beq.n	80033dc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2280      	movs	r2, #128	; 0x80
 80033d6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e00c      	b.n	80033f6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2205      	movs	r2, #5
 80033e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 0201 	bic.w	r2, r2, #1
 80033f2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
	...

08003404 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003404:	b480      	push	{r7}
 8003406:	b089      	sub	sp, #36	; 0x24
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800340e:	2300      	movs	r3, #0
 8003410:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003412:	2300      	movs	r3, #0
 8003414:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003416:	2300      	movs	r3, #0
 8003418:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800341a:	2300      	movs	r3, #0
 800341c:	61fb      	str	r3, [r7, #28]
 800341e:	e159      	b.n	80036d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003420:	2201      	movs	r2, #1
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	4013      	ands	r3, r2
 8003432:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	429a      	cmp	r2, r3
 800343a:	f040 8148 	bne.w	80036ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	2b01      	cmp	r3, #1
 8003448:	d005      	beq.n	8003456 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003452:	2b02      	cmp	r3, #2
 8003454:	d130      	bne.n	80034b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	2203      	movs	r2, #3
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	43db      	mvns	r3, r3
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	4013      	ands	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	68da      	ldr	r2, [r3, #12]
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	4313      	orrs	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800348c:	2201      	movs	r2, #1
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	43db      	mvns	r3, r3
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4013      	ands	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	091b      	lsrs	r3, r3, #4
 80034a2:	f003 0201 	and.w	r2, r3, #1
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f003 0303 	and.w	r3, r3, #3
 80034c0:	2b03      	cmp	r3, #3
 80034c2:	d017      	beq.n	80034f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	2203      	movs	r2, #3
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	43db      	mvns	r3, r3
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4013      	ands	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 0303 	and.w	r3, r3, #3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d123      	bne.n	8003548 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	08da      	lsrs	r2, r3, #3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3208      	adds	r2, #8
 8003508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800350c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	220f      	movs	r2, #15
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	43db      	mvns	r3, r3
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4013      	ands	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	691a      	ldr	r2, [r3, #16]
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	4313      	orrs	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	08da      	lsrs	r2, r3, #3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	3208      	adds	r2, #8
 8003542:	69b9      	ldr	r1, [r7, #24]
 8003544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	2203      	movs	r2, #3
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	43db      	mvns	r3, r3
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	4013      	ands	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f003 0203 	and.w	r2, r3, #3
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	4313      	orrs	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 80a2 	beq.w	80036ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800358a:	2300      	movs	r3, #0
 800358c:	60fb      	str	r3, [r7, #12]
 800358e:	4b57      	ldr	r3, [pc, #348]	; (80036ec <HAL_GPIO_Init+0x2e8>)
 8003590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003592:	4a56      	ldr	r2, [pc, #344]	; (80036ec <HAL_GPIO_Init+0x2e8>)
 8003594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003598:	6453      	str	r3, [r2, #68]	; 0x44
 800359a:	4b54      	ldr	r3, [pc, #336]	; (80036ec <HAL_GPIO_Init+0x2e8>)
 800359c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035a2:	60fb      	str	r3, [r7, #12]
 80035a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035a6:	4a52      	ldr	r2, [pc, #328]	; (80036f0 <HAL_GPIO_Init+0x2ec>)
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	089b      	lsrs	r3, r3, #2
 80035ac:	3302      	adds	r3, #2
 80035ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	f003 0303 	and.w	r3, r3, #3
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	220f      	movs	r2, #15
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	43db      	mvns	r3, r3
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	4013      	ands	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a49      	ldr	r2, [pc, #292]	; (80036f4 <HAL_GPIO_Init+0x2f0>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d019      	beq.n	8003606 <HAL_GPIO_Init+0x202>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a48      	ldr	r2, [pc, #288]	; (80036f8 <HAL_GPIO_Init+0x2f4>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d013      	beq.n	8003602 <HAL_GPIO_Init+0x1fe>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a47      	ldr	r2, [pc, #284]	; (80036fc <HAL_GPIO_Init+0x2f8>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d00d      	beq.n	80035fe <HAL_GPIO_Init+0x1fa>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a46      	ldr	r2, [pc, #280]	; (8003700 <HAL_GPIO_Init+0x2fc>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d007      	beq.n	80035fa <HAL_GPIO_Init+0x1f6>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a45      	ldr	r2, [pc, #276]	; (8003704 <HAL_GPIO_Init+0x300>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d101      	bne.n	80035f6 <HAL_GPIO_Init+0x1f2>
 80035f2:	2304      	movs	r3, #4
 80035f4:	e008      	b.n	8003608 <HAL_GPIO_Init+0x204>
 80035f6:	2307      	movs	r3, #7
 80035f8:	e006      	b.n	8003608 <HAL_GPIO_Init+0x204>
 80035fa:	2303      	movs	r3, #3
 80035fc:	e004      	b.n	8003608 <HAL_GPIO_Init+0x204>
 80035fe:	2302      	movs	r3, #2
 8003600:	e002      	b.n	8003608 <HAL_GPIO_Init+0x204>
 8003602:	2301      	movs	r3, #1
 8003604:	e000      	b.n	8003608 <HAL_GPIO_Init+0x204>
 8003606:	2300      	movs	r3, #0
 8003608:	69fa      	ldr	r2, [r7, #28]
 800360a:	f002 0203 	and.w	r2, r2, #3
 800360e:	0092      	lsls	r2, r2, #2
 8003610:	4093      	lsls	r3, r2
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	4313      	orrs	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003618:	4935      	ldr	r1, [pc, #212]	; (80036f0 <HAL_GPIO_Init+0x2ec>)
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	089b      	lsrs	r3, r3, #2
 800361e:	3302      	adds	r3, #2
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003626:	4b38      	ldr	r3, [pc, #224]	; (8003708 <HAL_GPIO_Init+0x304>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	43db      	mvns	r3, r3
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	4013      	ands	r3, r2
 8003634:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	4313      	orrs	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800364a:	4a2f      	ldr	r2, [pc, #188]	; (8003708 <HAL_GPIO_Init+0x304>)
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003650:	4b2d      	ldr	r3, [pc, #180]	; (8003708 <HAL_GPIO_Init+0x304>)
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	43db      	mvns	r3, r3
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	4013      	ands	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d003      	beq.n	8003674 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	4313      	orrs	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003674:	4a24      	ldr	r2, [pc, #144]	; (8003708 <HAL_GPIO_Init+0x304>)
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800367a:	4b23      	ldr	r3, [pc, #140]	; (8003708 <HAL_GPIO_Init+0x304>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	43db      	mvns	r3, r3
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	4013      	ands	r3, r2
 8003688:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	4313      	orrs	r3, r2
 800369c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800369e:	4a1a      	ldr	r2, [pc, #104]	; (8003708 <HAL_GPIO_Init+0x304>)
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036a4:	4b18      	ldr	r3, [pc, #96]	; (8003708 <HAL_GPIO_Init+0x304>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	43db      	mvns	r3, r3
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	4013      	ands	r3, r2
 80036b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d003      	beq.n	80036c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036c8:	4a0f      	ldr	r2, [pc, #60]	; (8003708 <HAL_GPIO_Init+0x304>)
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	3301      	adds	r3, #1
 80036d2:	61fb      	str	r3, [r7, #28]
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	2b0f      	cmp	r3, #15
 80036d8:	f67f aea2 	bls.w	8003420 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036dc:	bf00      	nop
 80036de:	bf00      	nop
 80036e0:	3724      	adds	r7, #36	; 0x24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	40023800 	.word	0x40023800
 80036f0:	40013800 	.word	0x40013800
 80036f4:	40020000 	.word	0x40020000
 80036f8:	40020400 	.word	0x40020400
 80036fc:	40020800 	.word	0x40020800
 8003700:	40020c00 	.word	0x40020c00
 8003704:	40021000 	.word	0x40021000
 8003708:	40013c00 	.word	0x40013c00

0800370c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	460b      	mov	r3, r1
 8003716:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	691a      	ldr	r2, [r3, #16]
 800371c:	887b      	ldrh	r3, [r7, #2]
 800371e:	4013      	ands	r3, r2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d002      	beq.n	800372a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003724:	2301      	movs	r3, #1
 8003726:	73fb      	strb	r3, [r7, #15]
 8003728:	e001      	b.n	800372e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800372a:	2300      	movs	r3, #0
 800372c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800372e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	460b      	mov	r3, r1
 8003746:	807b      	strh	r3, [r7, #2]
 8003748:	4613      	mov	r3, r2
 800374a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800374c:	787b      	ldrb	r3, [r7, #1]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003752:	887a      	ldrh	r2, [r7, #2]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003758:	e003      	b.n	8003762 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800375a:	887b      	ldrh	r3, [r7, #2]
 800375c:	041a      	lsls	r2, r3, #16
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	619a      	str	r2, [r3, #24]
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
	...

08003770 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e12b      	b.n	80039da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d106      	bne.n	800379c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7ff f87c 	bl	8002894 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2224      	movs	r2, #36	; 0x24
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0201 	bic.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037d4:	f002 f8a0 	bl	8005918 <HAL_RCC_GetPCLK1Freq>
 80037d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	4a81      	ldr	r2, [pc, #516]	; (80039e4 <HAL_I2C_Init+0x274>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d807      	bhi.n	80037f4 <HAL_I2C_Init+0x84>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	4a80      	ldr	r2, [pc, #512]	; (80039e8 <HAL_I2C_Init+0x278>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	bf94      	ite	ls
 80037ec:	2301      	movls	r3, #1
 80037ee:	2300      	movhi	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	e006      	b.n	8003802 <HAL_I2C_Init+0x92>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4a7d      	ldr	r2, [pc, #500]	; (80039ec <HAL_I2C_Init+0x27c>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	bf94      	ite	ls
 80037fc:	2301      	movls	r3, #1
 80037fe:	2300      	movhi	r3, #0
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e0e7      	b.n	80039da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	4a78      	ldr	r2, [pc, #480]	; (80039f0 <HAL_I2C_Init+0x280>)
 800380e:	fba2 2303 	umull	r2, r3, r2, r3
 8003812:	0c9b      	lsrs	r3, r3, #18
 8003814:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	430a      	orrs	r2, r1
 8003828:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	4a6a      	ldr	r2, [pc, #424]	; (80039e4 <HAL_I2C_Init+0x274>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d802      	bhi.n	8003844 <HAL_I2C_Init+0xd4>
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	3301      	adds	r3, #1
 8003842:	e009      	b.n	8003858 <HAL_I2C_Init+0xe8>
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800384a:	fb02 f303 	mul.w	r3, r2, r3
 800384e:	4a69      	ldr	r2, [pc, #420]	; (80039f4 <HAL_I2C_Init+0x284>)
 8003850:	fba2 2303 	umull	r2, r3, r2, r3
 8003854:	099b      	lsrs	r3, r3, #6
 8003856:	3301      	adds	r3, #1
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6812      	ldr	r2, [r2, #0]
 800385c:	430b      	orrs	r3, r1
 800385e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	69db      	ldr	r3, [r3, #28]
 8003866:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800386a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	495c      	ldr	r1, [pc, #368]	; (80039e4 <HAL_I2C_Init+0x274>)
 8003874:	428b      	cmp	r3, r1
 8003876:	d819      	bhi.n	80038ac <HAL_I2C_Init+0x13c>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	1e59      	subs	r1, r3, #1
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	fbb1 f3f3 	udiv	r3, r1, r3
 8003886:	1c59      	adds	r1, r3, #1
 8003888:	f640 73fc 	movw	r3, #4092	; 0xffc
 800388c:	400b      	ands	r3, r1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00a      	beq.n	80038a8 <HAL_I2C_Init+0x138>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	1e59      	subs	r1, r3, #1
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	fbb1 f3f3 	udiv	r3, r1, r3
 80038a0:	3301      	adds	r3, #1
 80038a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038a6:	e051      	b.n	800394c <HAL_I2C_Init+0x1dc>
 80038a8:	2304      	movs	r3, #4
 80038aa:	e04f      	b.n	800394c <HAL_I2C_Init+0x1dc>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d111      	bne.n	80038d8 <HAL_I2C_Init+0x168>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	1e58      	subs	r0, r3, #1
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6859      	ldr	r1, [r3, #4]
 80038bc:	460b      	mov	r3, r1
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	440b      	add	r3, r1
 80038c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80038c6:	3301      	adds	r3, #1
 80038c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	bf0c      	ite	eq
 80038d0:	2301      	moveq	r3, #1
 80038d2:	2300      	movne	r3, #0
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	e012      	b.n	80038fe <HAL_I2C_Init+0x18e>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	1e58      	subs	r0, r3, #1
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6859      	ldr	r1, [r3, #4]
 80038e0:	460b      	mov	r3, r1
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	0099      	lsls	r1, r3, #2
 80038e8:	440b      	add	r3, r1
 80038ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ee:	3301      	adds	r3, #1
 80038f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	bf0c      	ite	eq
 80038f8:	2301      	moveq	r3, #1
 80038fa:	2300      	movne	r3, #0
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <HAL_I2C_Init+0x196>
 8003902:	2301      	movs	r3, #1
 8003904:	e022      	b.n	800394c <HAL_I2C_Init+0x1dc>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10e      	bne.n	800392c <HAL_I2C_Init+0x1bc>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	1e58      	subs	r0, r3, #1
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6859      	ldr	r1, [r3, #4]
 8003916:	460b      	mov	r3, r1
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	440b      	add	r3, r1
 800391c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003920:	3301      	adds	r3, #1
 8003922:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800392a:	e00f      	b.n	800394c <HAL_I2C_Init+0x1dc>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	1e58      	subs	r0, r3, #1
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6859      	ldr	r1, [r3, #4]
 8003934:	460b      	mov	r3, r1
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	440b      	add	r3, r1
 800393a:	0099      	lsls	r1, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003942:	3301      	adds	r3, #1
 8003944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003948:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800394c:	6879      	ldr	r1, [r7, #4]
 800394e:	6809      	ldr	r1, [r1, #0]
 8003950:	4313      	orrs	r3, r2
 8003952:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	69da      	ldr	r2, [r3, #28]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800397a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	6911      	ldr	r1, [r2, #16]
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	68d2      	ldr	r2, [r2, #12]
 8003986:	4311      	orrs	r1, r2
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	6812      	ldr	r2, [r2, #0]
 800398c:	430b      	orrs	r3, r1
 800398e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	695a      	ldr	r2, [r3, #20]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f042 0201 	orr.w	r2, r2, #1
 80039ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2220      	movs	r2, #32
 80039c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	000186a0 	.word	0x000186a0
 80039e8:	001e847f 	.word	0x001e847f
 80039ec:	003d08ff 	.word	0x003d08ff
 80039f0:	431bde83 	.word	0x431bde83
 80039f4:	10624dd3 	.word	0x10624dd3

080039f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b088      	sub	sp, #32
 80039fc:	af02      	add	r7, sp, #8
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	607a      	str	r2, [r7, #4]
 8003a02:	461a      	mov	r2, r3
 8003a04:	460b      	mov	r3, r1
 8003a06:	817b      	strh	r3, [r7, #10]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a0c:	f7ff fb26 	bl	800305c <HAL_GetTick>
 8003a10:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b20      	cmp	r3, #32
 8003a1c:	f040 80e0 	bne.w	8003be0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	2319      	movs	r3, #25
 8003a26:	2201      	movs	r2, #1
 8003a28:	4970      	ldr	r1, [pc, #448]	; (8003bec <HAL_I2C_Master_Transmit+0x1f4>)
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f001 f90e 	bl	8004c4c <I2C_WaitOnFlagUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003a36:	2302      	movs	r3, #2
 8003a38:	e0d3      	b.n	8003be2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d101      	bne.n	8003a48 <HAL_I2C_Master_Transmit+0x50>
 8003a44:	2302      	movs	r3, #2
 8003a46:	e0cc      	b.n	8003be2 <HAL_I2C_Master_Transmit+0x1ea>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d007      	beq.n	8003a6e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f042 0201 	orr.w	r2, r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a7c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2221      	movs	r2, #33	; 0x21
 8003a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2210      	movs	r2, #16
 8003a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	893a      	ldrh	r2, [r7, #8]
 8003a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	4a50      	ldr	r2, [pc, #320]	; (8003bf0 <HAL_I2C_Master_Transmit+0x1f8>)
 8003aae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ab0:	8979      	ldrh	r1, [r7, #10]
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	6a3a      	ldr	r2, [r7, #32]
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 fdfa 	bl	80046b0 <I2C_MasterRequestWrite>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e08d      	b.n	8003be2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	613b      	str	r3, [r7, #16]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	613b      	str	r3, [r7, #16]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	613b      	str	r3, [r7, #16]
 8003ada:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003adc:	e066      	b.n	8003bac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	6a39      	ldr	r1, [r7, #32]
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f001 f9cc 	bl	8004e80 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00d      	beq.n	8003b0a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	d107      	bne.n	8003b06 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e06b      	b.n	8003be2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0e:	781a      	ldrb	r2, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1a:	1c5a      	adds	r2, r3, #1
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	2b04      	cmp	r3, #4
 8003b46:	d11b      	bne.n	8003b80 <HAL_I2C_Master_Transmit+0x188>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d017      	beq.n	8003b80 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	781a      	ldrb	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	1c5a      	adds	r2, r3, #1
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	6a39      	ldr	r1, [r7, #32]
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f001 f9c3 	bl	8004f10 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00d      	beq.n	8003bac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b94:	2b04      	cmp	r3, #4
 8003b96:	d107      	bne.n	8003ba8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ba6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e01a      	b.n	8003be2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d194      	bne.n	8003ade <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	e000      	b.n	8003be2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003be0:	2302      	movs	r3, #2
  }
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3718      	adds	r7, #24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	00100002 	.word	0x00100002
 8003bf0:	ffff0000 	.word	0xffff0000

08003bf4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b08c      	sub	sp, #48	; 0x30
 8003bf8:	af02      	add	r7, sp, #8
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	607a      	str	r2, [r7, #4]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	460b      	mov	r3, r1
 8003c02:	817b      	strh	r3, [r7, #10]
 8003c04:	4613      	mov	r3, r2
 8003c06:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c08:	f7ff fa28 	bl	800305c <HAL_GetTick>
 8003c0c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b20      	cmp	r3, #32
 8003c18:	f040 8217 	bne.w	800404a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	2319      	movs	r3, #25
 8003c22:	2201      	movs	r2, #1
 8003c24:	497c      	ldr	r1, [pc, #496]	; (8003e18 <HAL_I2C_Master_Receive+0x224>)
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f001 f810 	bl	8004c4c <I2C_WaitOnFlagUntilTimeout>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003c32:	2302      	movs	r3, #2
 8003c34:	e20a      	b.n	800404c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d101      	bne.n	8003c44 <HAL_I2C_Master_Receive+0x50>
 8003c40:	2302      	movs	r3, #2
 8003c42:	e203      	b.n	800404c <HAL_I2C_Master_Receive+0x458>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d007      	beq.n	8003c6a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f042 0201 	orr.w	r2, r2, #1
 8003c68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2222      	movs	r2, #34	; 0x22
 8003c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2210      	movs	r2, #16
 8003c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	893a      	ldrh	r2, [r7, #8]
 8003c9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	4a5c      	ldr	r2, [pc, #368]	; (8003e1c <HAL_I2C_Master_Receive+0x228>)
 8003caa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003cac:	8979      	ldrh	r1, [r7, #10]
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 fd7e 	bl	80047b4 <I2C_MasterRequestRead>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e1c4      	b.n	800404c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d113      	bne.n	8003cf2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cca:	2300      	movs	r3, #0
 8003ccc:	623b      	str	r3, [r7, #32]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	623b      	str	r3, [r7, #32]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	623b      	str	r3, [r7, #32]
 8003cde:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	e198      	b.n	8004024 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d11b      	bne.n	8003d32 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	61fb      	str	r3, [r7, #28]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	61fb      	str	r3, [r7, #28]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	61fb      	str	r3, [r7, #28]
 8003d1e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	e178      	b.n	8004024 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d11b      	bne.n	8003d72 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d48:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	61bb      	str	r3, [r7, #24]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	61bb      	str	r3, [r7, #24]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	61bb      	str	r3, [r7, #24]
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	e158      	b.n	8004024 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d82:	2300      	movs	r3, #0
 8003d84:	617b      	str	r3, [r7, #20]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	617b      	str	r3, [r7, #20]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	617b      	str	r3, [r7, #20]
 8003d96:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d98:	e144      	b.n	8004024 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9e:	2b03      	cmp	r3, #3
 8003da0:	f200 80f1 	bhi.w	8003f86 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d123      	bne.n	8003df4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f001 f8f5 	bl	8004fa0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e145      	b.n	800404c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	691a      	ldr	r2, [r3, #16]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd2:	1c5a      	adds	r2, r3, #1
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	3b01      	subs	r3, #1
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003df2:	e117      	b.n	8004024 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d14e      	bne.n	8003e9a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e02:	2200      	movs	r2, #0
 8003e04:	4906      	ldr	r1, [pc, #24]	; (8003e20 <HAL_I2C_Master_Receive+0x22c>)
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f000 ff20 	bl	8004c4c <I2C_WaitOnFlagUntilTimeout>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d008      	beq.n	8003e24 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e11a      	b.n	800404c <HAL_I2C_Master_Receive+0x458>
 8003e16:	bf00      	nop
 8003e18:	00100002 	.word	0x00100002
 8003e1c:	ffff0000 	.word	0xffff0000
 8003e20:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	691a      	ldr	r2, [r3, #16]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	b2d2      	uxtb	r2, r2
 8003e40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	1c5a      	adds	r2, r3, #1
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e50:	3b01      	subs	r3, #1
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	691a      	ldr	r2, [r3, #16]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	b2d2      	uxtb	r2, r2
 8003e72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	1c5a      	adds	r2, r3, #1
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e82:	3b01      	subs	r3, #1
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	3b01      	subs	r3, #1
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e98:	e0c4      	b.n	8004024 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	496c      	ldr	r1, [pc, #432]	; (8004054 <HAL_I2C_Master_Receive+0x460>)
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f000 fed1 	bl	8004c4c <I2C_WaitOnFlagUntilTimeout>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e0cb      	b.n	800404c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ec2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	691a      	ldr	r2, [r3, #16]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed6:	1c5a      	adds	r2, r3, #1
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efc:	2200      	movs	r2, #0
 8003efe:	4955      	ldr	r1, [pc, #340]	; (8004054 <HAL_I2C_Master_Receive+0x460>)
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 fea3 	bl	8004c4c <I2C_WaitOnFlagUntilTimeout>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e09d      	b.n	800404c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	691a      	ldr	r2, [r3, #16]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	b2d2      	uxtb	r2, r2
 8003f2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	1c5a      	adds	r2, r3, #1
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	691a      	ldr	r2, [r3, #16]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	b2d2      	uxtb	r2, r2
 8003f5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	1c5a      	adds	r2, r3, #1
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f84:	e04e      	b.n	8004024 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f001 f808 	bl	8004fa0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e058      	b.n	800404c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	691a      	ldr	r2, [r3, #16]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa4:	b2d2      	uxtb	r2, r2
 8003fa6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	1c5a      	adds	r2, r3, #1
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	f003 0304 	and.w	r3, r3, #4
 8003fd6:	2b04      	cmp	r3, #4
 8003fd8:	d124      	bne.n	8004024 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fde:	2b03      	cmp	r3, #3
 8003fe0:	d107      	bne.n	8003ff2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ff0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	691a      	ldr	r2, [r3, #16]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffc:	b2d2      	uxtb	r2, r2
 8003ffe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	1c5a      	adds	r2, r3, #1
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800400e:	3b01      	subs	r3, #1
 8004010:	b29a      	uxth	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800401a:	b29b      	uxth	r3, r3
 800401c:	3b01      	subs	r3, #1
 800401e:	b29a      	uxth	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004028:	2b00      	cmp	r3, #0
 800402a:	f47f aeb6 	bne.w	8003d9a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2220      	movs	r2, #32
 8004032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004046:	2300      	movs	r3, #0
 8004048:	e000      	b.n	800404c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800404a:	2302      	movs	r3, #2
  }
}
 800404c:	4618      	mov	r0, r3
 800404e:	3728      	adds	r7, #40	; 0x28
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	00010004 	.word	0x00010004

08004058 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b088      	sub	sp, #32
 800405c:	af02      	add	r7, sp, #8
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	4608      	mov	r0, r1
 8004062:	4611      	mov	r1, r2
 8004064:	461a      	mov	r2, r3
 8004066:	4603      	mov	r3, r0
 8004068:	817b      	strh	r3, [r7, #10]
 800406a:	460b      	mov	r3, r1
 800406c:	813b      	strh	r3, [r7, #8]
 800406e:	4613      	mov	r3, r2
 8004070:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004072:	f7fe fff3 	bl	800305c <HAL_GetTick>
 8004076:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b20      	cmp	r3, #32
 8004082:	f040 80d9 	bne.w	8004238 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	2319      	movs	r3, #25
 800408c:	2201      	movs	r2, #1
 800408e:	496d      	ldr	r1, [pc, #436]	; (8004244 <HAL_I2C_Mem_Write+0x1ec>)
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f000 fddb 	bl	8004c4c <I2C_WaitOnFlagUntilTimeout>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800409c:	2302      	movs	r3, #2
 800409e:	e0cc      	b.n	800423a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d101      	bne.n	80040ae <HAL_I2C_Mem_Write+0x56>
 80040aa:	2302      	movs	r3, #2
 80040ac:	e0c5      	b.n	800423a <HAL_I2C_Mem_Write+0x1e2>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d007      	beq.n	80040d4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f042 0201 	orr.w	r2, r2, #1
 80040d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2221      	movs	r2, #33	; 0x21
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2240      	movs	r2, #64	; 0x40
 80040f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6a3a      	ldr	r2, [r7, #32]
 80040fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004104:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800410a:	b29a      	uxth	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4a4d      	ldr	r2, [pc, #308]	; (8004248 <HAL_I2C_Mem_Write+0x1f0>)
 8004114:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004116:	88f8      	ldrh	r0, [r7, #6]
 8004118:	893a      	ldrh	r2, [r7, #8]
 800411a:	8979      	ldrh	r1, [r7, #10]
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	9301      	str	r3, [sp, #4]
 8004120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	4603      	mov	r3, r0
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 fc12 	bl	8004950 <I2C_RequestMemoryWrite>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d052      	beq.n	80041d8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e081      	b.n	800423a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 fea0 	bl	8004e80 <I2C_WaitOnTXEFlagUntilTimeout>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00d      	beq.n	8004162 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	2b04      	cmp	r3, #4
 800414c:	d107      	bne.n	800415e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800415c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e06b      	b.n	800423a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004166:	781a      	ldrb	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004172:	1c5a      	adds	r2, r3, #1
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800417c:	3b01      	subs	r3, #1
 800417e:	b29a      	uxth	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004188:	b29b      	uxth	r3, r3
 800418a:	3b01      	subs	r3, #1
 800418c:	b29a      	uxth	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b04      	cmp	r3, #4
 800419e:	d11b      	bne.n	80041d8 <HAL_I2C_Mem_Write+0x180>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d017      	beq.n	80041d8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ac:	781a      	ldrb	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1aa      	bne.n	8004136 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f000 fe93 	bl	8004f10 <I2C_WaitOnBTFFlagUntilTimeout>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00d      	beq.n	800420c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f4:	2b04      	cmp	r3, #4
 80041f6:	d107      	bne.n	8004208 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004206:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e016      	b.n	800423a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800421a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2220      	movs	r2, #32
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004234:	2300      	movs	r3, #0
 8004236:	e000      	b.n	800423a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004238:	2302      	movs	r3, #2
  }
}
 800423a:	4618      	mov	r0, r3
 800423c:	3718      	adds	r7, #24
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	00100002 	.word	0x00100002
 8004248:	ffff0000 	.word	0xffff0000

0800424c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b08c      	sub	sp, #48	; 0x30
 8004250:	af02      	add	r7, sp, #8
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	4608      	mov	r0, r1
 8004256:	4611      	mov	r1, r2
 8004258:	461a      	mov	r2, r3
 800425a:	4603      	mov	r3, r0
 800425c:	817b      	strh	r3, [r7, #10]
 800425e:	460b      	mov	r3, r1
 8004260:	813b      	strh	r3, [r7, #8]
 8004262:	4613      	mov	r3, r2
 8004264:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004266:	f7fe fef9 	bl	800305c <HAL_GetTick>
 800426a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b20      	cmp	r3, #32
 8004276:	f040 8214 	bne.w	80046a2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	2319      	movs	r3, #25
 8004280:	2201      	movs	r2, #1
 8004282:	497b      	ldr	r1, [pc, #492]	; (8004470 <HAL_I2C_Mem_Read+0x224>)
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 fce1 	bl	8004c4c <I2C_WaitOnFlagUntilTimeout>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d001      	beq.n	8004294 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004290:	2302      	movs	r3, #2
 8004292:	e207      	b.n	80046a4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800429a:	2b01      	cmp	r3, #1
 800429c:	d101      	bne.n	80042a2 <HAL_I2C_Mem_Read+0x56>
 800429e:	2302      	movs	r3, #2
 80042a0:	e200      	b.n	80046a4 <HAL_I2C_Mem_Read+0x458>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d007      	beq.n	80042c8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0201 	orr.w	r2, r2, #1
 80042c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2222      	movs	r2, #34	; 0x22
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2240      	movs	r2, #64	; 0x40
 80042e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80042f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fe:	b29a      	uxth	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4a5b      	ldr	r2, [pc, #364]	; (8004474 <HAL_I2C_Mem_Read+0x228>)
 8004308:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800430a:	88f8      	ldrh	r0, [r7, #6]
 800430c:	893a      	ldrh	r2, [r7, #8]
 800430e:	8979      	ldrh	r1, [r7, #10]
 8004310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004312:	9301      	str	r3, [sp, #4]
 8004314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	4603      	mov	r3, r0
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 fbae 	bl	8004a7c <I2C_RequestMemoryRead>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e1bc      	b.n	80046a4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800432e:	2b00      	cmp	r3, #0
 8004330:	d113      	bne.n	800435a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004332:	2300      	movs	r3, #0
 8004334:	623b      	str	r3, [r7, #32]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	623b      	str	r3, [r7, #32]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	623b      	str	r3, [r7, #32]
 8004346:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	e190      	b.n	800467c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800435e:	2b01      	cmp	r3, #1
 8004360:	d11b      	bne.n	800439a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004370:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004372:	2300      	movs	r3, #0
 8004374:	61fb      	str	r3, [r7, #28]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	61fb      	str	r3, [r7, #28]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	61fb      	str	r3, [r7, #28]
 8004386:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	e170      	b.n	800467c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d11b      	bne.n	80043da <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043b0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043c2:	2300      	movs	r3, #0
 80043c4:	61bb      	str	r3, [r7, #24]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	61bb      	str	r3, [r7, #24]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	61bb      	str	r3, [r7, #24]
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	e150      	b.n	800467c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043da:	2300      	movs	r3, #0
 80043dc:	617b      	str	r3, [r7, #20]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	617b      	str	r3, [r7, #20]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	617b      	str	r3, [r7, #20]
 80043ee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80043f0:	e144      	b.n	800467c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f6:	2b03      	cmp	r3, #3
 80043f8:	f200 80f1 	bhi.w	80045de <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004400:	2b01      	cmp	r3, #1
 8004402:	d123      	bne.n	800444c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004406:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f000 fdc9 	bl	8004fa0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d001      	beq.n	8004418 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e145      	b.n	80046a4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	691a      	ldr	r2, [r3, #16]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	b2d2      	uxtb	r2, r2
 8004424:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	1c5a      	adds	r2, r3, #1
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004434:	3b01      	subs	r3, #1
 8004436:	b29a      	uxth	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004440:	b29b      	uxth	r3, r3
 8004442:	3b01      	subs	r3, #1
 8004444:	b29a      	uxth	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	855a      	strh	r2, [r3, #42]	; 0x2a
 800444a:	e117      	b.n	800467c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004450:	2b02      	cmp	r3, #2
 8004452:	d14e      	bne.n	80044f2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004456:	9300      	str	r3, [sp, #0]
 8004458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445a:	2200      	movs	r2, #0
 800445c:	4906      	ldr	r1, [pc, #24]	; (8004478 <HAL_I2C_Mem_Read+0x22c>)
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 fbf4 	bl	8004c4c <I2C_WaitOnFlagUntilTimeout>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d008      	beq.n	800447c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e11a      	b.n	80046a4 <HAL_I2C_Mem_Read+0x458>
 800446e:	bf00      	nop
 8004470:	00100002 	.word	0x00100002
 8004474:	ffff0000 	.word	0xffff0000
 8004478:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800448a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	691a      	ldr	r2, [r3, #16]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004496:	b2d2      	uxtb	r2, r2
 8004498:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	1c5a      	adds	r2, r3, #1
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a8:	3b01      	subs	r3, #1
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	3b01      	subs	r3, #1
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	691a      	ldr	r2, [r3, #16]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c8:	b2d2      	uxtb	r2, r2
 80044ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	1c5a      	adds	r2, r3, #1
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044da:	3b01      	subs	r3, #1
 80044dc:	b29a      	uxth	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	3b01      	subs	r3, #1
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044f0:	e0c4      	b.n	800467c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f8:	2200      	movs	r2, #0
 80044fa:	496c      	ldr	r1, [pc, #432]	; (80046ac <HAL_I2C_Mem_Read+0x460>)
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f000 fba5 	bl	8004c4c <I2C_WaitOnFlagUntilTimeout>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d001      	beq.n	800450c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e0cb      	b.n	80046a4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800451a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	691a      	ldr	r2, [r3, #16]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004526:	b2d2      	uxtb	r2, r2
 8004528:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452e:	1c5a      	adds	r2, r3, #1
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004538:	3b01      	subs	r3, #1
 800453a:	b29a      	uxth	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004544:	b29b      	uxth	r3, r3
 8004546:	3b01      	subs	r3, #1
 8004548:	b29a      	uxth	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004554:	2200      	movs	r2, #0
 8004556:	4955      	ldr	r1, [pc, #340]	; (80046ac <HAL_I2C_Mem_Read+0x460>)
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f000 fb77 	bl	8004c4c <I2C_WaitOnFlagUntilTimeout>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e09d      	b.n	80046a4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004576:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	691a      	ldr	r2, [r3, #16]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004582:	b2d2      	uxtb	r2, r2
 8004584:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458a:	1c5a      	adds	r2, r3, #1
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004594:	3b01      	subs	r3, #1
 8004596:	b29a      	uxth	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	3b01      	subs	r3, #1
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	691a      	ldr	r2, [r3, #16]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b4:	b2d2      	uxtb	r2, r2
 80045b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	1c5a      	adds	r2, r3, #1
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c6:	3b01      	subs	r3, #1
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	3b01      	subs	r3, #1
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045dc:	e04e      	b.n	800467c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 fcdc 	bl	8004fa0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e058      	b.n	80046a4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	691a      	ldr	r2, [r3, #16]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fc:	b2d2      	uxtb	r2, r2
 80045fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	1c5a      	adds	r2, r3, #1
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800460e:	3b01      	subs	r3, #1
 8004610:	b29a      	uxth	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461a:	b29b      	uxth	r3, r3
 800461c:	3b01      	subs	r3, #1
 800461e:	b29a      	uxth	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	f003 0304 	and.w	r3, r3, #4
 800462e:	2b04      	cmp	r3, #4
 8004630:	d124      	bne.n	800467c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004636:	2b03      	cmp	r3, #3
 8004638:	d107      	bne.n	800464a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004648:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	691a      	ldr	r2, [r3, #16]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	b2d2      	uxtb	r2, r2
 8004656:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465c:	1c5a      	adds	r2, r3, #1
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004666:	3b01      	subs	r3, #1
 8004668:	b29a      	uxth	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004672:	b29b      	uxth	r3, r3
 8004674:	3b01      	subs	r3, #1
 8004676:	b29a      	uxth	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004680:	2b00      	cmp	r3, #0
 8004682:	f47f aeb6 	bne.w	80043f2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2220      	movs	r2, #32
 800468a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800469e:	2300      	movs	r3, #0
 80046a0:	e000      	b.n	80046a4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80046a2:	2302      	movs	r3, #2
  }
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3728      	adds	r7, #40	; 0x28
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	00010004 	.word	0x00010004

080046b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b088      	sub	sp, #32
 80046b4:	af02      	add	r7, sp, #8
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	607a      	str	r2, [r7, #4]
 80046ba:	603b      	str	r3, [r7, #0]
 80046bc:	460b      	mov	r3, r1
 80046be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	2b08      	cmp	r3, #8
 80046ca:	d006      	beq.n	80046da <I2C_MasterRequestWrite+0x2a>
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d003      	beq.n	80046da <I2C_MasterRequestWrite+0x2a>
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046d8:	d108      	bne.n	80046ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	e00b      	b.n	8004704 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f0:	2b12      	cmp	r3, #18
 80046f2:	d107      	bne.n	8004704 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004702:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f000 fa9b 	bl	8004c4c <I2C_WaitOnFlagUntilTimeout>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00d      	beq.n	8004738 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800472a:	d103      	bne.n	8004734 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004732:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e035      	b.n	80047a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004740:	d108      	bne.n	8004754 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004742:	897b      	ldrh	r3, [r7, #10]
 8004744:	b2db      	uxtb	r3, r3
 8004746:	461a      	mov	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004750:	611a      	str	r2, [r3, #16]
 8004752:	e01b      	b.n	800478c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004754:	897b      	ldrh	r3, [r7, #10]
 8004756:	11db      	asrs	r3, r3, #7
 8004758:	b2db      	uxtb	r3, r3
 800475a:	f003 0306 	and.w	r3, r3, #6
 800475e:	b2db      	uxtb	r3, r3
 8004760:	f063 030f 	orn	r3, r3, #15
 8004764:	b2da      	uxtb	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	490e      	ldr	r1, [pc, #56]	; (80047ac <I2C_MasterRequestWrite+0xfc>)
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 fae4 	bl	8004d40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e010      	b.n	80047a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004782:	897b      	ldrh	r3, [r7, #10]
 8004784:	b2da      	uxtb	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	4907      	ldr	r1, [pc, #28]	; (80047b0 <I2C_MasterRequestWrite+0x100>)
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f000 fad4 	bl	8004d40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e000      	b.n	80047a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3718      	adds	r7, #24
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	00010008 	.word	0x00010008
 80047b0:	00010002 	.word	0x00010002

080047b4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b088      	sub	sp, #32
 80047b8:	af02      	add	r7, sp, #8
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	607a      	str	r2, [r7, #4]
 80047be:	603b      	str	r3, [r7, #0]
 80047c0:	460b      	mov	r3, r1
 80047c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047d8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d006      	beq.n	80047ee <I2C_MasterRequestRead+0x3a>
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d003      	beq.n	80047ee <I2C_MasterRequestRead+0x3a>
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047ec:	d108      	bne.n	8004800 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047fc:	601a      	str	r2, [r3, #0]
 80047fe:	e00b      	b.n	8004818 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004804:	2b11      	cmp	r3, #17
 8004806:	d107      	bne.n	8004818 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004816:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	9300      	str	r3, [sp, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f000 fa11 	bl	8004c4c <I2C_WaitOnFlagUntilTimeout>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00d      	beq.n	800484c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800483a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800483e:	d103      	bne.n	8004848 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004846:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e079      	b.n	8004940 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004854:	d108      	bne.n	8004868 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004856:	897b      	ldrh	r3, [r7, #10]
 8004858:	b2db      	uxtb	r3, r3
 800485a:	f043 0301 	orr.w	r3, r3, #1
 800485e:	b2da      	uxtb	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	611a      	str	r2, [r3, #16]
 8004866:	e05f      	b.n	8004928 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004868:	897b      	ldrh	r3, [r7, #10]
 800486a:	11db      	asrs	r3, r3, #7
 800486c:	b2db      	uxtb	r3, r3
 800486e:	f003 0306 	and.w	r3, r3, #6
 8004872:	b2db      	uxtb	r3, r3
 8004874:	f063 030f 	orn	r3, r3, #15
 8004878:	b2da      	uxtb	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	4930      	ldr	r1, [pc, #192]	; (8004948 <I2C_MasterRequestRead+0x194>)
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f000 fa5a 	bl	8004d40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e054      	b.n	8004940 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004896:	897b      	ldrh	r3, [r7, #10]
 8004898:	b2da      	uxtb	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	4929      	ldr	r1, [pc, #164]	; (800494c <I2C_MasterRequestRead+0x198>)
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f000 fa4a 	bl	8004d40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e044      	b.n	8004940 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048b6:	2300      	movs	r3, #0
 80048b8:	613b      	str	r3, [r7, #16]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	613b      	str	r3, [r7, #16]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	613b      	str	r3, [r7, #16]
 80048ca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048da:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f000 f9af 	bl	8004c4c <I2C_WaitOnFlagUntilTimeout>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00d      	beq.n	8004910 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004902:	d103      	bne.n	800490c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f44f 7200 	mov.w	r2, #512	; 0x200
 800490a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e017      	b.n	8004940 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004910:	897b      	ldrh	r3, [r7, #10]
 8004912:	11db      	asrs	r3, r3, #7
 8004914:	b2db      	uxtb	r3, r3
 8004916:	f003 0306 	and.w	r3, r3, #6
 800491a:	b2db      	uxtb	r3, r3
 800491c:	f063 030e 	orn	r3, r3, #14
 8004920:	b2da      	uxtb	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	4907      	ldr	r1, [pc, #28]	; (800494c <I2C_MasterRequestRead+0x198>)
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f000 fa06 	bl	8004d40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e000      	b.n	8004940 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3718      	adds	r7, #24
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	00010008 	.word	0x00010008
 800494c:	00010002 	.word	0x00010002

08004950 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b088      	sub	sp, #32
 8004954:	af02      	add	r7, sp, #8
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	4608      	mov	r0, r1
 800495a:	4611      	mov	r1, r2
 800495c:	461a      	mov	r2, r3
 800495e:	4603      	mov	r3, r0
 8004960:	817b      	strh	r3, [r7, #10]
 8004962:	460b      	mov	r3, r1
 8004964:	813b      	strh	r3, [r7, #8]
 8004966:	4613      	mov	r3, r2
 8004968:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004978:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	6a3b      	ldr	r3, [r7, #32]
 8004980:	2200      	movs	r2, #0
 8004982:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f000 f960 	bl	8004c4c <I2C_WaitOnFlagUntilTimeout>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00d      	beq.n	80049ae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800499c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049a0:	d103      	bne.n	80049aa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e05f      	b.n	8004a6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049ae:	897b      	ldrh	r3, [r7, #10]
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	461a      	mov	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c0:	6a3a      	ldr	r2, [r7, #32]
 80049c2:	492d      	ldr	r1, [pc, #180]	; (8004a78 <I2C_RequestMemoryWrite+0x128>)
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 f9bb 	bl	8004d40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e04c      	b.n	8004a6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049d4:	2300      	movs	r3, #0
 80049d6:	617b      	str	r3, [r7, #20]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	617b      	str	r3, [r7, #20]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	617b      	str	r3, [r7, #20]
 80049e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ec:	6a39      	ldr	r1, [r7, #32]
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 fa46 	bl	8004e80 <I2C_WaitOnTXEFlagUntilTimeout>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00d      	beq.n	8004a16 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	2b04      	cmp	r3, #4
 8004a00:	d107      	bne.n	8004a12 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e02b      	b.n	8004a6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a16:	88fb      	ldrh	r3, [r7, #6]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d105      	bne.n	8004a28 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a1c:	893b      	ldrh	r3, [r7, #8]
 8004a1e:	b2da      	uxtb	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	611a      	str	r2, [r3, #16]
 8004a26:	e021      	b.n	8004a6c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a28:	893b      	ldrh	r3, [r7, #8]
 8004a2a:	0a1b      	lsrs	r3, r3, #8
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	b2da      	uxtb	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a38:	6a39      	ldr	r1, [r7, #32]
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f000 fa20 	bl	8004e80 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00d      	beq.n	8004a62 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4a:	2b04      	cmp	r3, #4
 8004a4c:	d107      	bne.n	8004a5e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e005      	b.n	8004a6e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a62:	893b      	ldrh	r3, [r7, #8]
 8004a64:	b2da      	uxtb	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3718      	adds	r7, #24
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	00010002 	.word	0x00010002

08004a7c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b088      	sub	sp, #32
 8004a80:	af02      	add	r7, sp, #8
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	4608      	mov	r0, r1
 8004a86:	4611      	mov	r1, r2
 8004a88:	461a      	mov	r2, r3
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	817b      	strh	r3, [r7, #10]
 8004a8e:	460b      	mov	r3, r1
 8004a90:	813b      	strh	r3, [r7, #8]
 8004a92:	4613      	mov	r3, r2
 8004a94:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004aa4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ab4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	6a3b      	ldr	r3, [r7, #32]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f000 f8c2 	bl	8004c4c <I2C_WaitOnFlagUntilTimeout>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00d      	beq.n	8004aea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004adc:	d103      	bne.n	8004ae6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ae4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e0aa      	b.n	8004c40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004aea:	897b      	ldrh	r3, [r7, #10]
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	461a      	mov	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004af8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	6a3a      	ldr	r2, [r7, #32]
 8004afe:	4952      	ldr	r1, [pc, #328]	; (8004c48 <I2C_RequestMemoryRead+0x1cc>)
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f000 f91d 	bl	8004d40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d001      	beq.n	8004b10 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e097      	b.n	8004c40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b10:	2300      	movs	r3, #0
 8004b12:	617b      	str	r3, [r7, #20]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	617b      	str	r3, [r7, #20]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	617b      	str	r3, [r7, #20]
 8004b24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b28:	6a39      	ldr	r1, [r7, #32]
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f000 f9a8 	bl	8004e80 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00d      	beq.n	8004b52 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	2b04      	cmp	r3, #4
 8004b3c:	d107      	bne.n	8004b4e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e076      	b.n	8004c40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b52:	88fb      	ldrh	r3, [r7, #6]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d105      	bne.n	8004b64 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b58:	893b      	ldrh	r3, [r7, #8]
 8004b5a:	b2da      	uxtb	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	611a      	str	r2, [r3, #16]
 8004b62:	e021      	b.n	8004ba8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b64:	893b      	ldrh	r3, [r7, #8]
 8004b66:	0a1b      	lsrs	r3, r3, #8
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	b2da      	uxtb	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b74:	6a39      	ldr	r1, [r7, #32]
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f000 f982 	bl	8004e80 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00d      	beq.n	8004b9e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	d107      	bne.n	8004b9a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e050      	b.n	8004c40 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b9e:	893b      	ldrh	r3, [r7, #8]
 8004ba0:	b2da      	uxtb	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004baa:	6a39      	ldr	r1, [r7, #32]
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f000 f967 	bl	8004e80 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00d      	beq.n	8004bd4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbc:	2b04      	cmp	r3, #4
 8004bbe:	d107      	bne.n	8004bd0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e035      	b.n	8004c40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004be2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	9300      	str	r3, [sp, #0]
 8004be8:	6a3b      	ldr	r3, [r7, #32]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 f82b 	bl	8004c4c <I2C_WaitOnFlagUntilTimeout>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00d      	beq.n	8004c18 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c0a:	d103      	bne.n	8004c14 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e013      	b.n	8004c40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c18:	897b      	ldrh	r3, [r7, #10]
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	f043 0301 	orr.w	r3, r3, #1
 8004c20:	b2da      	uxtb	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2a:	6a3a      	ldr	r2, [r7, #32]
 8004c2c:	4906      	ldr	r1, [pc, #24]	; (8004c48 <I2C_RequestMemoryRead+0x1cc>)
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f000 f886 	bl	8004d40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e000      	b.n	8004c40 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3718      	adds	r7, #24
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	00010002 	.word	0x00010002

08004c4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	603b      	str	r3, [r7, #0]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c5c:	e048      	b.n	8004cf0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c64:	d044      	beq.n	8004cf0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c66:	f7fe f9f9 	bl	800305c <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	683a      	ldr	r2, [r7, #0]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d302      	bcc.n	8004c7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d139      	bne.n	8004cf0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	0c1b      	lsrs	r3, r3, #16
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d10d      	bne.n	8004ca2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	43da      	mvns	r2, r3
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	4013      	ands	r3, r2
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	bf0c      	ite	eq
 8004c98:	2301      	moveq	r3, #1
 8004c9a:	2300      	movne	r3, #0
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	e00c      	b.n	8004cbc <I2C_WaitOnFlagUntilTimeout+0x70>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	43da      	mvns	r2, r3
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	4013      	ands	r3, r2
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	bf0c      	ite	eq
 8004cb4:	2301      	moveq	r3, #1
 8004cb6:	2300      	movne	r3, #0
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	461a      	mov	r2, r3
 8004cbc:	79fb      	ldrb	r3, [r7, #7]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d116      	bne.n	8004cf0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cdc:	f043 0220 	orr.w	r2, r3, #32
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e023      	b.n	8004d38 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	0c1b      	lsrs	r3, r3, #16
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d10d      	bne.n	8004d16 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	695b      	ldr	r3, [r3, #20]
 8004d00:	43da      	mvns	r2, r3
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	4013      	ands	r3, r2
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	bf0c      	ite	eq
 8004d0c:	2301      	moveq	r3, #1
 8004d0e:	2300      	movne	r3, #0
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	461a      	mov	r2, r3
 8004d14:	e00c      	b.n	8004d30 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	43da      	mvns	r2, r3
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	4013      	ands	r3, r2
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	bf0c      	ite	eq
 8004d28:	2301      	moveq	r3, #1
 8004d2a:	2300      	movne	r3, #0
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	461a      	mov	r2, r3
 8004d30:	79fb      	ldrb	r3, [r7, #7]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d093      	beq.n	8004c5e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
 8004d4c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d4e:	e071      	b.n	8004e34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d5e:	d123      	bne.n	8004da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d6e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2220      	movs	r2, #32
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d94:	f043 0204 	orr.w	r2, r3, #4
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e067      	b.n	8004e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dae:	d041      	beq.n	8004e34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004db0:	f7fe f954 	bl	800305c <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d302      	bcc.n	8004dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d136      	bne.n	8004e34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	0c1b      	lsrs	r3, r3, #16
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d10c      	bne.n	8004dea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	43da      	mvns	r2, r3
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	bf14      	ite	ne
 8004de2:	2301      	movne	r3, #1
 8004de4:	2300      	moveq	r3, #0
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	e00b      	b.n	8004e02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	43da      	mvns	r2, r3
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	4013      	ands	r3, r2
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	bf14      	ite	ne
 8004dfc:	2301      	movne	r3, #1
 8004dfe:	2300      	moveq	r3, #0
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d016      	beq.n	8004e34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e20:	f043 0220 	orr.w	r2, r3, #32
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e021      	b.n	8004e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	0c1b      	lsrs	r3, r3, #16
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d10c      	bne.n	8004e58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	695b      	ldr	r3, [r3, #20]
 8004e44:	43da      	mvns	r2, r3
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	4013      	ands	r3, r2
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	bf14      	ite	ne
 8004e50:	2301      	movne	r3, #1
 8004e52:	2300      	moveq	r3, #0
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	e00b      	b.n	8004e70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	43da      	mvns	r2, r3
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	4013      	ands	r3, r2
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	bf14      	ite	ne
 8004e6a:	2301      	movne	r3, #1
 8004e6c:	2300      	moveq	r3, #0
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f47f af6d 	bne.w	8004d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e8c:	e034      	b.n	8004ef8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f000 f8e3 	bl	800505a <I2C_IsAcknowledgeFailed>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e034      	b.n	8004f08 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea4:	d028      	beq.n	8004ef8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ea6:	f7fe f8d9 	bl	800305c <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d302      	bcc.n	8004ebc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d11d      	bne.n	8004ef8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec6:	2b80      	cmp	r3, #128	; 0x80
 8004ec8:	d016      	beq.n	8004ef8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee4:	f043 0220 	orr.w	r2, r3, #32
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e007      	b.n	8004f08 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f02:	2b80      	cmp	r3, #128	; 0x80
 8004f04:	d1c3      	bne.n	8004e8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f1c:	e034      	b.n	8004f88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f000 f89b 	bl	800505a <I2C_IsAcknowledgeFailed>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d001      	beq.n	8004f2e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e034      	b.n	8004f98 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f34:	d028      	beq.n	8004f88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f36:	f7fe f891 	bl	800305c <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d302      	bcc.n	8004f4c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d11d      	bne.n	8004f88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	f003 0304 	and.w	r3, r3, #4
 8004f56:	2b04      	cmp	r3, #4
 8004f58:	d016      	beq.n	8004f88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2220      	movs	r2, #32
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f74:	f043 0220 	orr.w	r2, r3, #32
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e007      	b.n	8004f98 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	f003 0304 	and.w	r3, r3, #4
 8004f92:	2b04      	cmp	r3, #4
 8004f94:	d1c3      	bne.n	8004f1e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fac:	e049      	b.n	8005042 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	695b      	ldr	r3, [r3, #20]
 8004fb4:	f003 0310 	and.w	r3, r3, #16
 8004fb8:	2b10      	cmp	r3, #16
 8004fba:	d119      	bne.n	8004ff0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f06f 0210 	mvn.w	r2, #16
 8004fc4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e030      	b.n	8005052 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ff0:	f7fe f834 	bl	800305c <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d302      	bcc.n	8005006 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d11d      	bne.n	8005042 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005010:	2b40      	cmp	r3, #64	; 0x40
 8005012:	d016      	beq.n	8005042 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2220      	movs	r2, #32
 800501e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502e:	f043 0220 	orr.w	r2, r3, #32
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e007      	b.n	8005052 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800504c:	2b40      	cmp	r3, #64	; 0x40
 800504e:	d1ae      	bne.n	8004fae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800505a:	b480      	push	{r7}
 800505c:	b083      	sub	sp, #12
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800506c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005070:	d11b      	bne.n	80050aa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800507a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2220      	movs	r2, #32
 8005086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005096:	f043 0204 	orr.w	r2, r3, #4
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e000      	b.n	80050ac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e267      	b.n	800559a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d075      	beq.n	80051c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050d6:	4b88      	ldr	r3, [pc, #544]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f003 030c 	and.w	r3, r3, #12
 80050de:	2b04      	cmp	r3, #4
 80050e0:	d00c      	beq.n	80050fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050e2:	4b85      	ldr	r3, [pc, #532]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050ea:	2b08      	cmp	r3, #8
 80050ec:	d112      	bne.n	8005114 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050ee:	4b82      	ldr	r3, [pc, #520]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050fa:	d10b      	bne.n	8005114 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050fc:	4b7e      	ldr	r3, [pc, #504]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d05b      	beq.n	80051c0 <HAL_RCC_OscConfig+0x108>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d157      	bne.n	80051c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e242      	b.n	800559a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800511c:	d106      	bne.n	800512c <HAL_RCC_OscConfig+0x74>
 800511e:	4b76      	ldr	r3, [pc, #472]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a75      	ldr	r2, [pc, #468]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 8005124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005128:	6013      	str	r3, [r2, #0]
 800512a:	e01d      	b.n	8005168 <HAL_RCC_OscConfig+0xb0>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005134:	d10c      	bne.n	8005150 <HAL_RCC_OscConfig+0x98>
 8005136:	4b70      	ldr	r3, [pc, #448]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a6f      	ldr	r2, [pc, #444]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 800513c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005140:	6013      	str	r3, [r2, #0]
 8005142:	4b6d      	ldr	r3, [pc, #436]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a6c      	ldr	r2, [pc, #432]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 8005148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800514c:	6013      	str	r3, [r2, #0]
 800514e:	e00b      	b.n	8005168 <HAL_RCC_OscConfig+0xb0>
 8005150:	4b69      	ldr	r3, [pc, #420]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a68      	ldr	r2, [pc, #416]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 8005156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800515a:	6013      	str	r3, [r2, #0]
 800515c:	4b66      	ldr	r3, [pc, #408]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a65      	ldr	r2, [pc, #404]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 8005162:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005166:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d013      	beq.n	8005198 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005170:	f7fd ff74 	bl	800305c <HAL_GetTick>
 8005174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005176:	e008      	b.n	800518a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005178:	f7fd ff70 	bl	800305c <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b64      	cmp	r3, #100	; 0x64
 8005184:	d901      	bls.n	800518a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e207      	b.n	800559a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800518a:	4b5b      	ldr	r3, [pc, #364]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d0f0      	beq.n	8005178 <HAL_RCC_OscConfig+0xc0>
 8005196:	e014      	b.n	80051c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005198:	f7fd ff60 	bl	800305c <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800519e:	e008      	b.n	80051b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051a0:	f7fd ff5c 	bl	800305c <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b64      	cmp	r3, #100	; 0x64
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e1f3      	b.n	800559a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051b2:	4b51      	ldr	r3, [pc, #324]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1f0      	bne.n	80051a0 <HAL_RCC_OscConfig+0xe8>
 80051be:	e000      	b.n	80051c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d063      	beq.n	8005296 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051ce:	4b4a      	ldr	r3, [pc, #296]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f003 030c 	and.w	r3, r3, #12
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00b      	beq.n	80051f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051da:	4b47      	ldr	r3, [pc, #284]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051e2:	2b08      	cmp	r3, #8
 80051e4:	d11c      	bne.n	8005220 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051e6:	4b44      	ldr	r3, [pc, #272]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d116      	bne.n	8005220 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051f2:	4b41      	ldr	r3, [pc, #260]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d005      	beq.n	800520a <HAL_RCC_OscConfig+0x152>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d001      	beq.n	800520a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e1c7      	b.n	800559a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800520a:	4b3b      	ldr	r3, [pc, #236]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	4937      	ldr	r1, [pc, #220]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 800521a:	4313      	orrs	r3, r2
 800521c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800521e:	e03a      	b.n	8005296 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d020      	beq.n	800526a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005228:	4b34      	ldr	r3, [pc, #208]	; (80052fc <HAL_RCC_OscConfig+0x244>)
 800522a:	2201      	movs	r2, #1
 800522c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800522e:	f7fd ff15 	bl	800305c <HAL_GetTick>
 8005232:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005234:	e008      	b.n	8005248 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005236:	f7fd ff11 	bl	800305c <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	2b02      	cmp	r3, #2
 8005242:	d901      	bls.n	8005248 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e1a8      	b.n	800559a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005248:	4b2b      	ldr	r3, [pc, #172]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d0f0      	beq.n	8005236 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005254:	4b28      	ldr	r3, [pc, #160]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	00db      	lsls	r3, r3, #3
 8005262:	4925      	ldr	r1, [pc, #148]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 8005264:	4313      	orrs	r3, r2
 8005266:	600b      	str	r3, [r1, #0]
 8005268:	e015      	b.n	8005296 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800526a:	4b24      	ldr	r3, [pc, #144]	; (80052fc <HAL_RCC_OscConfig+0x244>)
 800526c:	2200      	movs	r2, #0
 800526e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005270:	f7fd fef4 	bl	800305c <HAL_GetTick>
 8005274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005276:	e008      	b.n	800528a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005278:	f7fd fef0 	bl	800305c <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b02      	cmp	r3, #2
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e187      	b.n	800559a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800528a:	4b1b      	ldr	r3, [pc, #108]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1f0      	bne.n	8005278 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0308 	and.w	r3, r3, #8
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d036      	beq.n	8005310 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d016      	beq.n	80052d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052aa:	4b15      	ldr	r3, [pc, #84]	; (8005300 <HAL_RCC_OscConfig+0x248>)
 80052ac:	2201      	movs	r2, #1
 80052ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052b0:	f7fd fed4 	bl	800305c <HAL_GetTick>
 80052b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052b6:	e008      	b.n	80052ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052b8:	f7fd fed0 	bl	800305c <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e167      	b.n	800559a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052ca:	4b0b      	ldr	r3, [pc, #44]	; (80052f8 <HAL_RCC_OscConfig+0x240>)
 80052cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d0f0      	beq.n	80052b8 <HAL_RCC_OscConfig+0x200>
 80052d6:	e01b      	b.n	8005310 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052d8:	4b09      	ldr	r3, [pc, #36]	; (8005300 <HAL_RCC_OscConfig+0x248>)
 80052da:	2200      	movs	r2, #0
 80052dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052de:	f7fd febd 	bl	800305c <HAL_GetTick>
 80052e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052e4:	e00e      	b.n	8005304 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052e6:	f7fd feb9 	bl	800305c <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d907      	bls.n	8005304 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e150      	b.n	800559a <HAL_RCC_OscConfig+0x4e2>
 80052f8:	40023800 	.word	0x40023800
 80052fc:	42470000 	.word	0x42470000
 8005300:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005304:	4b88      	ldr	r3, [pc, #544]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 8005306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005308:	f003 0302 	and.w	r3, r3, #2
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1ea      	bne.n	80052e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0304 	and.w	r3, r3, #4
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 8097 	beq.w	800544c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800531e:	2300      	movs	r3, #0
 8005320:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005322:	4b81      	ldr	r3, [pc, #516]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10f      	bne.n	800534e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800532e:	2300      	movs	r3, #0
 8005330:	60bb      	str	r3, [r7, #8]
 8005332:	4b7d      	ldr	r3, [pc, #500]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	4a7c      	ldr	r2, [pc, #496]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 8005338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800533c:	6413      	str	r3, [r2, #64]	; 0x40
 800533e:	4b7a      	ldr	r3, [pc, #488]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 8005340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005346:	60bb      	str	r3, [r7, #8]
 8005348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800534a:	2301      	movs	r3, #1
 800534c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800534e:	4b77      	ldr	r3, [pc, #476]	; (800552c <HAL_RCC_OscConfig+0x474>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005356:	2b00      	cmp	r3, #0
 8005358:	d118      	bne.n	800538c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800535a:	4b74      	ldr	r3, [pc, #464]	; (800552c <HAL_RCC_OscConfig+0x474>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a73      	ldr	r2, [pc, #460]	; (800552c <HAL_RCC_OscConfig+0x474>)
 8005360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005364:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005366:	f7fd fe79 	bl	800305c <HAL_GetTick>
 800536a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800536c:	e008      	b.n	8005380 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800536e:	f7fd fe75 	bl	800305c <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	2b02      	cmp	r3, #2
 800537a:	d901      	bls.n	8005380 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e10c      	b.n	800559a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005380:	4b6a      	ldr	r3, [pc, #424]	; (800552c <HAL_RCC_OscConfig+0x474>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005388:	2b00      	cmp	r3, #0
 800538a:	d0f0      	beq.n	800536e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d106      	bne.n	80053a2 <HAL_RCC_OscConfig+0x2ea>
 8005394:	4b64      	ldr	r3, [pc, #400]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 8005396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005398:	4a63      	ldr	r2, [pc, #396]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 800539a:	f043 0301 	orr.w	r3, r3, #1
 800539e:	6713      	str	r3, [r2, #112]	; 0x70
 80053a0:	e01c      	b.n	80053dc <HAL_RCC_OscConfig+0x324>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	2b05      	cmp	r3, #5
 80053a8:	d10c      	bne.n	80053c4 <HAL_RCC_OscConfig+0x30c>
 80053aa:	4b5f      	ldr	r3, [pc, #380]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 80053ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ae:	4a5e      	ldr	r2, [pc, #376]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 80053b0:	f043 0304 	orr.w	r3, r3, #4
 80053b4:	6713      	str	r3, [r2, #112]	; 0x70
 80053b6:	4b5c      	ldr	r3, [pc, #368]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 80053b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ba:	4a5b      	ldr	r2, [pc, #364]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 80053bc:	f043 0301 	orr.w	r3, r3, #1
 80053c0:	6713      	str	r3, [r2, #112]	; 0x70
 80053c2:	e00b      	b.n	80053dc <HAL_RCC_OscConfig+0x324>
 80053c4:	4b58      	ldr	r3, [pc, #352]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 80053c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c8:	4a57      	ldr	r2, [pc, #348]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 80053ca:	f023 0301 	bic.w	r3, r3, #1
 80053ce:	6713      	str	r3, [r2, #112]	; 0x70
 80053d0:	4b55      	ldr	r3, [pc, #340]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 80053d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d4:	4a54      	ldr	r2, [pc, #336]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 80053d6:	f023 0304 	bic.w	r3, r3, #4
 80053da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d015      	beq.n	8005410 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e4:	f7fd fe3a 	bl	800305c <HAL_GetTick>
 80053e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053ea:	e00a      	b.n	8005402 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053ec:	f7fd fe36 	bl	800305c <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d901      	bls.n	8005402 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e0cb      	b.n	800559a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005402:	4b49      	ldr	r3, [pc, #292]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 8005404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b00      	cmp	r3, #0
 800540c:	d0ee      	beq.n	80053ec <HAL_RCC_OscConfig+0x334>
 800540e:	e014      	b.n	800543a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005410:	f7fd fe24 	bl	800305c <HAL_GetTick>
 8005414:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005416:	e00a      	b.n	800542e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005418:	f7fd fe20 	bl	800305c <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	f241 3288 	movw	r2, #5000	; 0x1388
 8005426:	4293      	cmp	r3, r2
 8005428:	d901      	bls.n	800542e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e0b5      	b.n	800559a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800542e:	4b3e      	ldr	r3, [pc, #248]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 8005430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1ee      	bne.n	8005418 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800543a:	7dfb      	ldrb	r3, [r7, #23]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d105      	bne.n	800544c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005440:	4b39      	ldr	r3, [pc, #228]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 8005442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005444:	4a38      	ldr	r2, [pc, #224]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 8005446:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800544a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 80a1 	beq.w	8005598 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005456:	4b34      	ldr	r3, [pc, #208]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f003 030c 	and.w	r3, r3, #12
 800545e:	2b08      	cmp	r3, #8
 8005460:	d05c      	beq.n	800551c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	2b02      	cmp	r3, #2
 8005468:	d141      	bne.n	80054ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800546a:	4b31      	ldr	r3, [pc, #196]	; (8005530 <HAL_RCC_OscConfig+0x478>)
 800546c:	2200      	movs	r2, #0
 800546e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005470:	f7fd fdf4 	bl	800305c <HAL_GetTick>
 8005474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005476:	e008      	b.n	800548a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005478:	f7fd fdf0 	bl	800305c <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b02      	cmp	r3, #2
 8005484:	d901      	bls.n	800548a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e087      	b.n	800559a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800548a:	4b27      	ldr	r3, [pc, #156]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1f0      	bne.n	8005478 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	69da      	ldr	r2, [r3, #28]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	431a      	orrs	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a4:	019b      	lsls	r3, r3, #6
 80054a6:	431a      	orrs	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ac:	085b      	lsrs	r3, r3, #1
 80054ae:	3b01      	subs	r3, #1
 80054b0:	041b      	lsls	r3, r3, #16
 80054b2:	431a      	orrs	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b8:	061b      	lsls	r3, r3, #24
 80054ba:	491b      	ldr	r1, [pc, #108]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054c0:	4b1b      	ldr	r3, [pc, #108]	; (8005530 <HAL_RCC_OscConfig+0x478>)
 80054c2:	2201      	movs	r2, #1
 80054c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c6:	f7fd fdc9 	bl	800305c <HAL_GetTick>
 80054ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054cc:	e008      	b.n	80054e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054ce:	f7fd fdc5 	bl	800305c <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d901      	bls.n	80054e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e05c      	b.n	800559a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054e0:	4b11      	ldr	r3, [pc, #68]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d0f0      	beq.n	80054ce <HAL_RCC_OscConfig+0x416>
 80054ec:	e054      	b.n	8005598 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054ee:	4b10      	ldr	r3, [pc, #64]	; (8005530 <HAL_RCC_OscConfig+0x478>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054f4:	f7fd fdb2 	bl	800305c <HAL_GetTick>
 80054f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054fa:	e008      	b.n	800550e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054fc:	f7fd fdae 	bl	800305c <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	2b02      	cmp	r3, #2
 8005508:	d901      	bls.n	800550e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e045      	b.n	800559a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800550e:	4b06      	ldr	r3, [pc, #24]	; (8005528 <HAL_RCC_OscConfig+0x470>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1f0      	bne.n	80054fc <HAL_RCC_OscConfig+0x444>
 800551a:	e03d      	b.n	8005598 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d107      	bne.n	8005534 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e038      	b.n	800559a <HAL_RCC_OscConfig+0x4e2>
 8005528:	40023800 	.word	0x40023800
 800552c:	40007000 	.word	0x40007000
 8005530:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005534:	4b1b      	ldr	r3, [pc, #108]	; (80055a4 <HAL_RCC_OscConfig+0x4ec>)
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d028      	beq.n	8005594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800554c:	429a      	cmp	r2, r3
 800554e:	d121      	bne.n	8005594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800555a:	429a      	cmp	r2, r3
 800555c:	d11a      	bne.n	8005594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005564:	4013      	ands	r3, r2
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800556a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800556c:	4293      	cmp	r3, r2
 800556e:	d111      	bne.n	8005594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557a:	085b      	lsrs	r3, r3, #1
 800557c:	3b01      	subs	r3, #1
 800557e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005580:	429a      	cmp	r2, r3
 8005582:	d107      	bne.n	8005594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005590:	429a      	cmp	r2, r3
 8005592:	d001      	beq.n	8005598 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e000      	b.n	800559a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3718      	adds	r7, #24
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	40023800 	.word	0x40023800

080055a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d101      	bne.n	80055bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e0cc      	b.n	8005756 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055bc:	4b68      	ldr	r3, [pc, #416]	; (8005760 <HAL_RCC_ClockConfig+0x1b8>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0307 	and.w	r3, r3, #7
 80055c4:	683a      	ldr	r2, [r7, #0]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d90c      	bls.n	80055e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ca:	4b65      	ldr	r3, [pc, #404]	; (8005760 <HAL_RCC_ClockConfig+0x1b8>)
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	b2d2      	uxtb	r2, r2
 80055d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055d2:	4b63      	ldr	r3, [pc, #396]	; (8005760 <HAL_RCC_ClockConfig+0x1b8>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0307 	and.w	r3, r3, #7
 80055da:	683a      	ldr	r2, [r7, #0]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d001      	beq.n	80055e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e0b8      	b.n	8005756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d020      	beq.n	8005632 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0304 	and.w	r3, r3, #4
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d005      	beq.n	8005608 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055fc:	4b59      	ldr	r3, [pc, #356]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	4a58      	ldr	r2, [pc, #352]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005602:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005606:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0308 	and.w	r3, r3, #8
 8005610:	2b00      	cmp	r3, #0
 8005612:	d005      	beq.n	8005620 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005614:	4b53      	ldr	r3, [pc, #332]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	4a52      	ldr	r2, [pc, #328]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 800561a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800561e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005620:	4b50      	ldr	r3, [pc, #320]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	494d      	ldr	r1, [pc, #308]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 800562e:	4313      	orrs	r3, r2
 8005630:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0301 	and.w	r3, r3, #1
 800563a:	2b00      	cmp	r3, #0
 800563c:	d044      	beq.n	80056c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d107      	bne.n	8005656 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005646:	4b47      	ldr	r3, [pc, #284]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d119      	bne.n	8005686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e07f      	b.n	8005756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	2b02      	cmp	r3, #2
 800565c:	d003      	beq.n	8005666 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005662:	2b03      	cmp	r3, #3
 8005664:	d107      	bne.n	8005676 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005666:	4b3f      	ldr	r3, [pc, #252]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d109      	bne.n	8005686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e06f      	b.n	8005756 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005676:	4b3b      	ldr	r3, [pc, #236]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0302 	and.w	r3, r3, #2
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e067      	b.n	8005756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005686:	4b37      	ldr	r3, [pc, #220]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f023 0203 	bic.w	r2, r3, #3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	4934      	ldr	r1, [pc, #208]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005694:	4313      	orrs	r3, r2
 8005696:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005698:	f7fd fce0 	bl	800305c <HAL_GetTick>
 800569c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800569e:	e00a      	b.n	80056b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056a0:	f7fd fcdc 	bl	800305c <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d901      	bls.n	80056b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e04f      	b.n	8005756 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056b6:	4b2b      	ldr	r3, [pc, #172]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f003 020c 	and.w	r2, r3, #12
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d1eb      	bne.n	80056a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056c8:	4b25      	ldr	r3, [pc, #148]	; (8005760 <HAL_RCC_ClockConfig+0x1b8>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0307 	and.w	r3, r3, #7
 80056d0:	683a      	ldr	r2, [r7, #0]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d20c      	bcs.n	80056f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056d6:	4b22      	ldr	r3, [pc, #136]	; (8005760 <HAL_RCC_ClockConfig+0x1b8>)
 80056d8:	683a      	ldr	r2, [r7, #0]
 80056da:	b2d2      	uxtb	r2, r2
 80056dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056de:	4b20      	ldr	r3, [pc, #128]	; (8005760 <HAL_RCC_ClockConfig+0x1b8>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0307 	and.w	r3, r3, #7
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d001      	beq.n	80056f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e032      	b.n	8005756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0304 	and.w	r3, r3, #4
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d008      	beq.n	800570e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056fc:	4b19      	ldr	r3, [pc, #100]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	4916      	ldr	r1, [pc, #88]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 800570a:	4313      	orrs	r3, r2
 800570c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0308 	and.w	r3, r3, #8
 8005716:	2b00      	cmp	r3, #0
 8005718:	d009      	beq.n	800572e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800571a:	4b12      	ldr	r3, [pc, #72]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	00db      	lsls	r3, r3, #3
 8005728:	490e      	ldr	r1, [pc, #56]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 800572a:	4313      	orrs	r3, r2
 800572c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800572e:	f000 f821 	bl	8005774 <HAL_RCC_GetSysClockFreq>
 8005732:	4602      	mov	r2, r0
 8005734:	4b0b      	ldr	r3, [pc, #44]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	091b      	lsrs	r3, r3, #4
 800573a:	f003 030f 	and.w	r3, r3, #15
 800573e:	490a      	ldr	r1, [pc, #40]	; (8005768 <HAL_RCC_ClockConfig+0x1c0>)
 8005740:	5ccb      	ldrb	r3, [r1, r3]
 8005742:	fa22 f303 	lsr.w	r3, r2, r3
 8005746:	4a09      	ldr	r2, [pc, #36]	; (800576c <HAL_RCC_ClockConfig+0x1c4>)
 8005748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800574a:	4b09      	ldr	r3, [pc, #36]	; (8005770 <HAL_RCC_ClockConfig+0x1c8>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4618      	mov	r0, r3
 8005750:	f7fd fc40 	bl	8002fd4 <HAL_InitTick>

  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	40023c00 	.word	0x40023c00
 8005764:	40023800 	.word	0x40023800
 8005768:	08009500 	.word	0x08009500
 800576c:	20000004 	.word	0x20000004
 8005770:	20000008 	.word	0x20000008

08005774 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005774:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005778:	b090      	sub	sp, #64	; 0x40
 800577a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800577c:	2300      	movs	r3, #0
 800577e:	637b      	str	r3, [r7, #52]	; 0x34
 8005780:	2300      	movs	r3, #0
 8005782:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005784:	2300      	movs	r3, #0
 8005786:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005788:	2300      	movs	r3, #0
 800578a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800578c:	4b59      	ldr	r3, [pc, #356]	; (80058f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f003 030c 	and.w	r3, r3, #12
 8005794:	2b08      	cmp	r3, #8
 8005796:	d00d      	beq.n	80057b4 <HAL_RCC_GetSysClockFreq+0x40>
 8005798:	2b08      	cmp	r3, #8
 800579a:	f200 80a1 	bhi.w	80058e0 <HAL_RCC_GetSysClockFreq+0x16c>
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d002      	beq.n	80057a8 <HAL_RCC_GetSysClockFreq+0x34>
 80057a2:	2b04      	cmp	r3, #4
 80057a4:	d003      	beq.n	80057ae <HAL_RCC_GetSysClockFreq+0x3a>
 80057a6:	e09b      	b.n	80058e0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057a8:	4b53      	ldr	r3, [pc, #332]	; (80058f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80057aa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80057ac:	e09b      	b.n	80058e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057ae:	4b53      	ldr	r3, [pc, #332]	; (80058fc <HAL_RCC_GetSysClockFreq+0x188>)
 80057b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80057b2:	e098      	b.n	80058e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057b4:	4b4f      	ldr	r3, [pc, #316]	; (80058f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057bc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057be:	4b4d      	ldr	r3, [pc, #308]	; (80058f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d028      	beq.n	800581c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057ca:	4b4a      	ldr	r3, [pc, #296]	; (80058f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	099b      	lsrs	r3, r3, #6
 80057d0:	2200      	movs	r2, #0
 80057d2:	623b      	str	r3, [r7, #32]
 80057d4:	627a      	str	r2, [r7, #36]	; 0x24
 80057d6:	6a3b      	ldr	r3, [r7, #32]
 80057d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80057dc:	2100      	movs	r1, #0
 80057de:	4b47      	ldr	r3, [pc, #284]	; (80058fc <HAL_RCC_GetSysClockFreq+0x188>)
 80057e0:	fb03 f201 	mul.w	r2, r3, r1
 80057e4:	2300      	movs	r3, #0
 80057e6:	fb00 f303 	mul.w	r3, r0, r3
 80057ea:	4413      	add	r3, r2
 80057ec:	4a43      	ldr	r2, [pc, #268]	; (80058fc <HAL_RCC_GetSysClockFreq+0x188>)
 80057ee:	fba0 1202 	umull	r1, r2, r0, r2
 80057f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057f4:	460a      	mov	r2, r1
 80057f6:	62ba      	str	r2, [r7, #40]	; 0x28
 80057f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057fa:	4413      	add	r3, r2
 80057fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005800:	2200      	movs	r2, #0
 8005802:	61bb      	str	r3, [r7, #24]
 8005804:	61fa      	str	r2, [r7, #28]
 8005806:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800580a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800580e:	f7fb f925 	bl	8000a5c <__aeabi_uldivmod>
 8005812:	4602      	mov	r2, r0
 8005814:	460b      	mov	r3, r1
 8005816:	4613      	mov	r3, r2
 8005818:	63fb      	str	r3, [r7, #60]	; 0x3c
 800581a:	e053      	b.n	80058c4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800581c:	4b35      	ldr	r3, [pc, #212]	; (80058f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	099b      	lsrs	r3, r3, #6
 8005822:	2200      	movs	r2, #0
 8005824:	613b      	str	r3, [r7, #16]
 8005826:	617a      	str	r2, [r7, #20]
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800582e:	f04f 0b00 	mov.w	fp, #0
 8005832:	4652      	mov	r2, sl
 8005834:	465b      	mov	r3, fp
 8005836:	f04f 0000 	mov.w	r0, #0
 800583a:	f04f 0100 	mov.w	r1, #0
 800583e:	0159      	lsls	r1, r3, #5
 8005840:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005844:	0150      	lsls	r0, r2, #5
 8005846:	4602      	mov	r2, r0
 8005848:	460b      	mov	r3, r1
 800584a:	ebb2 080a 	subs.w	r8, r2, sl
 800584e:	eb63 090b 	sbc.w	r9, r3, fp
 8005852:	f04f 0200 	mov.w	r2, #0
 8005856:	f04f 0300 	mov.w	r3, #0
 800585a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800585e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005862:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005866:	ebb2 0408 	subs.w	r4, r2, r8
 800586a:	eb63 0509 	sbc.w	r5, r3, r9
 800586e:	f04f 0200 	mov.w	r2, #0
 8005872:	f04f 0300 	mov.w	r3, #0
 8005876:	00eb      	lsls	r3, r5, #3
 8005878:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800587c:	00e2      	lsls	r2, r4, #3
 800587e:	4614      	mov	r4, r2
 8005880:	461d      	mov	r5, r3
 8005882:	eb14 030a 	adds.w	r3, r4, sl
 8005886:	603b      	str	r3, [r7, #0]
 8005888:	eb45 030b 	adc.w	r3, r5, fp
 800588c:	607b      	str	r3, [r7, #4]
 800588e:	f04f 0200 	mov.w	r2, #0
 8005892:	f04f 0300 	mov.w	r3, #0
 8005896:	e9d7 4500 	ldrd	r4, r5, [r7]
 800589a:	4629      	mov	r1, r5
 800589c:	028b      	lsls	r3, r1, #10
 800589e:	4621      	mov	r1, r4
 80058a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80058a4:	4621      	mov	r1, r4
 80058a6:	028a      	lsls	r2, r1, #10
 80058a8:	4610      	mov	r0, r2
 80058aa:	4619      	mov	r1, r3
 80058ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ae:	2200      	movs	r2, #0
 80058b0:	60bb      	str	r3, [r7, #8]
 80058b2:	60fa      	str	r2, [r7, #12]
 80058b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058b8:	f7fb f8d0 	bl	8000a5c <__aeabi_uldivmod>
 80058bc:	4602      	mov	r2, r0
 80058be:	460b      	mov	r3, r1
 80058c0:	4613      	mov	r3, r2
 80058c2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80058c4:	4b0b      	ldr	r3, [pc, #44]	; (80058f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	0c1b      	lsrs	r3, r3, #16
 80058ca:	f003 0303 	and.w	r3, r3, #3
 80058ce:	3301      	adds	r3, #1
 80058d0:	005b      	lsls	r3, r3, #1
 80058d2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80058d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80058d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80058de:	e002      	b.n	80058e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058e0:	4b05      	ldr	r3, [pc, #20]	; (80058f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80058e2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80058e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3740      	adds	r7, #64	; 0x40
 80058ec:	46bd      	mov	sp, r7
 80058ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058f2:	bf00      	nop
 80058f4:	40023800 	.word	0x40023800
 80058f8:	00f42400 	.word	0x00f42400
 80058fc:	017d7840 	.word	0x017d7840

08005900 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005900:	b480      	push	{r7}
 8005902:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005904:	4b03      	ldr	r3, [pc, #12]	; (8005914 <HAL_RCC_GetHCLKFreq+0x14>)
 8005906:	681b      	ldr	r3, [r3, #0]
}
 8005908:	4618      	mov	r0, r3
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	20000004 	.word	0x20000004

08005918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800591c:	f7ff fff0 	bl	8005900 <HAL_RCC_GetHCLKFreq>
 8005920:	4602      	mov	r2, r0
 8005922:	4b05      	ldr	r3, [pc, #20]	; (8005938 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	0a9b      	lsrs	r3, r3, #10
 8005928:	f003 0307 	and.w	r3, r3, #7
 800592c:	4903      	ldr	r1, [pc, #12]	; (800593c <HAL_RCC_GetPCLK1Freq+0x24>)
 800592e:	5ccb      	ldrb	r3, [r1, r3]
 8005930:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005934:	4618      	mov	r0, r3
 8005936:	bd80      	pop	{r7, pc}
 8005938:	40023800 	.word	0x40023800
 800593c:	08009510 	.word	0x08009510

08005940 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005944:	f7ff ffdc 	bl	8005900 <HAL_RCC_GetHCLKFreq>
 8005948:	4602      	mov	r2, r0
 800594a:	4b05      	ldr	r3, [pc, #20]	; (8005960 <HAL_RCC_GetPCLK2Freq+0x20>)
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	0b5b      	lsrs	r3, r3, #13
 8005950:	f003 0307 	and.w	r3, r3, #7
 8005954:	4903      	ldr	r1, [pc, #12]	; (8005964 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005956:	5ccb      	ldrb	r3, [r1, r3]
 8005958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800595c:	4618      	mov	r0, r3
 800595e:	bd80      	pop	{r7, pc}
 8005960:	40023800 	.word	0x40023800
 8005964:	08009510 	.word	0x08009510

08005968 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d101      	bne.n	800597a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e041      	b.n	80059fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d106      	bne.n	8005994 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f7fd f80c 	bl	80029ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2202      	movs	r2, #2
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	3304      	adds	r3, #4
 80059a4:	4619      	mov	r1, r3
 80059a6:	4610      	mov	r0, r2
 80059a8:	f000 fe88 	bl	80066bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3708      	adds	r7, #8
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
	...

08005a08 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d001      	beq.n	8005a20 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e03c      	b.n	8005a9a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2202      	movs	r2, #2
 8005a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a1e      	ldr	r2, [pc, #120]	; (8005aa8 <HAL_TIM_Base_Start+0xa0>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d018      	beq.n	8005a64 <HAL_TIM_Base_Start+0x5c>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a3a:	d013      	beq.n	8005a64 <HAL_TIM_Base_Start+0x5c>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a1a      	ldr	r2, [pc, #104]	; (8005aac <HAL_TIM_Base_Start+0xa4>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d00e      	beq.n	8005a64 <HAL_TIM_Base_Start+0x5c>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a19      	ldr	r2, [pc, #100]	; (8005ab0 <HAL_TIM_Base_Start+0xa8>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d009      	beq.n	8005a64 <HAL_TIM_Base_Start+0x5c>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a17      	ldr	r2, [pc, #92]	; (8005ab4 <HAL_TIM_Base_Start+0xac>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d004      	beq.n	8005a64 <HAL_TIM_Base_Start+0x5c>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a16      	ldr	r2, [pc, #88]	; (8005ab8 <HAL_TIM_Base_Start+0xb0>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d111      	bne.n	8005a88 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f003 0307 	and.w	r3, r3, #7
 8005a6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2b06      	cmp	r3, #6
 8005a74:	d010      	beq.n	8005a98 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f042 0201 	orr.w	r2, r2, #1
 8005a84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a86:	e007      	b.n	8005a98 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f042 0201 	orr.w	r2, r2, #1
 8005a96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3714      	adds	r7, #20
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	40010000 	.word	0x40010000
 8005aac:	40000400 	.word	0x40000400
 8005ab0:	40000800 	.word	0x40000800
 8005ab4:	40000c00 	.word	0x40000c00
 8005ab8:	40014000 	.word	0x40014000

08005abc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d101      	bne.n	8005ace <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e041      	b.n	8005b52 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d106      	bne.n	8005ae8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f839 	bl	8005b5a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2202      	movs	r2, #2
 8005aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	3304      	adds	r3, #4
 8005af8:	4619      	mov	r1, r3
 8005afa:	4610      	mov	r0, r2
 8005afc:	f000 fdde 	bl	80066bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3708      	adds	r7, #8
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b083      	sub	sp, #12
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b62:	bf00      	nop
 8005b64:	370c      	adds	r7, #12
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
	...

08005b70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d109      	bne.n	8005b94 <HAL_TIM_PWM_Start+0x24>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	bf14      	ite	ne
 8005b8c:	2301      	movne	r3, #1
 8005b8e:	2300      	moveq	r3, #0
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	e022      	b.n	8005bda <HAL_TIM_PWM_Start+0x6a>
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	2b04      	cmp	r3, #4
 8005b98:	d109      	bne.n	8005bae <HAL_TIM_PWM_Start+0x3e>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	bf14      	ite	ne
 8005ba6:	2301      	movne	r3, #1
 8005ba8:	2300      	moveq	r3, #0
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	e015      	b.n	8005bda <HAL_TIM_PWM_Start+0x6a>
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2b08      	cmp	r3, #8
 8005bb2:	d109      	bne.n	8005bc8 <HAL_TIM_PWM_Start+0x58>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	bf14      	ite	ne
 8005bc0:	2301      	movne	r3, #1
 8005bc2:	2300      	moveq	r3, #0
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	e008      	b.n	8005bda <HAL_TIM_PWM_Start+0x6a>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	bf14      	ite	ne
 8005bd4:	2301      	movne	r3, #1
 8005bd6:	2300      	moveq	r3, #0
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d001      	beq.n	8005be2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e068      	b.n	8005cb4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d104      	bne.n	8005bf2 <HAL_TIM_PWM_Start+0x82>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2202      	movs	r2, #2
 8005bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bf0:	e013      	b.n	8005c1a <HAL_TIM_PWM_Start+0xaa>
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	2b04      	cmp	r3, #4
 8005bf6:	d104      	bne.n	8005c02 <HAL_TIM_PWM_Start+0x92>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c00:	e00b      	b.n	8005c1a <HAL_TIM_PWM_Start+0xaa>
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	2b08      	cmp	r3, #8
 8005c06:	d104      	bne.n	8005c12 <HAL_TIM_PWM_Start+0xa2>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c10:	e003      	b.n	8005c1a <HAL_TIM_PWM_Start+0xaa>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2202      	movs	r2, #2
 8005c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	6839      	ldr	r1, [r7, #0]
 8005c22:	4618      	mov	r0, r3
 8005c24:	f001 f91a 	bl	8006e5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a23      	ldr	r2, [pc, #140]	; (8005cbc <HAL_TIM_PWM_Start+0x14c>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d107      	bne.n	8005c42 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a1d      	ldr	r2, [pc, #116]	; (8005cbc <HAL_TIM_PWM_Start+0x14c>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d018      	beq.n	8005c7e <HAL_TIM_PWM_Start+0x10e>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c54:	d013      	beq.n	8005c7e <HAL_TIM_PWM_Start+0x10e>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a19      	ldr	r2, [pc, #100]	; (8005cc0 <HAL_TIM_PWM_Start+0x150>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d00e      	beq.n	8005c7e <HAL_TIM_PWM_Start+0x10e>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a17      	ldr	r2, [pc, #92]	; (8005cc4 <HAL_TIM_PWM_Start+0x154>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d009      	beq.n	8005c7e <HAL_TIM_PWM_Start+0x10e>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a16      	ldr	r2, [pc, #88]	; (8005cc8 <HAL_TIM_PWM_Start+0x158>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d004      	beq.n	8005c7e <HAL_TIM_PWM_Start+0x10e>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a14      	ldr	r2, [pc, #80]	; (8005ccc <HAL_TIM_PWM_Start+0x15c>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d111      	bne.n	8005ca2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	f003 0307 	and.w	r3, r3, #7
 8005c88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2b06      	cmp	r3, #6
 8005c8e:	d010      	beq.n	8005cb2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f042 0201 	orr.w	r2, r2, #1
 8005c9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ca0:	e007      	b.n	8005cb2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f042 0201 	orr.w	r2, r2, #1
 8005cb0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3710      	adds	r7, #16
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	40010000 	.word	0x40010000
 8005cc0:	40000400 	.word	0x40000400
 8005cc4:	40000800 	.word	0x40000800
 8005cc8:	40000c00 	.word	0x40000c00
 8005ccc:	40014000 	.word	0x40014000

08005cd0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d101      	bne.n	8005ce2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e041      	b.n	8005d66 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d106      	bne.n	8005cfc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 f839 	bl	8005d6e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2202      	movs	r2, #2
 8005d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	3304      	adds	r3, #4
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	4610      	mov	r0, r2
 8005d10:	f000 fcd4 	bl	80066bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3708      	adds	r7, #8
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b083      	sub	sp, #12
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005d76:	bf00      	nop
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
	...

08005d84 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d104      	bne.n	8005da2 <HAL_TIM_IC_Start_IT+0x1e>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	e013      	b.n	8005dca <HAL_TIM_IC_Start_IT+0x46>
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	2b04      	cmp	r3, #4
 8005da6:	d104      	bne.n	8005db2 <HAL_TIM_IC_Start_IT+0x2e>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	e00b      	b.n	8005dca <HAL_TIM_IC_Start_IT+0x46>
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	2b08      	cmp	r3, #8
 8005db6:	d104      	bne.n	8005dc2 <HAL_TIM_IC_Start_IT+0x3e>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	e003      	b.n	8005dca <HAL_TIM_IC_Start_IT+0x46>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d104      	bne.n	8005ddc <HAL_TIM_IC_Start_IT+0x58>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	e013      	b.n	8005e04 <HAL_TIM_IC_Start_IT+0x80>
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	2b04      	cmp	r3, #4
 8005de0:	d104      	bne.n	8005dec <HAL_TIM_IC_Start_IT+0x68>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	e00b      	b.n	8005e04 <HAL_TIM_IC_Start_IT+0x80>
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	2b08      	cmp	r3, #8
 8005df0:	d104      	bne.n	8005dfc <HAL_TIM_IC_Start_IT+0x78>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	e003      	b.n	8005e04 <HAL_TIM_IC_Start_IT+0x80>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e06:	7bbb      	ldrb	r3, [r7, #14]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d102      	bne.n	8005e12 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e0c:	7b7b      	ldrb	r3, [r7, #13]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d001      	beq.n	8005e16 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e0c2      	b.n	8005f9c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d104      	bne.n	8005e26 <HAL_TIM_IC_Start_IT+0xa2>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2202      	movs	r2, #2
 8005e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e24:	e013      	b.n	8005e4e <HAL_TIM_IC_Start_IT+0xca>
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	2b04      	cmp	r3, #4
 8005e2a:	d104      	bne.n	8005e36 <HAL_TIM_IC_Start_IT+0xb2>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2202      	movs	r2, #2
 8005e30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e34:	e00b      	b.n	8005e4e <HAL_TIM_IC_Start_IT+0xca>
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	2b08      	cmp	r3, #8
 8005e3a:	d104      	bne.n	8005e46 <HAL_TIM_IC_Start_IT+0xc2>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2202      	movs	r2, #2
 8005e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e44:	e003      	b.n	8005e4e <HAL_TIM_IC_Start_IT+0xca>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2202      	movs	r2, #2
 8005e4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d104      	bne.n	8005e5e <HAL_TIM_IC_Start_IT+0xda>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2202      	movs	r2, #2
 8005e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e5c:	e013      	b.n	8005e86 <HAL_TIM_IC_Start_IT+0x102>
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	2b04      	cmp	r3, #4
 8005e62:	d104      	bne.n	8005e6e <HAL_TIM_IC_Start_IT+0xea>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2202      	movs	r2, #2
 8005e68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e6c:	e00b      	b.n	8005e86 <HAL_TIM_IC_Start_IT+0x102>
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	2b08      	cmp	r3, #8
 8005e72:	d104      	bne.n	8005e7e <HAL_TIM_IC_Start_IT+0xfa>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2202      	movs	r2, #2
 8005e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e7c:	e003      	b.n	8005e86 <HAL_TIM_IC_Start_IT+0x102>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2202      	movs	r2, #2
 8005e82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b0c      	cmp	r3, #12
 8005e8a:	d841      	bhi.n	8005f10 <HAL_TIM_IC_Start_IT+0x18c>
 8005e8c:	a201      	add	r2, pc, #4	; (adr r2, 8005e94 <HAL_TIM_IC_Start_IT+0x110>)
 8005e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e92:	bf00      	nop
 8005e94:	08005ec9 	.word	0x08005ec9
 8005e98:	08005f11 	.word	0x08005f11
 8005e9c:	08005f11 	.word	0x08005f11
 8005ea0:	08005f11 	.word	0x08005f11
 8005ea4:	08005edb 	.word	0x08005edb
 8005ea8:	08005f11 	.word	0x08005f11
 8005eac:	08005f11 	.word	0x08005f11
 8005eb0:	08005f11 	.word	0x08005f11
 8005eb4:	08005eed 	.word	0x08005eed
 8005eb8:	08005f11 	.word	0x08005f11
 8005ebc:	08005f11 	.word	0x08005f11
 8005ec0:	08005f11 	.word	0x08005f11
 8005ec4:	08005eff 	.word	0x08005eff
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68da      	ldr	r2, [r3, #12]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f042 0202 	orr.w	r2, r2, #2
 8005ed6:	60da      	str	r2, [r3, #12]
      break;
 8005ed8:	e01d      	b.n	8005f16 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68da      	ldr	r2, [r3, #12]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f042 0204 	orr.w	r2, r2, #4
 8005ee8:	60da      	str	r2, [r3, #12]
      break;
 8005eea:	e014      	b.n	8005f16 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68da      	ldr	r2, [r3, #12]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f042 0208 	orr.w	r2, r2, #8
 8005efa:	60da      	str	r2, [r3, #12]
      break;
 8005efc:	e00b      	b.n	8005f16 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68da      	ldr	r2, [r3, #12]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f042 0210 	orr.w	r2, r2, #16
 8005f0c:	60da      	str	r2, [r3, #12]
      break;
 8005f0e:	e002      	b.n	8005f16 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	73fb      	strb	r3, [r7, #15]
      break;
 8005f14:	bf00      	nop
  }

  if (status == HAL_OK)
 8005f16:	7bfb      	ldrb	r3, [r7, #15]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d13e      	bne.n	8005f9a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2201      	movs	r2, #1
 8005f22:	6839      	ldr	r1, [r7, #0]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f000 ff99 	bl	8006e5c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a1d      	ldr	r2, [pc, #116]	; (8005fa4 <HAL_TIM_IC_Start_IT+0x220>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d018      	beq.n	8005f66 <HAL_TIM_IC_Start_IT+0x1e2>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f3c:	d013      	beq.n	8005f66 <HAL_TIM_IC_Start_IT+0x1e2>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a19      	ldr	r2, [pc, #100]	; (8005fa8 <HAL_TIM_IC_Start_IT+0x224>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d00e      	beq.n	8005f66 <HAL_TIM_IC_Start_IT+0x1e2>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a17      	ldr	r2, [pc, #92]	; (8005fac <HAL_TIM_IC_Start_IT+0x228>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d009      	beq.n	8005f66 <HAL_TIM_IC_Start_IT+0x1e2>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a16      	ldr	r2, [pc, #88]	; (8005fb0 <HAL_TIM_IC_Start_IT+0x22c>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d004      	beq.n	8005f66 <HAL_TIM_IC_Start_IT+0x1e2>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a14      	ldr	r2, [pc, #80]	; (8005fb4 <HAL_TIM_IC_Start_IT+0x230>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d111      	bne.n	8005f8a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	f003 0307 	and.w	r3, r3, #7
 8005f70:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	2b06      	cmp	r3, #6
 8005f76:	d010      	beq.n	8005f9a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f042 0201 	orr.w	r2, r2, #1
 8005f86:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f88:	e007      	b.n	8005f9a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f042 0201 	orr.w	r2, r2, #1
 8005f98:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	40010000 	.word	0x40010000
 8005fa8:	40000400 	.word	0x40000400
 8005fac:	40000800 	.word	0x40000800
 8005fb0:	40000c00 	.word	0x40000c00
 8005fb4:	40014000 	.word	0x40014000

08005fb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	f003 0302 	and.w	r3, r3, #2
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d020      	beq.n	800601c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f003 0302 	and.w	r3, r3, #2
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d01b      	beq.n	800601c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f06f 0202 	mvn.w	r2, #2
 8005fec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	f003 0303 	and.w	r3, r3, #3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d003      	beq.n	800600a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f7fb ffb0 	bl	8001f68 <HAL_TIM_IC_CaptureCallback>
 8006008:	e005      	b.n	8006016 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 fb38 	bl	8006680 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 fb3f 	bl	8006694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	f003 0304 	and.w	r3, r3, #4
 8006022:	2b00      	cmp	r3, #0
 8006024:	d020      	beq.n	8006068 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f003 0304 	and.w	r3, r3, #4
 800602c:	2b00      	cmp	r3, #0
 800602e:	d01b      	beq.n	8006068 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f06f 0204 	mvn.w	r2, #4
 8006038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2202      	movs	r2, #2
 800603e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f7fb ff8a 	bl	8001f68 <HAL_TIM_IC_CaptureCallback>
 8006054:	e005      	b.n	8006062 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 fb12 	bl	8006680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 fb19 	bl	8006694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	f003 0308 	and.w	r3, r3, #8
 800606e:	2b00      	cmp	r3, #0
 8006070:	d020      	beq.n	80060b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f003 0308 	and.w	r3, r3, #8
 8006078:	2b00      	cmp	r3, #0
 800607a:	d01b      	beq.n	80060b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f06f 0208 	mvn.w	r2, #8
 8006084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2204      	movs	r2, #4
 800608a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	69db      	ldr	r3, [r3, #28]
 8006092:	f003 0303 	and.w	r3, r3, #3
 8006096:	2b00      	cmp	r3, #0
 8006098:	d003      	beq.n	80060a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f7fb ff64 	bl	8001f68 <HAL_TIM_IC_CaptureCallback>
 80060a0:	e005      	b.n	80060ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 faec 	bl	8006680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 faf3 	bl	8006694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	f003 0310 	and.w	r3, r3, #16
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d020      	beq.n	8006100 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f003 0310 	and.w	r3, r3, #16
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d01b      	beq.n	8006100 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f06f 0210 	mvn.w	r2, #16
 80060d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2208      	movs	r2, #8
 80060d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	69db      	ldr	r3, [r3, #28]
 80060de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f7fb ff3e 	bl	8001f68 <HAL_TIM_IC_CaptureCallback>
 80060ec:	e005      	b.n	80060fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 fac6 	bl	8006680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 facd 	bl	8006694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	f003 0301 	and.w	r3, r3, #1
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00c      	beq.n	8006124 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f003 0301 	and.w	r3, r3, #1
 8006110:	2b00      	cmp	r3, #0
 8006112:	d007      	beq.n	8006124 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f06f 0201 	mvn.w	r2, #1
 800611c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 faa4 	bl	800666c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00c      	beq.n	8006148 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006134:	2b00      	cmp	r3, #0
 8006136:	d007      	beq.n	8006148 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 ff28 	bl	8006f98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00c      	beq.n	800616c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006158:	2b00      	cmp	r3, #0
 800615a:	d007      	beq.n	800616c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 fa9e 	bl	80066a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	f003 0320 	and.w	r3, r3, #32
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00c      	beq.n	8006190 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f003 0320 	and.w	r3, r3, #32
 800617c:	2b00      	cmp	r3, #0
 800617e:	d007      	beq.n	8006190 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f06f 0220 	mvn.w	r2, #32
 8006188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 fefa 	bl	8006f84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006190:	bf00      	nop
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b086      	sub	sp, #24
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061a4:	2300      	movs	r3, #0
 80061a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d101      	bne.n	80061b6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80061b2:	2302      	movs	r3, #2
 80061b4:	e088      	b.n	80062c8 <HAL_TIM_IC_ConfigChannel+0x130>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d11b      	bne.n	80061fc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80061d4:	f000 fc8a 	bl	8006aec <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	699a      	ldr	r2, [r3, #24]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f022 020c 	bic.w	r2, r2, #12
 80061e6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6999      	ldr	r1, [r3, #24]
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	689a      	ldr	r2, [r3, #8]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	430a      	orrs	r2, r1
 80061f8:	619a      	str	r2, [r3, #24]
 80061fa:	e060      	b.n	80062be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b04      	cmp	r3, #4
 8006200:	d11c      	bne.n	800623c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006212:	f000 fd02 	bl	8006c1a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	699a      	ldr	r2, [r3, #24]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006224:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	6999      	ldr	r1, [r3, #24]
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	021a      	lsls	r2, r3, #8
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	430a      	orrs	r2, r1
 8006238:	619a      	str	r2, [r3, #24]
 800623a:	e040      	b.n	80062be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2b08      	cmp	r3, #8
 8006240:	d11b      	bne.n	800627a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006252:	f000 fd4f 	bl	8006cf4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	69da      	ldr	r2, [r3, #28]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f022 020c 	bic.w	r2, r2, #12
 8006264:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	69d9      	ldr	r1, [r3, #28]
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	689a      	ldr	r2, [r3, #8]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	430a      	orrs	r2, r1
 8006276:	61da      	str	r2, [r3, #28]
 8006278:	e021      	b.n	80062be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2b0c      	cmp	r3, #12
 800627e:	d11c      	bne.n	80062ba <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006290:	f000 fd6c 	bl	8006d6c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	69da      	ldr	r2, [r3, #28]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80062a2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	69d9      	ldr	r1, [r3, #28]
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	021a      	lsls	r2, r3, #8
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	430a      	orrs	r2, r1
 80062b6:	61da      	str	r2, [r3, #28]
 80062b8:	e001      	b.n	80062be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3718      	adds	r7, #24
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062dc:	2300      	movs	r3, #0
 80062de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d101      	bne.n	80062ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80062ea:	2302      	movs	r3, #2
 80062ec:	e0ae      	b.n	800644c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2b0c      	cmp	r3, #12
 80062fa:	f200 809f 	bhi.w	800643c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80062fe:	a201      	add	r2, pc, #4	; (adr r2, 8006304 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006304:	08006339 	.word	0x08006339
 8006308:	0800643d 	.word	0x0800643d
 800630c:	0800643d 	.word	0x0800643d
 8006310:	0800643d 	.word	0x0800643d
 8006314:	08006379 	.word	0x08006379
 8006318:	0800643d 	.word	0x0800643d
 800631c:	0800643d 	.word	0x0800643d
 8006320:	0800643d 	.word	0x0800643d
 8006324:	080063bb 	.word	0x080063bb
 8006328:	0800643d 	.word	0x0800643d
 800632c:	0800643d 	.word	0x0800643d
 8006330:	0800643d 	.word	0x0800643d
 8006334:	080063fb 	.word	0x080063fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68b9      	ldr	r1, [r7, #8]
 800633e:	4618      	mov	r0, r3
 8006340:	f000 fa48 	bl	80067d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	699a      	ldr	r2, [r3, #24]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f042 0208 	orr.w	r2, r2, #8
 8006352:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	699a      	ldr	r2, [r3, #24]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f022 0204 	bic.w	r2, r2, #4
 8006362:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6999      	ldr	r1, [r3, #24]
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	691a      	ldr	r2, [r3, #16]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	430a      	orrs	r2, r1
 8006374:	619a      	str	r2, [r3, #24]
      break;
 8006376:	e064      	b.n	8006442 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68b9      	ldr	r1, [r7, #8]
 800637e:	4618      	mov	r0, r3
 8006380:	f000 fa8e 	bl	80068a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	699a      	ldr	r2, [r3, #24]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006392:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	699a      	ldr	r2, [r3, #24]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6999      	ldr	r1, [r3, #24]
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	021a      	lsls	r2, r3, #8
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	430a      	orrs	r2, r1
 80063b6:	619a      	str	r2, [r3, #24]
      break;
 80063b8:	e043      	b.n	8006442 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68b9      	ldr	r1, [r7, #8]
 80063c0:	4618      	mov	r0, r3
 80063c2:	f000 fad9 	bl	8006978 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	69da      	ldr	r2, [r3, #28]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f042 0208 	orr.w	r2, r2, #8
 80063d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	69da      	ldr	r2, [r3, #28]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f022 0204 	bic.w	r2, r2, #4
 80063e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	69d9      	ldr	r1, [r3, #28]
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	691a      	ldr	r2, [r3, #16]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	430a      	orrs	r2, r1
 80063f6:	61da      	str	r2, [r3, #28]
      break;
 80063f8:	e023      	b.n	8006442 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68b9      	ldr	r1, [r7, #8]
 8006400:	4618      	mov	r0, r3
 8006402:	f000 fb23 	bl	8006a4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	69da      	ldr	r2, [r3, #28]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006414:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	69da      	ldr	r2, [r3, #28]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	69d9      	ldr	r1, [r3, #28]
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	021a      	lsls	r2, r3, #8
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	430a      	orrs	r2, r1
 8006438:	61da      	str	r2, [r3, #28]
      break;
 800643a:	e002      	b.n	8006442 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	75fb      	strb	r3, [r7, #23]
      break;
 8006440:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800644a:	7dfb      	ldrb	r3, [r7, #23]
}
 800644c:	4618      	mov	r0, r3
 800644e:	3718      	adds	r7, #24
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800645e:	2300      	movs	r3, #0
 8006460:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006468:	2b01      	cmp	r3, #1
 800646a:	d101      	bne.n	8006470 <HAL_TIM_ConfigClockSource+0x1c>
 800646c:	2302      	movs	r3, #2
 800646e:	e0b4      	b.n	80065da <HAL_TIM_ConfigClockSource+0x186>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2202      	movs	r2, #2
 800647c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800648e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006496:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68ba      	ldr	r2, [r7, #8]
 800649e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064a8:	d03e      	beq.n	8006528 <HAL_TIM_ConfigClockSource+0xd4>
 80064aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064ae:	f200 8087 	bhi.w	80065c0 <HAL_TIM_ConfigClockSource+0x16c>
 80064b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064b6:	f000 8086 	beq.w	80065c6 <HAL_TIM_ConfigClockSource+0x172>
 80064ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064be:	d87f      	bhi.n	80065c0 <HAL_TIM_ConfigClockSource+0x16c>
 80064c0:	2b70      	cmp	r3, #112	; 0x70
 80064c2:	d01a      	beq.n	80064fa <HAL_TIM_ConfigClockSource+0xa6>
 80064c4:	2b70      	cmp	r3, #112	; 0x70
 80064c6:	d87b      	bhi.n	80065c0 <HAL_TIM_ConfigClockSource+0x16c>
 80064c8:	2b60      	cmp	r3, #96	; 0x60
 80064ca:	d050      	beq.n	800656e <HAL_TIM_ConfigClockSource+0x11a>
 80064cc:	2b60      	cmp	r3, #96	; 0x60
 80064ce:	d877      	bhi.n	80065c0 <HAL_TIM_ConfigClockSource+0x16c>
 80064d0:	2b50      	cmp	r3, #80	; 0x50
 80064d2:	d03c      	beq.n	800654e <HAL_TIM_ConfigClockSource+0xfa>
 80064d4:	2b50      	cmp	r3, #80	; 0x50
 80064d6:	d873      	bhi.n	80065c0 <HAL_TIM_ConfigClockSource+0x16c>
 80064d8:	2b40      	cmp	r3, #64	; 0x40
 80064da:	d058      	beq.n	800658e <HAL_TIM_ConfigClockSource+0x13a>
 80064dc:	2b40      	cmp	r3, #64	; 0x40
 80064de:	d86f      	bhi.n	80065c0 <HAL_TIM_ConfigClockSource+0x16c>
 80064e0:	2b30      	cmp	r3, #48	; 0x30
 80064e2:	d064      	beq.n	80065ae <HAL_TIM_ConfigClockSource+0x15a>
 80064e4:	2b30      	cmp	r3, #48	; 0x30
 80064e6:	d86b      	bhi.n	80065c0 <HAL_TIM_ConfigClockSource+0x16c>
 80064e8:	2b20      	cmp	r3, #32
 80064ea:	d060      	beq.n	80065ae <HAL_TIM_ConfigClockSource+0x15a>
 80064ec:	2b20      	cmp	r3, #32
 80064ee:	d867      	bhi.n	80065c0 <HAL_TIM_ConfigClockSource+0x16c>
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d05c      	beq.n	80065ae <HAL_TIM_ConfigClockSource+0x15a>
 80064f4:	2b10      	cmp	r3, #16
 80064f6:	d05a      	beq.n	80065ae <HAL_TIM_ConfigClockSource+0x15a>
 80064f8:	e062      	b.n	80065c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800650a:	f000 fc87 	bl	8006e1c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800651c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	609a      	str	r2, [r3, #8]
      break;
 8006526:	e04f      	b.n	80065c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006538:	f000 fc70 	bl	8006e1c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689a      	ldr	r2, [r3, #8]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800654a:	609a      	str	r2, [r3, #8]
      break;
 800654c:	e03c      	b.n	80065c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800655a:	461a      	mov	r2, r3
 800655c:	f000 fb2e 	bl	8006bbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2150      	movs	r1, #80	; 0x50
 8006566:	4618      	mov	r0, r3
 8006568:	f000 fc3d 	bl	8006de6 <TIM_ITRx_SetConfig>
      break;
 800656c:	e02c      	b.n	80065c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800657a:	461a      	mov	r2, r3
 800657c:	f000 fb8a 	bl	8006c94 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2160      	movs	r1, #96	; 0x60
 8006586:	4618      	mov	r0, r3
 8006588:	f000 fc2d 	bl	8006de6 <TIM_ITRx_SetConfig>
      break;
 800658c:	e01c      	b.n	80065c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800659a:	461a      	mov	r2, r3
 800659c:	f000 fb0e 	bl	8006bbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2140      	movs	r1, #64	; 0x40
 80065a6:	4618      	mov	r0, r3
 80065a8:	f000 fc1d 	bl	8006de6 <TIM_ITRx_SetConfig>
      break;
 80065ac:	e00c      	b.n	80065c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4619      	mov	r1, r3
 80065b8:	4610      	mov	r0, r2
 80065ba:	f000 fc14 	bl	8006de6 <TIM_ITRx_SetConfig>
      break;
 80065be:	e003      	b.n	80065c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	73fb      	strb	r3, [r7, #15]
      break;
 80065c4:	e000      	b.n	80065c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80065c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3710      	adds	r7, #16
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
	...

080065e4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80065ee:	2300      	movs	r3, #0
 80065f0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	2b0c      	cmp	r3, #12
 80065f6:	d831      	bhi.n	800665c <HAL_TIM_ReadCapturedValue+0x78>
 80065f8:	a201      	add	r2, pc, #4	; (adr r2, 8006600 <HAL_TIM_ReadCapturedValue+0x1c>)
 80065fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fe:	bf00      	nop
 8006600:	08006635 	.word	0x08006635
 8006604:	0800665d 	.word	0x0800665d
 8006608:	0800665d 	.word	0x0800665d
 800660c:	0800665d 	.word	0x0800665d
 8006610:	0800663f 	.word	0x0800663f
 8006614:	0800665d 	.word	0x0800665d
 8006618:	0800665d 	.word	0x0800665d
 800661c:	0800665d 	.word	0x0800665d
 8006620:	08006649 	.word	0x08006649
 8006624:	0800665d 	.word	0x0800665d
 8006628:	0800665d 	.word	0x0800665d
 800662c:	0800665d 	.word	0x0800665d
 8006630:	08006653 	.word	0x08006653
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800663a:	60fb      	str	r3, [r7, #12]

      break;
 800663c:	e00f      	b.n	800665e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006644:	60fb      	str	r3, [r7, #12]

      break;
 8006646:	e00a      	b.n	800665e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800664e:	60fb      	str	r3, [r7, #12]

      break;
 8006650:	e005      	b.n	800665e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006658:	60fb      	str	r3, [r7, #12]

      break;
 800665a:	e000      	b.n	800665e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800665c:	bf00      	nop
  }

  return tmpreg;
 800665e:	68fb      	ldr	r3, [r7, #12]
}
 8006660:	4618      	mov	r0, r3
 8006662:	3714      	adds	r7, #20
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006674:	bf00      	nop
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a3a      	ldr	r2, [pc, #232]	; (80067b8 <TIM_Base_SetConfig+0xfc>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d00f      	beq.n	80066f4 <TIM_Base_SetConfig+0x38>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066da:	d00b      	beq.n	80066f4 <TIM_Base_SetConfig+0x38>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a37      	ldr	r2, [pc, #220]	; (80067bc <TIM_Base_SetConfig+0x100>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d007      	beq.n	80066f4 <TIM_Base_SetConfig+0x38>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a36      	ldr	r2, [pc, #216]	; (80067c0 <TIM_Base_SetConfig+0x104>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d003      	beq.n	80066f4 <TIM_Base_SetConfig+0x38>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a35      	ldr	r2, [pc, #212]	; (80067c4 <TIM_Base_SetConfig+0x108>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d108      	bne.n	8006706 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	4313      	orrs	r3, r2
 8006704:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a2b      	ldr	r2, [pc, #172]	; (80067b8 <TIM_Base_SetConfig+0xfc>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d01b      	beq.n	8006746 <TIM_Base_SetConfig+0x8a>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006714:	d017      	beq.n	8006746 <TIM_Base_SetConfig+0x8a>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a28      	ldr	r2, [pc, #160]	; (80067bc <TIM_Base_SetConfig+0x100>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d013      	beq.n	8006746 <TIM_Base_SetConfig+0x8a>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a27      	ldr	r2, [pc, #156]	; (80067c0 <TIM_Base_SetConfig+0x104>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d00f      	beq.n	8006746 <TIM_Base_SetConfig+0x8a>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a26      	ldr	r2, [pc, #152]	; (80067c4 <TIM_Base_SetConfig+0x108>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d00b      	beq.n	8006746 <TIM_Base_SetConfig+0x8a>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a25      	ldr	r2, [pc, #148]	; (80067c8 <TIM_Base_SetConfig+0x10c>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d007      	beq.n	8006746 <TIM_Base_SetConfig+0x8a>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a24      	ldr	r2, [pc, #144]	; (80067cc <TIM_Base_SetConfig+0x110>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d003      	beq.n	8006746 <TIM_Base_SetConfig+0x8a>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a23      	ldr	r2, [pc, #140]	; (80067d0 <TIM_Base_SetConfig+0x114>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d108      	bne.n	8006758 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800674c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	4313      	orrs	r3, r2
 8006756:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	4313      	orrs	r3, r2
 8006764:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	689a      	ldr	r2, [r3, #8]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a0e      	ldr	r2, [pc, #56]	; (80067b8 <TIM_Base_SetConfig+0xfc>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d103      	bne.n	800678c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	691a      	ldr	r2, [r3, #16]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	2b01      	cmp	r3, #1
 800679c:	d105      	bne.n	80067aa <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	f023 0201 	bic.w	r2, r3, #1
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	611a      	str	r2, [r3, #16]
  }
}
 80067aa:	bf00      	nop
 80067ac:	3714      	adds	r7, #20
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	40010000 	.word	0x40010000
 80067bc:	40000400 	.word	0x40000400
 80067c0:	40000800 	.word	0x40000800
 80067c4:	40000c00 	.word	0x40000c00
 80067c8:	40014000 	.word	0x40014000
 80067cc:	40014400 	.word	0x40014400
 80067d0:	40014800 	.word	0x40014800

080067d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b087      	sub	sp, #28
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a1b      	ldr	r3, [r3, #32]
 80067e8:	f023 0201 	bic.w	r2, r3, #1
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f023 0303 	bic.w	r3, r3, #3
 800680a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	4313      	orrs	r3, r2
 8006814:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	f023 0302 	bic.w	r3, r3, #2
 800681c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	697a      	ldr	r2, [r7, #20]
 8006824:	4313      	orrs	r3, r2
 8006826:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4a1c      	ldr	r2, [pc, #112]	; (800689c <TIM_OC1_SetConfig+0xc8>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d10c      	bne.n	800684a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	f023 0308 	bic.w	r3, r3, #8
 8006836:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	4313      	orrs	r3, r2
 8006840:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	f023 0304 	bic.w	r3, r3, #4
 8006848:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a13      	ldr	r2, [pc, #76]	; (800689c <TIM_OC1_SetConfig+0xc8>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d111      	bne.n	8006876 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006858:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006860:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	4313      	orrs	r3, r2
 800686a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	4313      	orrs	r3, r2
 8006874:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	693a      	ldr	r2, [r7, #16]
 800687a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	685a      	ldr	r2, [r3, #4]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	697a      	ldr	r2, [r7, #20]
 800688e:	621a      	str	r2, [r3, #32]
}
 8006890:	bf00      	nop
 8006892:	371c      	adds	r7, #28
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr
 800689c:	40010000 	.word	0x40010000

080068a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b087      	sub	sp, #28
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a1b      	ldr	r3, [r3, #32]
 80068ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a1b      	ldr	r3, [r3, #32]
 80068b4:	f023 0210 	bic.w	r2, r3, #16
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	021b      	lsls	r3, r3, #8
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	f023 0320 	bic.w	r3, r3, #32
 80068ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	011b      	lsls	r3, r3, #4
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a1e      	ldr	r2, [pc, #120]	; (8006974 <TIM_OC2_SetConfig+0xd4>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d10d      	bne.n	800691c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006906:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	011b      	lsls	r3, r3, #4
 800690e:	697a      	ldr	r2, [r7, #20]
 8006910:	4313      	orrs	r3, r2
 8006912:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800691a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a15      	ldr	r2, [pc, #84]	; (8006974 <TIM_OC2_SetConfig+0xd4>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d113      	bne.n	800694c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800692a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006932:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	695b      	ldr	r3, [r3, #20]
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	693a      	ldr	r2, [r7, #16]
 800693c:	4313      	orrs	r3, r2
 800693e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	699b      	ldr	r3, [r3, #24]
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	693a      	ldr	r2, [r7, #16]
 8006948:	4313      	orrs	r3, r2
 800694a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	693a      	ldr	r2, [r7, #16]
 8006950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	685a      	ldr	r2, [r3, #4]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	621a      	str	r2, [r3, #32]
}
 8006966:	bf00      	nop
 8006968:	371c      	adds	r7, #28
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	40010000 	.word	0x40010000

08006978 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006978:	b480      	push	{r7}
 800697a:	b087      	sub	sp, #28
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a1b      	ldr	r3, [r3, #32]
 8006986:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a1b      	ldr	r3, [r3, #32]
 800698c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	69db      	ldr	r3, [r3, #28]
 800699e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f023 0303 	bic.w	r3, r3, #3
 80069ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	021b      	lsls	r3, r3, #8
 80069c8:	697a      	ldr	r2, [r7, #20]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a1d      	ldr	r2, [pc, #116]	; (8006a48 <TIM_OC3_SetConfig+0xd0>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d10d      	bne.n	80069f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	021b      	lsls	r3, r3, #8
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a14      	ldr	r2, [pc, #80]	; (8006a48 <TIM_OC3_SetConfig+0xd0>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d113      	bne.n	8006a22 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	695b      	ldr	r3, [r3, #20]
 8006a0e:	011b      	lsls	r3, r3, #4
 8006a10:	693a      	ldr	r2, [r7, #16]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	011b      	lsls	r3, r3, #4
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	693a      	ldr	r2, [r7, #16]
 8006a26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	685a      	ldr	r2, [r3, #4]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	697a      	ldr	r2, [r7, #20]
 8006a3a:	621a      	str	r2, [r3, #32]
}
 8006a3c:	bf00      	nop
 8006a3e:	371c      	adds	r7, #28
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr
 8006a48:	40010000 	.word	0x40010000

08006a4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b087      	sub	sp, #28
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6a1b      	ldr	r3, [r3, #32]
 8006a5a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6a1b      	ldr	r3, [r3, #32]
 8006a60:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	69db      	ldr	r3, [r3, #28]
 8006a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	021b      	lsls	r3, r3, #8
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	031b      	lsls	r3, r3, #12
 8006a9e:	693a      	ldr	r2, [r7, #16]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a10      	ldr	r2, [pc, #64]	; (8006ae8 <TIM_OC4_SetConfig+0x9c>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d109      	bne.n	8006ac0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ab2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	695b      	ldr	r3, [r3, #20]
 8006ab8:	019b      	lsls	r3, r3, #6
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	697a      	ldr	r2, [r7, #20]
 8006ac4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	685a      	ldr	r2, [r3, #4]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	621a      	str	r2, [r3, #32]
}
 8006ada:	bf00      	nop
 8006adc:	371c      	adds	r7, #28
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	40010000 	.word	0x40010000

08006aec <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b087      	sub	sp, #28
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
 8006af8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6a1b      	ldr	r3, [r3, #32]
 8006afe:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6a1b      	ldr	r3, [r3, #32]
 8006b04:	f023 0201 	bic.w	r2, r3, #1
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	699b      	ldr	r3, [r3, #24]
 8006b10:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	4a24      	ldr	r2, [pc, #144]	; (8006ba8 <TIM_TI1_SetConfig+0xbc>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d013      	beq.n	8006b42 <TIM_TI1_SetConfig+0x56>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b20:	d00f      	beq.n	8006b42 <TIM_TI1_SetConfig+0x56>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	4a21      	ldr	r2, [pc, #132]	; (8006bac <TIM_TI1_SetConfig+0xc0>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d00b      	beq.n	8006b42 <TIM_TI1_SetConfig+0x56>
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	4a20      	ldr	r2, [pc, #128]	; (8006bb0 <TIM_TI1_SetConfig+0xc4>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d007      	beq.n	8006b42 <TIM_TI1_SetConfig+0x56>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	4a1f      	ldr	r2, [pc, #124]	; (8006bb4 <TIM_TI1_SetConfig+0xc8>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d003      	beq.n	8006b42 <TIM_TI1_SetConfig+0x56>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	4a1e      	ldr	r2, [pc, #120]	; (8006bb8 <TIM_TI1_SetConfig+0xcc>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d101      	bne.n	8006b46 <TIM_TI1_SetConfig+0x5a>
 8006b42:	2301      	movs	r3, #1
 8006b44:	e000      	b.n	8006b48 <TIM_TI1_SetConfig+0x5c>
 8006b46:	2300      	movs	r3, #0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d008      	beq.n	8006b5e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	f023 0303 	bic.w	r3, r3, #3
 8006b52:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006b54:	697a      	ldr	r2, [r7, #20]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	617b      	str	r3, [r7, #20]
 8006b5c:	e003      	b.n	8006b66 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f043 0301 	orr.w	r3, r3, #1
 8006b64:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	011b      	lsls	r3, r3, #4
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	f023 030a 	bic.w	r3, r3, #10
 8006b80:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	f003 030a 	and.w	r3, r3, #10
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	693a      	ldr	r2, [r7, #16]
 8006b98:	621a      	str	r2, [r3, #32]
}
 8006b9a:	bf00      	nop
 8006b9c:	371c      	adds	r7, #28
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	40010000 	.word	0x40010000
 8006bac:	40000400 	.word	0x40000400
 8006bb0:	40000800 	.word	0x40000800
 8006bb4:	40000c00 	.word	0x40000c00
 8006bb8:	40014000 	.word	0x40014000

08006bbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b087      	sub	sp, #28
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6a1b      	ldr	r3, [r3, #32]
 8006bcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6a1b      	ldr	r3, [r3, #32]
 8006bd2:	f023 0201 	bic.w	r2, r3, #1
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006be6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	011b      	lsls	r3, r3, #4
 8006bec:	693a      	ldr	r2, [r7, #16]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	f023 030a 	bic.w	r3, r3, #10
 8006bf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bfa:	697a      	ldr	r2, [r7, #20]
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	621a      	str	r2, [r3, #32]
}
 8006c0e:	bf00      	nop
 8006c10:	371c      	adds	r7, #28
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr

08006c1a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	b087      	sub	sp, #28
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	60f8      	str	r0, [r7, #12]
 8006c22:	60b9      	str	r1, [r7, #8]
 8006c24:	607a      	str	r2, [r7, #4]
 8006c26:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6a1b      	ldr	r3, [r3, #32]
 8006c2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	f023 0210 	bic.w	r2, r3, #16
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	699b      	ldr	r3, [r3, #24]
 8006c3e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	021b      	lsls	r3, r3, #8
 8006c4c:	693a      	ldr	r2, [r7, #16]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	031b      	lsls	r3, r3, #12
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	693a      	ldr	r2, [r7, #16]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c6c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	011b      	lsls	r3, r3, #4
 8006c72:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006c76:	697a      	ldr	r2, [r7, #20]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	693a      	ldr	r2, [r7, #16]
 8006c80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	697a      	ldr	r2, [r7, #20]
 8006c86:	621a      	str	r2, [r3, #32]
}
 8006c88:	bf00      	nop
 8006c8a:	371c      	adds	r7, #28
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b087      	sub	sp, #28
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6a1b      	ldr	r3, [r3, #32]
 8006ca4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	f023 0210 	bic.w	r2, r3, #16
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	031b      	lsls	r3, r3, #12
 8006cc4:	693a      	ldr	r2, [r7, #16]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006cd0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	011b      	lsls	r3, r3, #4
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	693a      	ldr	r2, [r7, #16]
 8006ce0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	621a      	str	r2, [r3, #32]
}
 8006ce8:	bf00      	nop
 8006cea:	371c      	adds	r7, #28
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b087      	sub	sp, #28
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
 8006d00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6a1b      	ldr	r3, [r3, #32]
 8006d06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6a1b      	ldr	r3, [r3, #32]
 8006d0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	69db      	ldr	r3, [r3, #28]
 8006d18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	f023 0303 	bic.w	r3, r3, #3
 8006d20:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006d22:	693a      	ldr	r2, [r7, #16]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d30:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	011b      	lsls	r3, r3, #4
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	693a      	ldr	r2, [r7, #16]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006d44:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	021b      	lsls	r3, r3, #8
 8006d4a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006d4e:	697a      	ldr	r2, [r7, #20]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	693a      	ldr	r2, [r7, #16]
 8006d58:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	697a      	ldr	r2, [r7, #20]
 8006d5e:	621a      	str	r2, [r3, #32]
}
 8006d60:	bf00      	nop
 8006d62:	371c      	adds	r7, #28
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b087      	sub	sp, #28
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	607a      	str	r2, [r7, #4]
 8006d78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
 8006d7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6a1b      	ldr	r3, [r3, #32]
 8006d84:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	69db      	ldr	r3, [r3, #28]
 8006d90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d98:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	021b      	lsls	r3, r3, #8
 8006d9e:	693a      	ldr	r2, [r7, #16]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006daa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	031b      	lsls	r3, r3, #12
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	693a      	ldr	r2, [r7, #16]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006dbe:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	031b      	lsls	r3, r3, #12
 8006dc4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006dc8:	697a      	ldr	r2, [r7, #20]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	693a      	ldr	r2, [r7, #16]
 8006dd2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	621a      	str	r2, [r3, #32]
}
 8006dda:	bf00      	nop
 8006ddc:	371c      	adds	r7, #28
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006de6:	b480      	push	{r7}
 8006de8:	b085      	sub	sp, #20
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
 8006dee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	f043 0307 	orr.w	r3, r3, #7
 8006e08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	609a      	str	r2, [r3, #8]
}
 8006e10:	bf00      	nop
 8006e12:	3714      	adds	r7, #20
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b087      	sub	sp, #28
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	607a      	str	r2, [r7, #4]
 8006e28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	021a      	lsls	r2, r3, #8
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	431a      	orrs	r2, r3
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	697a      	ldr	r2, [r7, #20]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	697a      	ldr	r2, [r7, #20]
 8006e4e:	609a      	str	r2, [r3, #8]
}
 8006e50:	bf00      	nop
 8006e52:	371c      	adds	r7, #28
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b087      	sub	sp, #28
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	f003 031f 	and.w	r3, r3, #31
 8006e6e:	2201      	movs	r2, #1
 8006e70:	fa02 f303 	lsl.w	r3, r2, r3
 8006e74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6a1a      	ldr	r2, [r3, #32]
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	43db      	mvns	r3, r3
 8006e7e:	401a      	ands	r2, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6a1a      	ldr	r2, [r3, #32]
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	f003 031f 	and.w	r3, r3, #31
 8006e8e:	6879      	ldr	r1, [r7, #4]
 8006e90:	fa01 f303 	lsl.w	r3, r1, r3
 8006e94:	431a      	orrs	r2, r3
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	621a      	str	r2, [r3, #32]
}
 8006e9a:	bf00      	nop
 8006e9c:	371c      	adds	r7, #28
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
	...

08006ea8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d101      	bne.n	8006ec0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ebc:	2302      	movs	r3, #2
 8006ebe:	e050      	b.n	8006f62 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2202      	movs	r2, #2
 8006ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ee6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a1c      	ldr	r2, [pc, #112]	; (8006f70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d018      	beq.n	8006f36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f0c:	d013      	beq.n	8006f36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a18      	ldr	r2, [pc, #96]	; (8006f74 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d00e      	beq.n	8006f36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a16      	ldr	r2, [pc, #88]	; (8006f78 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d009      	beq.n	8006f36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a15      	ldr	r2, [pc, #84]	; (8006f7c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d004      	beq.n	8006f36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a13      	ldr	r2, [pc, #76]	; (8006f80 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d10c      	bne.n	8006f50 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	68ba      	ldr	r2, [r7, #8]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	68ba      	ldr	r2, [r7, #8]
 8006f4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3714      	adds	r7, #20
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	40010000 	.word	0x40010000
 8006f74:	40000400 	.word	0x40000400
 8006f78:	40000800 	.word	0x40000800
 8006f7c:	40000c00 	.word	0x40000c00
 8006f80:	40014000 	.word	0x40014000

08006f84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006fa0:	bf00      	nop
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d101      	bne.n	8006fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e042      	b.n	8007044 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d106      	bne.n	8006fd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7fb fdb8 	bl	8002b48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2224      	movs	r2, #36	; 0x24
 8006fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68da      	ldr	r2, [r3, #12]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006fee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 fdbd 	bl	8007b70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	691a      	ldr	r2, [r3, #16]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007004:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	695a      	ldr	r2, [r3, #20]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007014:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	68da      	ldr	r2, [r3, #12]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007024:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2220      	movs	r2, #32
 8007030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2220      	movs	r2, #32
 8007038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	3708      	adds	r7, #8
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b08a      	sub	sp, #40	; 0x28
 8007050:	af02      	add	r7, sp, #8
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	603b      	str	r3, [r7, #0]
 8007058:	4613      	mov	r3, r2
 800705a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800705c:	2300      	movs	r3, #0
 800705e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007066:	b2db      	uxtb	r3, r3
 8007068:	2b20      	cmp	r3, #32
 800706a:	d175      	bne.n	8007158 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d002      	beq.n	8007078 <HAL_UART_Transmit+0x2c>
 8007072:	88fb      	ldrh	r3, [r7, #6]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d101      	bne.n	800707c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	e06e      	b.n	800715a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2200      	movs	r2, #0
 8007080:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2221      	movs	r2, #33	; 0x21
 8007086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800708a:	f7fb ffe7 	bl	800305c <HAL_GetTick>
 800708e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	88fa      	ldrh	r2, [r7, #6]
 8007094:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	88fa      	ldrh	r2, [r7, #6]
 800709a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070a4:	d108      	bne.n	80070b8 <HAL_UART_Transmit+0x6c>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d104      	bne.n	80070b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80070ae:	2300      	movs	r3, #0
 80070b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	61bb      	str	r3, [r7, #24]
 80070b6:	e003      	b.n	80070c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070bc:	2300      	movs	r3, #0
 80070be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80070c0:	e02e      	b.n	8007120 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	9300      	str	r3, [sp, #0]
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	2200      	movs	r2, #0
 80070ca:	2180      	movs	r1, #128	; 0x80
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f000 fb1f 	bl	8007710 <UART_WaitOnFlagUntilTimeout>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d005      	beq.n	80070e4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2220      	movs	r2, #32
 80070dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80070e0:	2303      	movs	r3, #3
 80070e2:	e03a      	b.n	800715a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d10b      	bne.n	8007102 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	881b      	ldrh	r3, [r3, #0]
 80070ee:	461a      	mov	r2, r3
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	3302      	adds	r3, #2
 80070fe:	61bb      	str	r3, [r7, #24]
 8007100:	e007      	b.n	8007112 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	781a      	ldrb	r2, [r3, #0]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800710c:	69fb      	ldr	r3, [r7, #28]
 800710e:	3301      	adds	r3, #1
 8007110:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007116:	b29b      	uxth	r3, r3
 8007118:	3b01      	subs	r3, #1
 800711a:	b29a      	uxth	r2, r3
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007124:	b29b      	uxth	r3, r3
 8007126:	2b00      	cmp	r3, #0
 8007128:	d1cb      	bne.n	80070c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	2200      	movs	r2, #0
 8007132:	2140      	movs	r1, #64	; 0x40
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	f000 faeb 	bl	8007710 <UART_WaitOnFlagUntilTimeout>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d005      	beq.n	800714c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2220      	movs	r2, #32
 8007144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8007148:	2303      	movs	r3, #3
 800714a:	e006      	b.n	800715a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2220      	movs	r2, #32
 8007150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007154:	2300      	movs	r3, #0
 8007156:	e000      	b.n	800715a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007158:	2302      	movs	r3, #2
  }
}
 800715a:	4618      	mov	r0, r3
 800715c:	3720      	adds	r7, #32
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007162:	b580      	push	{r7, lr}
 8007164:	b084      	sub	sp, #16
 8007166:	af00      	add	r7, sp, #0
 8007168:	60f8      	str	r0, [r7, #12]
 800716a:	60b9      	str	r1, [r7, #8]
 800716c:	4613      	mov	r3, r2
 800716e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007176:	b2db      	uxtb	r3, r3
 8007178:	2b20      	cmp	r3, #32
 800717a:	d112      	bne.n	80071a2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d002      	beq.n	8007188 <HAL_UART_Receive_IT+0x26>
 8007182:	88fb      	ldrh	r3, [r7, #6]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d101      	bne.n	800718c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e00b      	b.n	80071a4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007192:	88fb      	ldrh	r3, [r7, #6]
 8007194:	461a      	mov	r2, r3
 8007196:	68b9      	ldr	r1, [r7, #8]
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f000 fb12 	bl	80077c2 <UART_Start_Receive_IT>
 800719e:	4603      	mov	r3, r0
 80071a0:	e000      	b.n	80071a4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80071a2:	2302      	movs	r3, #2
  }
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b0ba      	sub	sp, #232	; 0xe8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	695b      	ldr	r3, [r3, #20]
 80071ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80071d2:	2300      	movs	r3, #0
 80071d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80071d8:	2300      	movs	r3, #0
 80071da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80071de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071e2:	f003 030f 	and.w	r3, r3, #15
 80071e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80071ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10f      	bne.n	8007212 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071f6:	f003 0320 	and.w	r3, r3, #32
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d009      	beq.n	8007212 <HAL_UART_IRQHandler+0x66>
 80071fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007202:	f003 0320 	and.w	r3, r3, #32
 8007206:	2b00      	cmp	r3, #0
 8007208:	d003      	beq.n	8007212 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 fbf2 	bl	80079f4 <UART_Receive_IT>
      return;
 8007210:	e25b      	b.n	80076ca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007212:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007216:	2b00      	cmp	r3, #0
 8007218:	f000 80de 	beq.w	80073d8 <HAL_UART_IRQHandler+0x22c>
 800721c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007220:	f003 0301 	and.w	r3, r3, #1
 8007224:	2b00      	cmp	r3, #0
 8007226:	d106      	bne.n	8007236 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800722c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007230:	2b00      	cmp	r3, #0
 8007232:	f000 80d1 	beq.w	80073d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800723a:	f003 0301 	and.w	r3, r3, #1
 800723e:	2b00      	cmp	r3, #0
 8007240:	d00b      	beq.n	800725a <HAL_UART_IRQHandler+0xae>
 8007242:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800724a:	2b00      	cmp	r3, #0
 800724c:	d005      	beq.n	800725a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007252:	f043 0201 	orr.w	r2, r3, #1
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800725a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800725e:	f003 0304 	and.w	r3, r3, #4
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00b      	beq.n	800727e <HAL_UART_IRQHandler+0xd2>
 8007266:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800726a:	f003 0301 	and.w	r3, r3, #1
 800726e:	2b00      	cmp	r3, #0
 8007270:	d005      	beq.n	800727e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007276:	f043 0202 	orr.w	r2, r3, #2
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800727e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007282:	f003 0302 	and.w	r3, r3, #2
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00b      	beq.n	80072a2 <HAL_UART_IRQHandler+0xf6>
 800728a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800728e:	f003 0301 	and.w	r3, r3, #1
 8007292:	2b00      	cmp	r3, #0
 8007294:	d005      	beq.n	80072a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800729a:	f043 0204 	orr.w	r2, r3, #4
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80072a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072a6:	f003 0308 	and.w	r3, r3, #8
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d011      	beq.n	80072d2 <HAL_UART_IRQHandler+0x126>
 80072ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072b2:	f003 0320 	and.w	r3, r3, #32
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d105      	bne.n	80072c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80072ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072be:	f003 0301 	and.w	r3, r3, #1
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d005      	beq.n	80072d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ca:	f043 0208 	orr.w	r2, r3, #8
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f000 81f2 	beq.w	80076c0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072e0:	f003 0320 	and.w	r3, r3, #32
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d008      	beq.n	80072fa <HAL_UART_IRQHandler+0x14e>
 80072e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072ec:	f003 0320 	and.w	r3, r3, #32
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d002      	beq.n	80072fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 fb7d 	bl	80079f4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	695b      	ldr	r3, [r3, #20]
 8007300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007304:	2b40      	cmp	r3, #64	; 0x40
 8007306:	bf0c      	ite	eq
 8007308:	2301      	moveq	r3, #1
 800730a:	2300      	movne	r3, #0
 800730c:	b2db      	uxtb	r3, r3
 800730e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007316:	f003 0308 	and.w	r3, r3, #8
 800731a:	2b00      	cmp	r3, #0
 800731c:	d103      	bne.n	8007326 <HAL_UART_IRQHandler+0x17a>
 800731e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007322:	2b00      	cmp	r3, #0
 8007324:	d04f      	beq.n	80073c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 fa85 	bl	8007836 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	695b      	ldr	r3, [r3, #20]
 8007332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007336:	2b40      	cmp	r3, #64	; 0x40
 8007338:	d141      	bne.n	80073be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	3314      	adds	r3, #20
 8007340:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007344:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007348:	e853 3f00 	ldrex	r3, [r3]
 800734c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007350:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007354:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007358:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	3314      	adds	r3, #20
 8007362:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007366:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800736a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007372:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007376:	e841 2300 	strex	r3, r2, [r1]
 800737a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800737e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1d9      	bne.n	800733a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800738a:	2b00      	cmp	r3, #0
 800738c:	d013      	beq.n	80073b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007392:	4a7e      	ldr	r2, [pc, #504]	; (800758c <HAL_UART_IRQHandler+0x3e0>)
 8007394:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800739a:	4618      	mov	r0, r3
 800739c:	f7fc f80f 	bl	80033be <HAL_DMA_Abort_IT>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d016      	beq.n	80073d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80073b0:	4610      	mov	r0, r2
 80073b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073b4:	e00e      	b.n	80073d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 f994 	bl	80076e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073bc:	e00a      	b.n	80073d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 f990 	bl	80076e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073c4:	e006      	b.n	80073d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f98c 	bl	80076e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80073d2:	e175      	b.n	80076c0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073d4:	bf00      	nop
    return;
 80073d6:	e173      	b.n	80076c0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073dc:	2b01      	cmp	r3, #1
 80073de:	f040 814f 	bne.w	8007680 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80073e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073e6:	f003 0310 	and.w	r3, r3, #16
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	f000 8148 	beq.w	8007680 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80073f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073f4:	f003 0310 	and.w	r3, r3, #16
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f000 8141 	beq.w	8007680 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073fe:	2300      	movs	r3, #0
 8007400:	60bb      	str	r3, [r7, #8]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	60bb      	str	r3, [r7, #8]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	60bb      	str	r3, [r7, #8]
 8007412:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	695b      	ldr	r3, [r3, #20]
 800741a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800741e:	2b40      	cmp	r3, #64	; 0x40
 8007420:	f040 80b6 	bne.w	8007590 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007430:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007434:	2b00      	cmp	r3, #0
 8007436:	f000 8145 	beq.w	80076c4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800743e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007442:	429a      	cmp	r2, r3
 8007444:	f080 813e 	bcs.w	80076c4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800744e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007454:	69db      	ldr	r3, [r3, #28]
 8007456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800745a:	f000 8088 	beq.w	800756e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	330c      	adds	r3, #12
 8007464:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007468:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800746c:	e853 3f00 	ldrex	r3, [r3]
 8007470:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007474:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007478:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800747c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	330c      	adds	r3, #12
 8007486:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800748a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800748e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007492:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007496:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800749a:	e841 2300 	strex	r3, r2, [r1]
 800749e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80074a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1d9      	bne.n	800745e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	3314      	adds	r3, #20
 80074b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074b4:	e853 3f00 	ldrex	r3, [r3]
 80074b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80074ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074bc:	f023 0301 	bic.w	r3, r3, #1
 80074c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	3314      	adds	r3, #20
 80074ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80074ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80074d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80074d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80074da:	e841 2300 	strex	r3, r2, [r1]
 80074de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80074e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d1e1      	bne.n	80074aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	3314      	adds	r3, #20
 80074ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074f0:	e853 3f00 	ldrex	r3, [r3]
 80074f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80074f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	3314      	adds	r3, #20
 8007506:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800750a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800750c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007510:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007512:	e841 2300 	strex	r3, r2, [r1]
 8007516:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007518:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800751a:	2b00      	cmp	r3, #0
 800751c:	d1e3      	bne.n	80074e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2220      	movs	r2, #32
 8007522:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	330c      	adds	r3, #12
 8007532:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007536:	e853 3f00 	ldrex	r3, [r3]
 800753a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800753c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800753e:	f023 0310 	bic.w	r3, r3, #16
 8007542:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	330c      	adds	r3, #12
 800754c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007550:	65ba      	str	r2, [r7, #88]	; 0x58
 8007552:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007554:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007556:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007558:	e841 2300 	strex	r3, r2, [r1]
 800755c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800755e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007560:	2b00      	cmp	r3, #0
 8007562:	d1e3      	bne.n	800752c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007568:	4618      	mov	r0, r3
 800756a:	f7fb feb8 	bl	80032de <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2202      	movs	r2, #2
 8007572:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800757c:	b29b      	uxth	r3, r3
 800757e:	1ad3      	subs	r3, r2, r3
 8007580:	b29b      	uxth	r3, r3
 8007582:	4619      	mov	r1, r3
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 f8b7 	bl	80076f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800758a:	e09b      	b.n	80076c4 <HAL_UART_IRQHandler+0x518>
 800758c:	080078fd 	.word	0x080078fd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007598:	b29b      	uxth	r3, r3
 800759a:	1ad3      	subs	r3, r2, r3
 800759c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f000 808e 	beq.w	80076c8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80075ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	f000 8089 	beq.w	80076c8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	330c      	adds	r3, #12
 80075bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c0:	e853 3f00 	ldrex	r3, [r3]
 80075c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80075c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	330c      	adds	r3, #12
 80075d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80075da:	647a      	str	r2, [r7, #68]	; 0x44
 80075dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075e2:	e841 2300 	strex	r3, r2, [r1]
 80075e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1e3      	bne.n	80075b6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	3314      	adds	r3, #20
 80075f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f8:	e853 3f00 	ldrex	r3, [r3]
 80075fc:	623b      	str	r3, [r7, #32]
   return(result);
 80075fe:	6a3b      	ldr	r3, [r7, #32]
 8007600:	f023 0301 	bic.w	r3, r3, #1
 8007604:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	3314      	adds	r3, #20
 800760e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007612:	633a      	str	r2, [r7, #48]	; 0x30
 8007614:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007616:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800761a:	e841 2300 	strex	r3, r2, [r1]
 800761e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1e3      	bne.n	80075ee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2220      	movs	r2, #32
 800762a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	330c      	adds	r3, #12
 800763a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	e853 3f00 	ldrex	r3, [r3]
 8007642:	60fb      	str	r3, [r7, #12]
   return(result);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f023 0310 	bic.w	r3, r3, #16
 800764a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	330c      	adds	r3, #12
 8007654:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007658:	61fa      	str	r2, [r7, #28]
 800765a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765c:	69b9      	ldr	r1, [r7, #24]
 800765e:	69fa      	ldr	r2, [r7, #28]
 8007660:	e841 2300 	strex	r3, r2, [r1]
 8007664:	617b      	str	r3, [r7, #20]
   return(result);
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d1e3      	bne.n	8007634 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2202      	movs	r2, #2
 8007670:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007672:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007676:	4619      	mov	r1, r3
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 f83d 	bl	80076f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800767e:	e023      	b.n	80076c8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007688:	2b00      	cmp	r3, #0
 800768a:	d009      	beq.n	80076a0 <HAL_UART_IRQHandler+0x4f4>
 800768c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007694:	2b00      	cmp	r3, #0
 8007696:	d003      	beq.n	80076a0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 f943 	bl	8007924 <UART_Transmit_IT>
    return;
 800769e:	e014      	b.n	80076ca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80076a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00e      	beq.n	80076ca <HAL_UART_IRQHandler+0x51e>
 80076ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d008      	beq.n	80076ca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 f983 	bl	80079c4 <UART_EndTransmit_IT>
    return;
 80076be:	e004      	b.n	80076ca <HAL_UART_IRQHandler+0x51e>
    return;
 80076c0:	bf00      	nop
 80076c2:	e002      	b.n	80076ca <HAL_UART_IRQHandler+0x51e>
      return;
 80076c4:	bf00      	nop
 80076c6:	e000      	b.n	80076ca <HAL_UART_IRQHandler+0x51e>
      return;
 80076c8:	bf00      	nop
  }
}
 80076ca:	37e8      	adds	r7, #232	; 0xe8
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80076d8:	bf00      	nop
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80076ec:	bf00      	nop
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	460b      	mov	r3, r1
 8007702:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007704:	bf00      	nop
 8007706:	370c      	adds	r7, #12
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b086      	sub	sp, #24
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	603b      	str	r3, [r7, #0]
 800771c:	4613      	mov	r3, r2
 800771e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007720:	e03b      	b.n	800779a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007722:	6a3b      	ldr	r3, [r7, #32]
 8007724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007728:	d037      	beq.n	800779a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800772a:	f7fb fc97 	bl	800305c <HAL_GetTick>
 800772e:	4602      	mov	r2, r0
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	1ad3      	subs	r3, r2, r3
 8007734:	6a3a      	ldr	r2, [r7, #32]
 8007736:	429a      	cmp	r2, r3
 8007738:	d302      	bcc.n	8007740 <UART_WaitOnFlagUntilTimeout+0x30>
 800773a:	6a3b      	ldr	r3, [r7, #32]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d101      	bne.n	8007744 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007740:	2303      	movs	r3, #3
 8007742:	e03a      	b.n	80077ba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	f003 0304 	and.w	r3, r3, #4
 800774e:	2b00      	cmp	r3, #0
 8007750:	d023      	beq.n	800779a <UART_WaitOnFlagUntilTimeout+0x8a>
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	2b80      	cmp	r3, #128	; 0x80
 8007756:	d020      	beq.n	800779a <UART_WaitOnFlagUntilTimeout+0x8a>
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	2b40      	cmp	r3, #64	; 0x40
 800775c:	d01d      	beq.n	800779a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 0308 	and.w	r3, r3, #8
 8007768:	2b08      	cmp	r3, #8
 800776a:	d116      	bne.n	800779a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800776c:	2300      	movs	r3, #0
 800776e:	617b      	str	r3, [r7, #20]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	617b      	str	r3, [r7, #20]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	617b      	str	r3, [r7, #20]
 8007780:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007782:	68f8      	ldr	r0, [r7, #12]
 8007784:	f000 f857 	bl	8007836 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2208      	movs	r2, #8
 800778c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2200      	movs	r2, #0
 8007792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e00f      	b.n	80077ba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	4013      	ands	r3, r2
 80077a4:	68ba      	ldr	r2, [r7, #8]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	bf0c      	ite	eq
 80077aa:	2301      	moveq	r3, #1
 80077ac:	2300      	movne	r3, #0
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	461a      	mov	r2, r3
 80077b2:	79fb      	ldrb	r3, [r7, #7]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d0b4      	beq.n	8007722 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3718      	adds	r7, #24
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077c2:	b480      	push	{r7}
 80077c4:	b085      	sub	sp, #20
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	60f8      	str	r0, [r7, #12]
 80077ca:	60b9      	str	r1, [r7, #8]
 80077cc:	4613      	mov	r3, r2
 80077ce:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	68ba      	ldr	r2, [r7, #8]
 80077d4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	88fa      	ldrh	r2, [r7, #6]
 80077da:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	88fa      	ldrh	r2, [r7, #6]
 80077e0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2200      	movs	r2, #0
 80077e6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2222      	movs	r2, #34	; 0x22
 80077ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d007      	beq.n	8007808 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	68da      	ldr	r2, [r3, #12]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007806:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	695a      	ldr	r2, [r3, #20]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f042 0201 	orr.w	r2, r2, #1
 8007816:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68da      	ldr	r2, [r3, #12]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f042 0220 	orr.w	r2, r2, #32
 8007826:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3714      	adds	r7, #20
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr

08007836 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007836:	b480      	push	{r7}
 8007838:	b095      	sub	sp, #84	; 0x54
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	330c      	adds	r3, #12
 8007844:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007848:	e853 3f00 	ldrex	r3, [r3]
 800784c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800784e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007850:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007854:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	330c      	adds	r3, #12
 800785c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800785e:	643a      	str	r2, [r7, #64]	; 0x40
 8007860:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007862:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007864:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007866:	e841 2300 	strex	r3, r2, [r1]
 800786a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800786c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1e5      	bne.n	800783e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	3314      	adds	r3, #20
 8007878:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787a:	6a3b      	ldr	r3, [r7, #32]
 800787c:	e853 3f00 	ldrex	r3, [r3]
 8007880:	61fb      	str	r3, [r7, #28]
   return(result);
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	f023 0301 	bic.w	r3, r3, #1
 8007888:	64bb      	str	r3, [r7, #72]	; 0x48
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	3314      	adds	r3, #20
 8007890:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007892:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007894:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007896:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800789a:	e841 2300 	strex	r3, r2, [r1]
 800789e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d1e5      	bne.n	8007872 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d119      	bne.n	80078e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	330c      	adds	r3, #12
 80078b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	e853 3f00 	ldrex	r3, [r3]
 80078bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	f023 0310 	bic.w	r3, r3, #16
 80078c4:	647b      	str	r3, [r7, #68]	; 0x44
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	330c      	adds	r3, #12
 80078cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078ce:	61ba      	str	r2, [r7, #24]
 80078d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d2:	6979      	ldr	r1, [r7, #20]
 80078d4:	69ba      	ldr	r2, [r7, #24]
 80078d6:	e841 2300 	strex	r3, r2, [r1]
 80078da:	613b      	str	r3, [r7, #16]
   return(result);
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d1e5      	bne.n	80078ae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2220      	movs	r2, #32
 80078e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	631a      	str	r2, [r3, #48]	; 0x30
}
 80078f0:	bf00      	nop
 80078f2:	3754      	adds	r7, #84	; 0x54
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007908:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2200      	movs	r2, #0
 800790e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007916:	68f8      	ldr	r0, [r7, #12]
 8007918:	f7ff fee4 	bl	80076e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800791c:	bf00      	nop
 800791e:	3710      	adds	r7, #16
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007924:	b480      	push	{r7}
 8007926:	b085      	sub	sp, #20
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007932:	b2db      	uxtb	r3, r3
 8007934:	2b21      	cmp	r3, #33	; 0x21
 8007936:	d13e      	bne.n	80079b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007940:	d114      	bne.n	800796c <UART_Transmit_IT+0x48>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d110      	bne.n	800796c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a1b      	ldr	r3, [r3, #32]
 800794e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	881b      	ldrh	r3, [r3, #0]
 8007954:	461a      	mov	r2, r3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800795e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a1b      	ldr	r3, [r3, #32]
 8007964:	1c9a      	adds	r2, r3, #2
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	621a      	str	r2, [r3, #32]
 800796a:	e008      	b.n	800797e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6a1b      	ldr	r3, [r3, #32]
 8007970:	1c59      	adds	r1, r3, #1
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	6211      	str	r1, [r2, #32]
 8007976:	781a      	ldrb	r2, [r3, #0]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007982:	b29b      	uxth	r3, r3
 8007984:	3b01      	subs	r3, #1
 8007986:	b29b      	uxth	r3, r3
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	4619      	mov	r1, r3
 800798c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800798e:	2b00      	cmp	r3, #0
 8007990:	d10f      	bne.n	80079b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	68da      	ldr	r2, [r3, #12]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68da      	ldr	r2, [r3, #12]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80079b2:	2300      	movs	r3, #0
 80079b4:	e000      	b.n	80079b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80079b6:	2302      	movs	r3, #2
  }
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3714      	adds	r7, #20
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68da      	ldr	r2, [r3, #12]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079da:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2220      	movs	r2, #32
 80079e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f7ff fe73 	bl	80076d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80079ea:	2300      	movs	r3, #0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3708      	adds	r7, #8
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b08c      	sub	sp, #48	; 0x30
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	2b22      	cmp	r3, #34	; 0x22
 8007a06:	f040 80ae 	bne.w	8007b66 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a12:	d117      	bne.n	8007a44 <UART_Receive_IT+0x50>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	691b      	ldr	r3, [r3, #16]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d113      	bne.n	8007a44 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a24:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a36:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a3c:	1c9a      	adds	r2, r3, #2
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	629a      	str	r2, [r3, #40]	; 0x28
 8007a42:	e026      	b.n	8007a92 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a48:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a56:	d007      	beq.n	8007a68 <UART_Receive_IT+0x74>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d10a      	bne.n	8007a76 <UART_Receive_IT+0x82>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	691b      	ldr	r3, [r3, #16]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d106      	bne.n	8007a76 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	b2da      	uxtb	r2, r3
 8007a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a72:	701a      	strb	r2, [r3, #0]
 8007a74:	e008      	b.n	8007a88 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a82:	b2da      	uxtb	r2, r3
 8007a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a86:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a8c:	1c5a      	adds	r2, r3, #1
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d15d      	bne.n	8007b62 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68da      	ldr	r2, [r3, #12]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f022 0220 	bic.w	r2, r2, #32
 8007ab4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68da      	ldr	r2, [r3, #12]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ac4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	695a      	ldr	r2, [r3, #20]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f022 0201 	bic.w	r2, r2, #1
 8007ad4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2220      	movs	r2, #32
 8007ada:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d135      	bne.n	8007b58 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	330c      	adds	r3, #12
 8007af8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	e853 3f00 	ldrex	r3, [r3]
 8007b00:	613b      	str	r3, [r7, #16]
   return(result);
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	f023 0310 	bic.w	r3, r3, #16
 8007b08:	627b      	str	r3, [r7, #36]	; 0x24
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	330c      	adds	r3, #12
 8007b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b12:	623a      	str	r2, [r7, #32]
 8007b14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b16:	69f9      	ldr	r1, [r7, #28]
 8007b18:	6a3a      	ldr	r2, [r7, #32]
 8007b1a:	e841 2300 	strex	r3, r2, [r1]
 8007b1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d1e5      	bne.n	8007af2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f003 0310 	and.w	r3, r3, #16
 8007b30:	2b10      	cmp	r3, #16
 8007b32:	d10a      	bne.n	8007b4a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b34:	2300      	movs	r3, #0
 8007b36:	60fb      	str	r3, [r7, #12]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	60fb      	str	r3, [r7, #12]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	60fb      	str	r3, [r7, #12]
 8007b48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007b4e:	4619      	mov	r1, r3
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f7ff fdd1 	bl	80076f8 <HAL_UARTEx_RxEventCallback>
 8007b56:	e002      	b.n	8007b5e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f7fb f94d 	bl	8002df8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	e002      	b.n	8007b68 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007b62:	2300      	movs	r3, #0
 8007b64:	e000      	b.n	8007b68 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007b66:	2302      	movs	r3, #2
  }
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3730      	adds	r7, #48	; 0x30
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b74:	b0c0      	sub	sp, #256	; 0x100
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b8c:	68d9      	ldr	r1, [r3, #12]
 8007b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	ea40 0301 	orr.w	r3, r0, r1
 8007b98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b9e:	689a      	ldr	r2, [r3, #8]
 8007ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	431a      	orrs	r2, r3
 8007ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bac:	695b      	ldr	r3, [r3, #20]
 8007bae:	431a      	orrs	r2, r3
 8007bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bb4:	69db      	ldr	r3, [r3, #28]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007bc8:	f021 010c 	bic.w	r1, r1, #12
 8007bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007bd6:	430b      	orrs	r3, r1
 8007bd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	695b      	ldr	r3, [r3, #20]
 8007be2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bea:	6999      	ldr	r1, [r3, #24]
 8007bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	ea40 0301 	orr.w	r3, r0, r1
 8007bf6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	4b8f      	ldr	r3, [pc, #572]	; (8007e3c <UART_SetConfig+0x2cc>)
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d005      	beq.n	8007c10 <UART_SetConfig+0xa0>
 8007c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	4b8d      	ldr	r3, [pc, #564]	; (8007e40 <UART_SetConfig+0x2d0>)
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d104      	bne.n	8007c1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c10:	f7fd fe96 	bl	8005940 <HAL_RCC_GetPCLK2Freq>
 8007c14:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007c18:	e003      	b.n	8007c22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007c1a:	f7fd fe7d 	bl	8005918 <HAL_RCC_GetPCLK1Freq>
 8007c1e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c26:	69db      	ldr	r3, [r3, #28]
 8007c28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c2c:	f040 810c 	bne.w	8007e48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007c30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c34:	2200      	movs	r2, #0
 8007c36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c3a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007c3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007c42:	4622      	mov	r2, r4
 8007c44:	462b      	mov	r3, r5
 8007c46:	1891      	adds	r1, r2, r2
 8007c48:	65b9      	str	r1, [r7, #88]	; 0x58
 8007c4a:	415b      	adcs	r3, r3
 8007c4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007c52:	4621      	mov	r1, r4
 8007c54:	eb12 0801 	adds.w	r8, r2, r1
 8007c58:	4629      	mov	r1, r5
 8007c5a:	eb43 0901 	adc.w	r9, r3, r1
 8007c5e:	f04f 0200 	mov.w	r2, #0
 8007c62:	f04f 0300 	mov.w	r3, #0
 8007c66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c72:	4690      	mov	r8, r2
 8007c74:	4699      	mov	r9, r3
 8007c76:	4623      	mov	r3, r4
 8007c78:	eb18 0303 	adds.w	r3, r8, r3
 8007c7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c80:	462b      	mov	r3, r5
 8007c82:	eb49 0303 	adc.w	r3, r9, r3
 8007c86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007c96:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007c9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	18db      	adds	r3, r3, r3
 8007ca2:	653b      	str	r3, [r7, #80]	; 0x50
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	eb42 0303 	adc.w	r3, r2, r3
 8007caa:	657b      	str	r3, [r7, #84]	; 0x54
 8007cac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007cb0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007cb4:	f7f8 fed2 	bl	8000a5c <__aeabi_uldivmod>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	460b      	mov	r3, r1
 8007cbc:	4b61      	ldr	r3, [pc, #388]	; (8007e44 <UART_SetConfig+0x2d4>)
 8007cbe:	fba3 2302 	umull	r2, r3, r3, r2
 8007cc2:	095b      	lsrs	r3, r3, #5
 8007cc4:	011c      	lsls	r4, r3, #4
 8007cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007cd0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007cd4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007cd8:	4642      	mov	r2, r8
 8007cda:	464b      	mov	r3, r9
 8007cdc:	1891      	adds	r1, r2, r2
 8007cde:	64b9      	str	r1, [r7, #72]	; 0x48
 8007ce0:	415b      	adcs	r3, r3
 8007ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ce4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007ce8:	4641      	mov	r1, r8
 8007cea:	eb12 0a01 	adds.w	sl, r2, r1
 8007cee:	4649      	mov	r1, r9
 8007cf0:	eb43 0b01 	adc.w	fp, r3, r1
 8007cf4:	f04f 0200 	mov.w	r2, #0
 8007cf8:	f04f 0300 	mov.w	r3, #0
 8007cfc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007d00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007d04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d08:	4692      	mov	sl, r2
 8007d0a:	469b      	mov	fp, r3
 8007d0c:	4643      	mov	r3, r8
 8007d0e:	eb1a 0303 	adds.w	r3, sl, r3
 8007d12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d16:	464b      	mov	r3, r9
 8007d18:	eb4b 0303 	adc.w	r3, fp, r3
 8007d1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d2c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007d30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007d34:	460b      	mov	r3, r1
 8007d36:	18db      	adds	r3, r3, r3
 8007d38:	643b      	str	r3, [r7, #64]	; 0x40
 8007d3a:	4613      	mov	r3, r2
 8007d3c:	eb42 0303 	adc.w	r3, r2, r3
 8007d40:	647b      	str	r3, [r7, #68]	; 0x44
 8007d42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007d46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007d4a:	f7f8 fe87 	bl	8000a5c <__aeabi_uldivmod>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	460b      	mov	r3, r1
 8007d52:	4611      	mov	r1, r2
 8007d54:	4b3b      	ldr	r3, [pc, #236]	; (8007e44 <UART_SetConfig+0x2d4>)
 8007d56:	fba3 2301 	umull	r2, r3, r3, r1
 8007d5a:	095b      	lsrs	r3, r3, #5
 8007d5c:	2264      	movs	r2, #100	; 0x64
 8007d5e:	fb02 f303 	mul.w	r3, r2, r3
 8007d62:	1acb      	subs	r3, r1, r3
 8007d64:	00db      	lsls	r3, r3, #3
 8007d66:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007d6a:	4b36      	ldr	r3, [pc, #216]	; (8007e44 <UART_SetConfig+0x2d4>)
 8007d6c:	fba3 2302 	umull	r2, r3, r3, r2
 8007d70:	095b      	lsrs	r3, r3, #5
 8007d72:	005b      	lsls	r3, r3, #1
 8007d74:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007d78:	441c      	add	r4, r3
 8007d7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d84:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007d88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007d8c:	4642      	mov	r2, r8
 8007d8e:	464b      	mov	r3, r9
 8007d90:	1891      	adds	r1, r2, r2
 8007d92:	63b9      	str	r1, [r7, #56]	; 0x38
 8007d94:	415b      	adcs	r3, r3
 8007d96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007d9c:	4641      	mov	r1, r8
 8007d9e:	1851      	adds	r1, r2, r1
 8007da0:	6339      	str	r1, [r7, #48]	; 0x30
 8007da2:	4649      	mov	r1, r9
 8007da4:	414b      	adcs	r3, r1
 8007da6:	637b      	str	r3, [r7, #52]	; 0x34
 8007da8:	f04f 0200 	mov.w	r2, #0
 8007dac:	f04f 0300 	mov.w	r3, #0
 8007db0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007db4:	4659      	mov	r1, fp
 8007db6:	00cb      	lsls	r3, r1, #3
 8007db8:	4651      	mov	r1, sl
 8007dba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dbe:	4651      	mov	r1, sl
 8007dc0:	00ca      	lsls	r2, r1, #3
 8007dc2:	4610      	mov	r0, r2
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	4642      	mov	r2, r8
 8007dca:	189b      	adds	r3, r3, r2
 8007dcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007dd0:	464b      	mov	r3, r9
 8007dd2:	460a      	mov	r2, r1
 8007dd4:	eb42 0303 	adc.w	r3, r2, r3
 8007dd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007de8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007dec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007df0:	460b      	mov	r3, r1
 8007df2:	18db      	adds	r3, r3, r3
 8007df4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007df6:	4613      	mov	r3, r2
 8007df8:	eb42 0303 	adc.w	r3, r2, r3
 8007dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007e06:	f7f8 fe29 	bl	8000a5c <__aeabi_uldivmod>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	4b0d      	ldr	r3, [pc, #52]	; (8007e44 <UART_SetConfig+0x2d4>)
 8007e10:	fba3 1302 	umull	r1, r3, r3, r2
 8007e14:	095b      	lsrs	r3, r3, #5
 8007e16:	2164      	movs	r1, #100	; 0x64
 8007e18:	fb01 f303 	mul.w	r3, r1, r3
 8007e1c:	1ad3      	subs	r3, r2, r3
 8007e1e:	00db      	lsls	r3, r3, #3
 8007e20:	3332      	adds	r3, #50	; 0x32
 8007e22:	4a08      	ldr	r2, [pc, #32]	; (8007e44 <UART_SetConfig+0x2d4>)
 8007e24:	fba2 2303 	umull	r2, r3, r2, r3
 8007e28:	095b      	lsrs	r3, r3, #5
 8007e2a:	f003 0207 	and.w	r2, r3, #7
 8007e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4422      	add	r2, r4
 8007e36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007e38:	e106      	b.n	8008048 <UART_SetConfig+0x4d8>
 8007e3a:	bf00      	nop
 8007e3c:	40011000 	.word	0x40011000
 8007e40:	40011400 	.word	0x40011400
 8007e44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007e52:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007e56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007e5a:	4642      	mov	r2, r8
 8007e5c:	464b      	mov	r3, r9
 8007e5e:	1891      	adds	r1, r2, r2
 8007e60:	6239      	str	r1, [r7, #32]
 8007e62:	415b      	adcs	r3, r3
 8007e64:	627b      	str	r3, [r7, #36]	; 0x24
 8007e66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e6a:	4641      	mov	r1, r8
 8007e6c:	1854      	adds	r4, r2, r1
 8007e6e:	4649      	mov	r1, r9
 8007e70:	eb43 0501 	adc.w	r5, r3, r1
 8007e74:	f04f 0200 	mov.w	r2, #0
 8007e78:	f04f 0300 	mov.w	r3, #0
 8007e7c:	00eb      	lsls	r3, r5, #3
 8007e7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e82:	00e2      	lsls	r2, r4, #3
 8007e84:	4614      	mov	r4, r2
 8007e86:	461d      	mov	r5, r3
 8007e88:	4643      	mov	r3, r8
 8007e8a:	18e3      	adds	r3, r4, r3
 8007e8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007e90:	464b      	mov	r3, r9
 8007e92:	eb45 0303 	adc.w	r3, r5, r3
 8007e96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007ea6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007eaa:	f04f 0200 	mov.w	r2, #0
 8007eae:	f04f 0300 	mov.w	r3, #0
 8007eb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007eb6:	4629      	mov	r1, r5
 8007eb8:	008b      	lsls	r3, r1, #2
 8007eba:	4621      	mov	r1, r4
 8007ebc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ec0:	4621      	mov	r1, r4
 8007ec2:	008a      	lsls	r2, r1, #2
 8007ec4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007ec8:	f7f8 fdc8 	bl	8000a5c <__aeabi_uldivmod>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	460b      	mov	r3, r1
 8007ed0:	4b60      	ldr	r3, [pc, #384]	; (8008054 <UART_SetConfig+0x4e4>)
 8007ed2:	fba3 2302 	umull	r2, r3, r3, r2
 8007ed6:	095b      	lsrs	r3, r3, #5
 8007ed8:	011c      	lsls	r4, r3, #4
 8007eda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007ee4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007ee8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007eec:	4642      	mov	r2, r8
 8007eee:	464b      	mov	r3, r9
 8007ef0:	1891      	adds	r1, r2, r2
 8007ef2:	61b9      	str	r1, [r7, #24]
 8007ef4:	415b      	adcs	r3, r3
 8007ef6:	61fb      	str	r3, [r7, #28]
 8007ef8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007efc:	4641      	mov	r1, r8
 8007efe:	1851      	adds	r1, r2, r1
 8007f00:	6139      	str	r1, [r7, #16]
 8007f02:	4649      	mov	r1, r9
 8007f04:	414b      	adcs	r3, r1
 8007f06:	617b      	str	r3, [r7, #20]
 8007f08:	f04f 0200 	mov.w	r2, #0
 8007f0c:	f04f 0300 	mov.w	r3, #0
 8007f10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f14:	4659      	mov	r1, fp
 8007f16:	00cb      	lsls	r3, r1, #3
 8007f18:	4651      	mov	r1, sl
 8007f1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f1e:	4651      	mov	r1, sl
 8007f20:	00ca      	lsls	r2, r1, #3
 8007f22:	4610      	mov	r0, r2
 8007f24:	4619      	mov	r1, r3
 8007f26:	4603      	mov	r3, r0
 8007f28:	4642      	mov	r2, r8
 8007f2a:	189b      	adds	r3, r3, r2
 8007f2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f30:	464b      	mov	r3, r9
 8007f32:	460a      	mov	r2, r1
 8007f34:	eb42 0303 	adc.w	r3, r2, r3
 8007f38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	67bb      	str	r3, [r7, #120]	; 0x78
 8007f46:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007f48:	f04f 0200 	mov.w	r2, #0
 8007f4c:	f04f 0300 	mov.w	r3, #0
 8007f50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007f54:	4649      	mov	r1, r9
 8007f56:	008b      	lsls	r3, r1, #2
 8007f58:	4641      	mov	r1, r8
 8007f5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f5e:	4641      	mov	r1, r8
 8007f60:	008a      	lsls	r2, r1, #2
 8007f62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007f66:	f7f8 fd79 	bl	8000a5c <__aeabi_uldivmod>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	4611      	mov	r1, r2
 8007f70:	4b38      	ldr	r3, [pc, #224]	; (8008054 <UART_SetConfig+0x4e4>)
 8007f72:	fba3 2301 	umull	r2, r3, r3, r1
 8007f76:	095b      	lsrs	r3, r3, #5
 8007f78:	2264      	movs	r2, #100	; 0x64
 8007f7a:	fb02 f303 	mul.w	r3, r2, r3
 8007f7e:	1acb      	subs	r3, r1, r3
 8007f80:	011b      	lsls	r3, r3, #4
 8007f82:	3332      	adds	r3, #50	; 0x32
 8007f84:	4a33      	ldr	r2, [pc, #204]	; (8008054 <UART_SetConfig+0x4e4>)
 8007f86:	fba2 2303 	umull	r2, r3, r2, r3
 8007f8a:	095b      	lsrs	r3, r3, #5
 8007f8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f90:	441c      	add	r4, r3
 8007f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f96:	2200      	movs	r2, #0
 8007f98:	673b      	str	r3, [r7, #112]	; 0x70
 8007f9a:	677a      	str	r2, [r7, #116]	; 0x74
 8007f9c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007fa0:	4642      	mov	r2, r8
 8007fa2:	464b      	mov	r3, r9
 8007fa4:	1891      	adds	r1, r2, r2
 8007fa6:	60b9      	str	r1, [r7, #8]
 8007fa8:	415b      	adcs	r3, r3
 8007faa:	60fb      	str	r3, [r7, #12]
 8007fac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007fb0:	4641      	mov	r1, r8
 8007fb2:	1851      	adds	r1, r2, r1
 8007fb4:	6039      	str	r1, [r7, #0]
 8007fb6:	4649      	mov	r1, r9
 8007fb8:	414b      	adcs	r3, r1
 8007fba:	607b      	str	r3, [r7, #4]
 8007fbc:	f04f 0200 	mov.w	r2, #0
 8007fc0:	f04f 0300 	mov.w	r3, #0
 8007fc4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007fc8:	4659      	mov	r1, fp
 8007fca:	00cb      	lsls	r3, r1, #3
 8007fcc:	4651      	mov	r1, sl
 8007fce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fd2:	4651      	mov	r1, sl
 8007fd4:	00ca      	lsls	r2, r1, #3
 8007fd6:	4610      	mov	r0, r2
 8007fd8:	4619      	mov	r1, r3
 8007fda:	4603      	mov	r3, r0
 8007fdc:	4642      	mov	r2, r8
 8007fde:	189b      	adds	r3, r3, r2
 8007fe0:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fe2:	464b      	mov	r3, r9
 8007fe4:	460a      	mov	r2, r1
 8007fe6:	eb42 0303 	adc.w	r3, r2, r3
 8007fea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	663b      	str	r3, [r7, #96]	; 0x60
 8007ff6:	667a      	str	r2, [r7, #100]	; 0x64
 8007ff8:	f04f 0200 	mov.w	r2, #0
 8007ffc:	f04f 0300 	mov.w	r3, #0
 8008000:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008004:	4649      	mov	r1, r9
 8008006:	008b      	lsls	r3, r1, #2
 8008008:	4641      	mov	r1, r8
 800800a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800800e:	4641      	mov	r1, r8
 8008010:	008a      	lsls	r2, r1, #2
 8008012:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008016:	f7f8 fd21 	bl	8000a5c <__aeabi_uldivmod>
 800801a:	4602      	mov	r2, r0
 800801c:	460b      	mov	r3, r1
 800801e:	4b0d      	ldr	r3, [pc, #52]	; (8008054 <UART_SetConfig+0x4e4>)
 8008020:	fba3 1302 	umull	r1, r3, r3, r2
 8008024:	095b      	lsrs	r3, r3, #5
 8008026:	2164      	movs	r1, #100	; 0x64
 8008028:	fb01 f303 	mul.w	r3, r1, r3
 800802c:	1ad3      	subs	r3, r2, r3
 800802e:	011b      	lsls	r3, r3, #4
 8008030:	3332      	adds	r3, #50	; 0x32
 8008032:	4a08      	ldr	r2, [pc, #32]	; (8008054 <UART_SetConfig+0x4e4>)
 8008034:	fba2 2303 	umull	r2, r3, r2, r3
 8008038:	095b      	lsrs	r3, r3, #5
 800803a:	f003 020f 	and.w	r2, r3, #15
 800803e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4422      	add	r2, r4
 8008046:	609a      	str	r2, [r3, #8]
}
 8008048:	bf00      	nop
 800804a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800804e:	46bd      	mov	sp, r7
 8008050:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008054:	51eb851f 	.word	0x51eb851f

08008058 <std>:
 8008058:	2300      	movs	r3, #0
 800805a:	b510      	push	{r4, lr}
 800805c:	4604      	mov	r4, r0
 800805e:	e9c0 3300 	strd	r3, r3, [r0]
 8008062:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008066:	6083      	str	r3, [r0, #8]
 8008068:	8181      	strh	r1, [r0, #12]
 800806a:	6643      	str	r3, [r0, #100]	; 0x64
 800806c:	81c2      	strh	r2, [r0, #14]
 800806e:	6183      	str	r3, [r0, #24]
 8008070:	4619      	mov	r1, r3
 8008072:	2208      	movs	r2, #8
 8008074:	305c      	adds	r0, #92	; 0x5c
 8008076:	f000 fa1f 	bl	80084b8 <memset>
 800807a:	4b0d      	ldr	r3, [pc, #52]	; (80080b0 <std+0x58>)
 800807c:	6263      	str	r3, [r4, #36]	; 0x24
 800807e:	4b0d      	ldr	r3, [pc, #52]	; (80080b4 <std+0x5c>)
 8008080:	62a3      	str	r3, [r4, #40]	; 0x28
 8008082:	4b0d      	ldr	r3, [pc, #52]	; (80080b8 <std+0x60>)
 8008084:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008086:	4b0d      	ldr	r3, [pc, #52]	; (80080bc <std+0x64>)
 8008088:	6323      	str	r3, [r4, #48]	; 0x30
 800808a:	4b0d      	ldr	r3, [pc, #52]	; (80080c0 <std+0x68>)
 800808c:	6224      	str	r4, [r4, #32]
 800808e:	429c      	cmp	r4, r3
 8008090:	d006      	beq.n	80080a0 <std+0x48>
 8008092:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008096:	4294      	cmp	r4, r2
 8008098:	d002      	beq.n	80080a0 <std+0x48>
 800809a:	33d0      	adds	r3, #208	; 0xd0
 800809c:	429c      	cmp	r4, r3
 800809e:	d105      	bne.n	80080ac <std+0x54>
 80080a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80080a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080a8:	f000 ba90 	b.w	80085cc <__retarget_lock_init_recursive>
 80080ac:	bd10      	pop	{r4, pc}
 80080ae:	bf00      	nop
 80080b0:	08008309 	.word	0x08008309
 80080b4:	0800832b 	.word	0x0800832b
 80080b8:	08008363 	.word	0x08008363
 80080bc:	08008387 	.word	0x08008387
 80080c0:	2000041c 	.word	0x2000041c

080080c4 <stdio_exit_handler>:
 80080c4:	4a02      	ldr	r2, [pc, #8]	; (80080d0 <stdio_exit_handler+0xc>)
 80080c6:	4903      	ldr	r1, [pc, #12]	; (80080d4 <stdio_exit_handler+0x10>)
 80080c8:	4803      	ldr	r0, [pc, #12]	; (80080d8 <stdio_exit_handler+0x14>)
 80080ca:	f000 b869 	b.w	80081a0 <_fwalk_sglue>
 80080ce:	bf00      	nop
 80080d0:	20000010 	.word	0x20000010
 80080d4:	08009129 	.word	0x08009129
 80080d8:	2000001c 	.word	0x2000001c

080080dc <cleanup_stdio>:
 80080dc:	6841      	ldr	r1, [r0, #4]
 80080de:	4b0c      	ldr	r3, [pc, #48]	; (8008110 <cleanup_stdio+0x34>)
 80080e0:	4299      	cmp	r1, r3
 80080e2:	b510      	push	{r4, lr}
 80080e4:	4604      	mov	r4, r0
 80080e6:	d001      	beq.n	80080ec <cleanup_stdio+0x10>
 80080e8:	f001 f81e 	bl	8009128 <_fflush_r>
 80080ec:	68a1      	ldr	r1, [r4, #8]
 80080ee:	4b09      	ldr	r3, [pc, #36]	; (8008114 <cleanup_stdio+0x38>)
 80080f0:	4299      	cmp	r1, r3
 80080f2:	d002      	beq.n	80080fa <cleanup_stdio+0x1e>
 80080f4:	4620      	mov	r0, r4
 80080f6:	f001 f817 	bl	8009128 <_fflush_r>
 80080fa:	68e1      	ldr	r1, [r4, #12]
 80080fc:	4b06      	ldr	r3, [pc, #24]	; (8008118 <cleanup_stdio+0x3c>)
 80080fe:	4299      	cmp	r1, r3
 8008100:	d004      	beq.n	800810c <cleanup_stdio+0x30>
 8008102:	4620      	mov	r0, r4
 8008104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008108:	f001 b80e 	b.w	8009128 <_fflush_r>
 800810c:	bd10      	pop	{r4, pc}
 800810e:	bf00      	nop
 8008110:	2000041c 	.word	0x2000041c
 8008114:	20000484 	.word	0x20000484
 8008118:	200004ec 	.word	0x200004ec

0800811c <global_stdio_init.part.0>:
 800811c:	b510      	push	{r4, lr}
 800811e:	4b0b      	ldr	r3, [pc, #44]	; (800814c <global_stdio_init.part.0+0x30>)
 8008120:	4c0b      	ldr	r4, [pc, #44]	; (8008150 <global_stdio_init.part.0+0x34>)
 8008122:	4a0c      	ldr	r2, [pc, #48]	; (8008154 <global_stdio_init.part.0+0x38>)
 8008124:	601a      	str	r2, [r3, #0]
 8008126:	4620      	mov	r0, r4
 8008128:	2200      	movs	r2, #0
 800812a:	2104      	movs	r1, #4
 800812c:	f7ff ff94 	bl	8008058 <std>
 8008130:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008134:	2201      	movs	r2, #1
 8008136:	2109      	movs	r1, #9
 8008138:	f7ff ff8e 	bl	8008058 <std>
 800813c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008140:	2202      	movs	r2, #2
 8008142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008146:	2112      	movs	r1, #18
 8008148:	f7ff bf86 	b.w	8008058 <std>
 800814c:	20000554 	.word	0x20000554
 8008150:	2000041c 	.word	0x2000041c
 8008154:	080080c5 	.word	0x080080c5

08008158 <__sfp_lock_acquire>:
 8008158:	4801      	ldr	r0, [pc, #4]	; (8008160 <__sfp_lock_acquire+0x8>)
 800815a:	f000 ba38 	b.w	80085ce <__retarget_lock_acquire_recursive>
 800815e:	bf00      	nop
 8008160:	2000055d 	.word	0x2000055d

08008164 <__sfp_lock_release>:
 8008164:	4801      	ldr	r0, [pc, #4]	; (800816c <__sfp_lock_release+0x8>)
 8008166:	f000 ba33 	b.w	80085d0 <__retarget_lock_release_recursive>
 800816a:	bf00      	nop
 800816c:	2000055d 	.word	0x2000055d

08008170 <__sinit>:
 8008170:	b510      	push	{r4, lr}
 8008172:	4604      	mov	r4, r0
 8008174:	f7ff fff0 	bl	8008158 <__sfp_lock_acquire>
 8008178:	6a23      	ldr	r3, [r4, #32]
 800817a:	b11b      	cbz	r3, 8008184 <__sinit+0x14>
 800817c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008180:	f7ff bff0 	b.w	8008164 <__sfp_lock_release>
 8008184:	4b04      	ldr	r3, [pc, #16]	; (8008198 <__sinit+0x28>)
 8008186:	6223      	str	r3, [r4, #32]
 8008188:	4b04      	ldr	r3, [pc, #16]	; (800819c <__sinit+0x2c>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d1f5      	bne.n	800817c <__sinit+0xc>
 8008190:	f7ff ffc4 	bl	800811c <global_stdio_init.part.0>
 8008194:	e7f2      	b.n	800817c <__sinit+0xc>
 8008196:	bf00      	nop
 8008198:	080080dd 	.word	0x080080dd
 800819c:	20000554 	.word	0x20000554

080081a0 <_fwalk_sglue>:
 80081a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081a4:	4607      	mov	r7, r0
 80081a6:	4688      	mov	r8, r1
 80081a8:	4614      	mov	r4, r2
 80081aa:	2600      	movs	r6, #0
 80081ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081b0:	f1b9 0901 	subs.w	r9, r9, #1
 80081b4:	d505      	bpl.n	80081c2 <_fwalk_sglue+0x22>
 80081b6:	6824      	ldr	r4, [r4, #0]
 80081b8:	2c00      	cmp	r4, #0
 80081ba:	d1f7      	bne.n	80081ac <_fwalk_sglue+0xc>
 80081bc:	4630      	mov	r0, r6
 80081be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081c2:	89ab      	ldrh	r3, [r5, #12]
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d907      	bls.n	80081d8 <_fwalk_sglue+0x38>
 80081c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081cc:	3301      	adds	r3, #1
 80081ce:	d003      	beq.n	80081d8 <_fwalk_sglue+0x38>
 80081d0:	4629      	mov	r1, r5
 80081d2:	4638      	mov	r0, r7
 80081d4:	47c0      	blx	r8
 80081d6:	4306      	orrs	r6, r0
 80081d8:	3568      	adds	r5, #104	; 0x68
 80081da:	e7e9      	b.n	80081b0 <_fwalk_sglue+0x10>

080081dc <iprintf>:
 80081dc:	b40f      	push	{r0, r1, r2, r3}
 80081de:	b507      	push	{r0, r1, r2, lr}
 80081e0:	4906      	ldr	r1, [pc, #24]	; (80081fc <iprintf+0x20>)
 80081e2:	ab04      	add	r3, sp, #16
 80081e4:	6808      	ldr	r0, [r1, #0]
 80081e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80081ea:	6881      	ldr	r1, [r0, #8]
 80081ec:	9301      	str	r3, [sp, #4]
 80081ee:	f000 fc6b 	bl	8008ac8 <_vfiprintf_r>
 80081f2:	b003      	add	sp, #12
 80081f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80081f8:	b004      	add	sp, #16
 80081fa:	4770      	bx	lr
 80081fc:	20000068 	.word	0x20000068

08008200 <putchar>:
 8008200:	4b02      	ldr	r3, [pc, #8]	; (800820c <putchar+0xc>)
 8008202:	4601      	mov	r1, r0
 8008204:	6818      	ldr	r0, [r3, #0]
 8008206:	6882      	ldr	r2, [r0, #8]
 8008208:	f001 b818 	b.w	800923c <_putc_r>
 800820c:	20000068 	.word	0x20000068

08008210 <_puts_r>:
 8008210:	6a03      	ldr	r3, [r0, #32]
 8008212:	b570      	push	{r4, r5, r6, lr}
 8008214:	6884      	ldr	r4, [r0, #8]
 8008216:	4605      	mov	r5, r0
 8008218:	460e      	mov	r6, r1
 800821a:	b90b      	cbnz	r3, 8008220 <_puts_r+0x10>
 800821c:	f7ff ffa8 	bl	8008170 <__sinit>
 8008220:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008222:	07db      	lsls	r3, r3, #31
 8008224:	d405      	bmi.n	8008232 <_puts_r+0x22>
 8008226:	89a3      	ldrh	r3, [r4, #12]
 8008228:	0598      	lsls	r0, r3, #22
 800822a:	d402      	bmi.n	8008232 <_puts_r+0x22>
 800822c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800822e:	f000 f9ce 	bl	80085ce <__retarget_lock_acquire_recursive>
 8008232:	89a3      	ldrh	r3, [r4, #12]
 8008234:	0719      	lsls	r1, r3, #28
 8008236:	d513      	bpl.n	8008260 <_puts_r+0x50>
 8008238:	6923      	ldr	r3, [r4, #16]
 800823a:	b18b      	cbz	r3, 8008260 <_puts_r+0x50>
 800823c:	3e01      	subs	r6, #1
 800823e:	68a3      	ldr	r3, [r4, #8]
 8008240:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008244:	3b01      	subs	r3, #1
 8008246:	60a3      	str	r3, [r4, #8]
 8008248:	b9e9      	cbnz	r1, 8008286 <_puts_r+0x76>
 800824a:	2b00      	cmp	r3, #0
 800824c:	da2e      	bge.n	80082ac <_puts_r+0x9c>
 800824e:	4622      	mov	r2, r4
 8008250:	210a      	movs	r1, #10
 8008252:	4628      	mov	r0, r5
 8008254:	f000 f89b 	bl	800838e <__swbuf_r>
 8008258:	3001      	adds	r0, #1
 800825a:	d007      	beq.n	800826c <_puts_r+0x5c>
 800825c:	250a      	movs	r5, #10
 800825e:	e007      	b.n	8008270 <_puts_r+0x60>
 8008260:	4621      	mov	r1, r4
 8008262:	4628      	mov	r0, r5
 8008264:	f000 f8d0 	bl	8008408 <__swsetup_r>
 8008268:	2800      	cmp	r0, #0
 800826a:	d0e7      	beq.n	800823c <_puts_r+0x2c>
 800826c:	f04f 35ff 	mov.w	r5, #4294967295
 8008270:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008272:	07da      	lsls	r2, r3, #31
 8008274:	d405      	bmi.n	8008282 <_puts_r+0x72>
 8008276:	89a3      	ldrh	r3, [r4, #12]
 8008278:	059b      	lsls	r3, r3, #22
 800827a:	d402      	bmi.n	8008282 <_puts_r+0x72>
 800827c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800827e:	f000 f9a7 	bl	80085d0 <__retarget_lock_release_recursive>
 8008282:	4628      	mov	r0, r5
 8008284:	bd70      	pop	{r4, r5, r6, pc}
 8008286:	2b00      	cmp	r3, #0
 8008288:	da04      	bge.n	8008294 <_puts_r+0x84>
 800828a:	69a2      	ldr	r2, [r4, #24]
 800828c:	429a      	cmp	r2, r3
 800828e:	dc06      	bgt.n	800829e <_puts_r+0x8e>
 8008290:	290a      	cmp	r1, #10
 8008292:	d004      	beq.n	800829e <_puts_r+0x8e>
 8008294:	6823      	ldr	r3, [r4, #0]
 8008296:	1c5a      	adds	r2, r3, #1
 8008298:	6022      	str	r2, [r4, #0]
 800829a:	7019      	strb	r1, [r3, #0]
 800829c:	e7cf      	b.n	800823e <_puts_r+0x2e>
 800829e:	4622      	mov	r2, r4
 80082a0:	4628      	mov	r0, r5
 80082a2:	f000 f874 	bl	800838e <__swbuf_r>
 80082a6:	3001      	adds	r0, #1
 80082a8:	d1c9      	bne.n	800823e <_puts_r+0x2e>
 80082aa:	e7df      	b.n	800826c <_puts_r+0x5c>
 80082ac:	6823      	ldr	r3, [r4, #0]
 80082ae:	250a      	movs	r5, #10
 80082b0:	1c5a      	adds	r2, r3, #1
 80082b2:	6022      	str	r2, [r4, #0]
 80082b4:	701d      	strb	r5, [r3, #0]
 80082b6:	e7db      	b.n	8008270 <_puts_r+0x60>

080082b8 <puts>:
 80082b8:	4b02      	ldr	r3, [pc, #8]	; (80082c4 <puts+0xc>)
 80082ba:	4601      	mov	r1, r0
 80082bc:	6818      	ldr	r0, [r3, #0]
 80082be:	f7ff bfa7 	b.w	8008210 <_puts_r>
 80082c2:	bf00      	nop
 80082c4:	20000068 	.word	0x20000068

080082c8 <siprintf>:
 80082c8:	b40e      	push	{r1, r2, r3}
 80082ca:	b500      	push	{lr}
 80082cc:	b09c      	sub	sp, #112	; 0x70
 80082ce:	ab1d      	add	r3, sp, #116	; 0x74
 80082d0:	9002      	str	r0, [sp, #8]
 80082d2:	9006      	str	r0, [sp, #24]
 80082d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80082d8:	4809      	ldr	r0, [pc, #36]	; (8008300 <siprintf+0x38>)
 80082da:	9107      	str	r1, [sp, #28]
 80082dc:	9104      	str	r1, [sp, #16]
 80082de:	4909      	ldr	r1, [pc, #36]	; (8008304 <siprintf+0x3c>)
 80082e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80082e4:	9105      	str	r1, [sp, #20]
 80082e6:	6800      	ldr	r0, [r0, #0]
 80082e8:	9301      	str	r3, [sp, #4]
 80082ea:	a902      	add	r1, sp, #8
 80082ec:	f000 fac4 	bl	8008878 <_svfiprintf_r>
 80082f0:	9b02      	ldr	r3, [sp, #8]
 80082f2:	2200      	movs	r2, #0
 80082f4:	701a      	strb	r2, [r3, #0]
 80082f6:	b01c      	add	sp, #112	; 0x70
 80082f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80082fc:	b003      	add	sp, #12
 80082fe:	4770      	bx	lr
 8008300:	20000068 	.word	0x20000068
 8008304:	ffff0208 	.word	0xffff0208

08008308 <__sread>:
 8008308:	b510      	push	{r4, lr}
 800830a:	460c      	mov	r4, r1
 800830c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008310:	f000 f90e 	bl	8008530 <_read_r>
 8008314:	2800      	cmp	r0, #0
 8008316:	bfab      	itete	ge
 8008318:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800831a:	89a3      	ldrhlt	r3, [r4, #12]
 800831c:	181b      	addge	r3, r3, r0
 800831e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008322:	bfac      	ite	ge
 8008324:	6563      	strge	r3, [r4, #84]	; 0x54
 8008326:	81a3      	strhlt	r3, [r4, #12]
 8008328:	bd10      	pop	{r4, pc}

0800832a <__swrite>:
 800832a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800832e:	461f      	mov	r7, r3
 8008330:	898b      	ldrh	r3, [r1, #12]
 8008332:	05db      	lsls	r3, r3, #23
 8008334:	4605      	mov	r5, r0
 8008336:	460c      	mov	r4, r1
 8008338:	4616      	mov	r6, r2
 800833a:	d505      	bpl.n	8008348 <__swrite+0x1e>
 800833c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008340:	2302      	movs	r3, #2
 8008342:	2200      	movs	r2, #0
 8008344:	f000 f8e2 	bl	800850c <_lseek_r>
 8008348:	89a3      	ldrh	r3, [r4, #12]
 800834a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800834e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008352:	81a3      	strh	r3, [r4, #12]
 8008354:	4632      	mov	r2, r6
 8008356:	463b      	mov	r3, r7
 8008358:	4628      	mov	r0, r5
 800835a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800835e:	f000 b8f9 	b.w	8008554 <_write_r>

08008362 <__sseek>:
 8008362:	b510      	push	{r4, lr}
 8008364:	460c      	mov	r4, r1
 8008366:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800836a:	f000 f8cf 	bl	800850c <_lseek_r>
 800836e:	1c43      	adds	r3, r0, #1
 8008370:	89a3      	ldrh	r3, [r4, #12]
 8008372:	bf15      	itete	ne
 8008374:	6560      	strne	r0, [r4, #84]	; 0x54
 8008376:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800837a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800837e:	81a3      	strheq	r3, [r4, #12]
 8008380:	bf18      	it	ne
 8008382:	81a3      	strhne	r3, [r4, #12]
 8008384:	bd10      	pop	{r4, pc}

08008386 <__sclose>:
 8008386:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800838a:	f000 b8af 	b.w	80084ec <_close_r>

0800838e <__swbuf_r>:
 800838e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008390:	460e      	mov	r6, r1
 8008392:	4614      	mov	r4, r2
 8008394:	4605      	mov	r5, r0
 8008396:	b118      	cbz	r0, 80083a0 <__swbuf_r+0x12>
 8008398:	6a03      	ldr	r3, [r0, #32]
 800839a:	b90b      	cbnz	r3, 80083a0 <__swbuf_r+0x12>
 800839c:	f7ff fee8 	bl	8008170 <__sinit>
 80083a0:	69a3      	ldr	r3, [r4, #24]
 80083a2:	60a3      	str	r3, [r4, #8]
 80083a4:	89a3      	ldrh	r3, [r4, #12]
 80083a6:	071a      	lsls	r2, r3, #28
 80083a8:	d525      	bpl.n	80083f6 <__swbuf_r+0x68>
 80083aa:	6923      	ldr	r3, [r4, #16]
 80083ac:	b31b      	cbz	r3, 80083f6 <__swbuf_r+0x68>
 80083ae:	6823      	ldr	r3, [r4, #0]
 80083b0:	6922      	ldr	r2, [r4, #16]
 80083b2:	1a98      	subs	r0, r3, r2
 80083b4:	6963      	ldr	r3, [r4, #20]
 80083b6:	b2f6      	uxtb	r6, r6
 80083b8:	4283      	cmp	r3, r0
 80083ba:	4637      	mov	r7, r6
 80083bc:	dc04      	bgt.n	80083c8 <__swbuf_r+0x3a>
 80083be:	4621      	mov	r1, r4
 80083c0:	4628      	mov	r0, r5
 80083c2:	f000 feb1 	bl	8009128 <_fflush_r>
 80083c6:	b9e0      	cbnz	r0, 8008402 <__swbuf_r+0x74>
 80083c8:	68a3      	ldr	r3, [r4, #8]
 80083ca:	3b01      	subs	r3, #1
 80083cc:	60a3      	str	r3, [r4, #8]
 80083ce:	6823      	ldr	r3, [r4, #0]
 80083d0:	1c5a      	adds	r2, r3, #1
 80083d2:	6022      	str	r2, [r4, #0]
 80083d4:	701e      	strb	r6, [r3, #0]
 80083d6:	6962      	ldr	r2, [r4, #20]
 80083d8:	1c43      	adds	r3, r0, #1
 80083da:	429a      	cmp	r2, r3
 80083dc:	d004      	beq.n	80083e8 <__swbuf_r+0x5a>
 80083de:	89a3      	ldrh	r3, [r4, #12]
 80083e0:	07db      	lsls	r3, r3, #31
 80083e2:	d506      	bpl.n	80083f2 <__swbuf_r+0x64>
 80083e4:	2e0a      	cmp	r6, #10
 80083e6:	d104      	bne.n	80083f2 <__swbuf_r+0x64>
 80083e8:	4621      	mov	r1, r4
 80083ea:	4628      	mov	r0, r5
 80083ec:	f000 fe9c 	bl	8009128 <_fflush_r>
 80083f0:	b938      	cbnz	r0, 8008402 <__swbuf_r+0x74>
 80083f2:	4638      	mov	r0, r7
 80083f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083f6:	4621      	mov	r1, r4
 80083f8:	4628      	mov	r0, r5
 80083fa:	f000 f805 	bl	8008408 <__swsetup_r>
 80083fe:	2800      	cmp	r0, #0
 8008400:	d0d5      	beq.n	80083ae <__swbuf_r+0x20>
 8008402:	f04f 37ff 	mov.w	r7, #4294967295
 8008406:	e7f4      	b.n	80083f2 <__swbuf_r+0x64>

08008408 <__swsetup_r>:
 8008408:	b538      	push	{r3, r4, r5, lr}
 800840a:	4b2a      	ldr	r3, [pc, #168]	; (80084b4 <__swsetup_r+0xac>)
 800840c:	4605      	mov	r5, r0
 800840e:	6818      	ldr	r0, [r3, #0]
 8008410:	460c      	mov	r4, r1
 8008412:	b118      	cbz	r0, 800841c <__swsetup_r+0x14>
 8008414:	6a03      	ldr	r3, [r0, #32]
 8008416:	b90b      	cbnz	r3, 800841c <__swsetup_r+0x14>
 8008418:	f7ff feaa 	bl	8008170 <__sinit>
 800841c:	89a3      	ldrh	r3, [r4, #12]
 800841e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008422:	0718      	lsls	r0, r3, #28
 8008424:	d422      	bmi.n	800846c <__swsetup_r+0x64>
 8008426:	06d9      	lsls	r1, r3, #27
 8008428:	d407      	bmi.n	800843a <__swsetup_r+0x32>
 800842a:	2309      	movs	r3, #9
 800842c:	602b      	str	r3, [r5, #0]
 800842e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008432:	81a3      	strh	r3, [r4, #12]
 8008434:	f04f 30ff 	mov.w	r0, #4294967295
 8008438:	e034      	b.n	80084a4 <__swsetup_r+0x9c>
 800843a:	0758      	lsls	r0, r3, #29
 800843c:	d512      	bpl.n	8008464 <__swsetup_r+0x5c>
 800843e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008440:	b141      	cbz	r1, 8008454 <__swsetup_r+0x4c>
 8008442:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008446:	4299      	cmp	r1, r3
 8008448:	d002      	beq.n	8008450 <__swsetup_r+0x48>
 800844a:	4628      	mov	r0, r5
 800844c:	f000 f8c2 	bl	80085d4 <_free_r>
 8008450:	2300      	movs	r3, #0
 8008452:	6363      	str	r3, [r4, #52]	; 0x34
 8008454:	89a3      	ldrh	r3, [r4, #12]
 8008456:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800845a:	81a3      	strh	r3, [r4, #12]
 800845c:	2300      	movs	r3, #0
 800845e:	6063      	str	r3, [r4, #4]
 8008460:	6923      	ldr	r3, [r4, #16]
 8008462:	6023      	str	r3, [r4, #0]
 8008464:	89a3      	ldrh	r3, [r4, #12]
 8008466:	f043 0308 	orr.w	r3, r3, #8
 800846a:	81a3      	strh	r3, [r4, #12]
 800846c:	6923      	ldr	r3, [r4, #16]
 800846e:	b94b      	cbnz	r3, 8008484 <__swsetup_r+0x7c>
 8008470:	89a3      	ldrh	r3, [r4, #12]
 8008472:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008476:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800847a:	d003      	beq.n	8008484 <__swsetup_r+0x7c>
 800847c:	4621      	mov	r1, r4
 800847e:	4628      	mov	r0, r5
 8008480:	f000 fea0 	bl	80091c4 <__smakebuf_r>
 8008484:	89a0      	ldrh	r0, [r4, #12]
 8008486:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800848a:	f010 0301 	ands.w	r3, r0, #1
 800848e:	d00a      	beq.n	80084a6 <__swsetup_r+0x9e>
 8008490:	2300      	movs	r3, #0
 8008492:	60a3      	str	r3, [r4, #8]
 8008494:	6963      	ldr	r3, [r4, #20]
 8008496:	425b      	negs	r3, r3
 8008498:	61a3      	str	r3, [r4, #24]
 800849a:	6923      	ldr	r3, [r4, #16]
 800849c:	b943      	cbnz	r3, 80084b0 <__swsetup_r+0xa8>
 800849e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80084a2:	d1c4      	bne.n	800842e <__swsetup_r+0x26>
 80084a4:	bd38      	pop	{r3, r4, r5, pc}
 80084a6:	0781      	lsls	r1, r0, #30
 80084a8:	bf58      	it	pl
 80084aa:	6963      	ldrpl	r3, [r4, #20]
 80084ac:	60a3      	str	r3, [r4, #8]
 80084ae:	e7f4      	b.n	800849a <__swsetup_r+0x92>
 80084b0:	2000      	movs	r0, #0
 80084b2:	e7f7      	b.n	80084a4 <__swsetup_r+0x9c>
 80084b4:	20000068 	.word	0x20000068

080084b8 <memset>:
 80084b8:	4402      	add	r2, r0
 80084ba:	4603      	mov	r3, r0
 80084bc:	4293      	cmp	r3, r2
 80084be:	d100      	bne.n	80084c2 <memset+0xa>
 80084c0:	4770      	bx	lr
 80084c2:	f803 1b01 	strb.w	r1, [r3], #1
 80084c6:	e7f9      	b.n	80084bc <memset+0x4>

080084c8 <strncmp>:
 80084c8:	b510      	push	{r4, lr}
 80084ca:	b16a      	cbz	r2, 80084e8 <strncmp+0x20>
 80084cc:	3901      	subs	r1, #1
 80084ce:	1884      	adds	r4, r0, r2
 80084d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084d4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80084d8:	429a      	cmp	r2, r3
 80084da:	d103      	bne.n	80084e4 <strncmp+0x1c>
 80084dc:	42a0      	cmp	r0, r4
 80084de:	d001      	beq.n	80084e4 <strncmp+0x1c>
 80084e0:	2a00      	cmp	r2, #0
 80084e2:	d1f5      	bne.n	80084d0 <strncmp+0x8>
 80084e4:	1ad0      	subs	r0, r2, r3
 80084e6:	bd10      	pop	{r4, pc}
 80084e8:	4610      	mov	r0, r2
 80084ea:	e7fc      	b.n	80084e6 <strncmp+0x1e>

080084ec <_close_r>:
 80084ec:	b538      	push	{r3, r4, r5, lr}
 80084ee:	4d06      	ldr	r5, [pc, #24]	; (8008508 <_close_r+0x1c>)
 80084f0:	2300      	movs	r3, #0
 80084f2:	4604      	mov	r4, r0
 80084f4:	4608      	mov	r0, r1
 80084f6:	602b      	str	r3, [r5, #0]
 80084f8:	f7fa fbeb 	bl	8002cd2 <_close>
 80084fc:	1c43      	adds	r3, r0, #1
 80084fe:	d102      	bne.n	8008506 <_close_r+0x1a>
 8008500:	682b      	ldr	r3, [r5, #0]
 8008502:	b103      	cbz	r3, 8008506 <_close_r+0x1a>
 8008504:	6023      	str	r3, [r4, #0]
 8008506:	bd38      	pop	{r3, r4, r5, pc}
 8008508:	20000558 	.word	0x20000558

0800850c <_lseek_r>:
 800850c:	b538      	push	{r3, r4, r5, lr}
 800850e:	4d07      	ldr	r5, [pc, #28]	; (800852c <_lseek_r+0x20>)
 8008510:	4604      	mov	r4, r0
 8008512:	4608      	mov	r0, r1
 8008514:	4611      	mov	r1, r2
 8008516:	2200      	movs	r2, #0
 8008518:	602a      	str	r2, [r5, #0]
 800851a:	461a      	mov	r2, r3
 800851c:	f7fa fc00 	bl	8002d20 <_lseek>
 8008520:	1c43      	adds	r3, r0, #1
 8008522:	d102      	bne.n	800852a <_lseek_r+0x1e>
 8008524:	682b      	ldr	r3, [r5, #0]
 8008526:	b103      	cbz	r3, 800852a <_lseek_r+0x1e>
 8008528:	6023      	str	r3, [r4, #0]
 800852a:	bd38      	pop	{r3, r4, r5, pc}
 800852c:	20000558 	.word	0x20000558

08008530 <_read_r>:
 8008530:	b538      	push	{r3, r4, r5, lr}
 8008532:	4d07      	ldr	r5, [pc, #28]	; (8008550 <_read_r+0x20>)
 8008534:	4604      	mov	r4, r0
 8008536:	4608      	mov	r0, r1
 8008538:	4611      	mov	r1, r2
 800853a:	2200      	movs	r2, #0
 800853c:	602a      	str	r2, [r5, #0]
 800853e:	461a      	mov	r2, r3
 8008540:	f7fa fbaa 	bl	8002c98 <_read>
 8008544:	1c43      	adds	r3, r0, #1
 8008546:	d102      	bne.n	800854e <_read_r+0x1e>
 8008548:	682b      	ldr	r3, [r5, #0]
 800854a:	b103      	cbz	r3, 800854e <_read_r+0x1e>
 800854c:	6023      	str	r3, [r4, #0]
 800854e:	bd38      	pop	{r3, r4, r5, pc}
 8008550:	20000558 	.word	0x20000558

08008554 <_write_r>:
 8008554:	b538      	push	{r3, r4, r5, lr}
 8008556:	4d07      	ldr	r5, [pc, #28]	; (8008574 <_write_r+0x20>)
 8008558:	4604      	mov	r4, r0
 800855a:	4608      	mov	r0, r1
 800855c:	4611      	mov	r1, r2
 800855e:	2200      	movs	r2, #0
 8008560:	602a      	str	r2, [r5, #0]
 8008562:	461a      	mov	r2, r3
 8008564:	f7fa fcd4 	bl	8002f10 <_write>
 8008568:	1c43      	adds	r3, r0, #1
 800856a:	d102      	bne.n	8008572 <_write_r+0x1e>
 800856c:	682b      	ldr	r3, [r5, #0]
 800856e:	b103      	cbz	r3, 8008572 <_write_r+0x1e>
 8008570:	6023      	str	r3, [r4, #0]
 8008572:	bd38      	pop	{r3, r4, r5, pc}
 8008574:	20000558 	.word	0x20000558

08008578 <__errno>:
 8008578:	4b01      	ldr	r3, [pc, #4]	; (8008580 <__errno+0x8>)
 800857a:	6818      	ldr	r0, [r3, #0]
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	20000068 	.word	0x20000068

08008584 <__libc_init_array>:
 8008584:	b570      	push	{r4, r5, r6, lr}
 8008586:	4d0d      	ldr	r5, [pc, #52]	; (80085bc <__libc_init_array+0x38>)
 8008588:	4c0d      	ldr	r4, [pc, #52]	; (80085c0 <__libc_init_array+0x3c>)
 800858a:	1b64      	subs	r4, r4, r5
 800858c:	10a4      	asrs	r4, r4, #2
 800858e:	2600      	movs	r6, #0
 8008590:	42a6      	cmp	r6, r4
 8008592:	d109      	bne.n	80085a8 <__libc_init_array+0x24>
 8008594:	4d0b      	ldr	r5, [pc, #44]	; (80085c4 <__libc_init_array+0x40>)
 8008596:	4c0c      	ldr	r4, [pc, #48]	; (80085c8 <__libc_init_array+0x44>)
 8008598:	f000 ff16 	bl	80093c8 <_init>
 800859c:	1b64      	subs	r4, r4, r5
 800859e:	10a4      	asrs	r4, r4, #2
 80085a0:	2600      	movs	r6, #0
 80085a2:	42a6      	cmp	r6, r4
 80085a4:	d105      	bne.n	80085b2 <__libc_init_array+0x2e>
 80085a6:	bd70      	pop	{r4, r5, r6, pc}
 80085a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80085ac:	4798      	blx	r3
 80085ae:	3601      	adds	r6, #1
 80085b0:	e7ee      	b.n	8008590 <__libc_init_array+0xc>
 80085b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80085b6:	4798      	blx	r3
 80085b8:	3601      	adds	r6, #1
 80085ba:	e7f2      	b.n	80085a2 <__libc_init_array+0x1e>
 80085bc:	08009554 	.word	0x08009554
 80085c0:	08009554 	.word	0x08009554
 80085c4:	08009554 	.word	0x08009554
 80085c8:	08009558 	.word	0x08009558

080085cc <__retarget_lock_init_recursive>:
 80085cc:	4770      	bx	lr

080085ce <__retarget_lock_acquire_recursive>:
 80085ce:	4770      	bx	lr

080085d0 <__retarget_lock_release_recursive>:
 80085d0:	4770      	bx	lr
	...

080085d4 <_free_r>:
 80085d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085d6:	2900      	cmp	r1, #0
 80085d8:	d044      	beq.n	8008664 <_free_r+0x90>
 80085da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085de:	9001      	str	r0, [sp, #4]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	f1a1 0404 	sub.w	r4, r1, #4
 80085e6:	bfb8      	it	lt
 80085e8:	18e4      	addlt	r4, r4, r3
 80085ea:	f000 f8df 	bl	80087ac <__malloc_lock>
 80085ee:	4a1e      	ldr	r2, [pc, #120]	; (8008668 <_free_r+0x94>)
 80085f0:	9801      	ldr	r0, [sp, #4]
 80085f2:	6813      	ldr	r3, [r2, #0]
 80085f4:	b933      	cbnz	r3, 8008604 <_free_r+0x30>
 80085f6:	6063      	str	r3, [r4, #4]
 80085f8:	6014      	str	r4, [r2, #0]
 80085fa:	b003      	add	sp, #12
 80085fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008600:	f000 b8da 	b.w	80087b8 <__malloc_unlock>
 8008604:	42a3      	cmp	r3, r4
 8008606:	d908      	bls.n	800861a <_free_r+0x46>
 8008608:	6825      	ldr	r5, [r4, #0]
 800860a:	1961      	adds	r1, r4, r5
 800860c:	428b      	cmp	r3, r1
 800860e:	bf01      	itttt	eq
 8008610:	6819      	ldreq	r1, [r3, #0]
 8008612:	685b      	ldreq	r3, [r3, #4]
 8008614:	1949      	addeq	r1, r1, r5
 8008616:	6021      	streq	r1, [r4, #0]
 8008618:	e7ed      	b.n	80085f6 <_free_r+0x22>
 800861a:	461a      	mov	r2, r3
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	b10b      	cbz	r3, 8008624 <_free_r+0x50>
 8008620:	42a3      	cmp	r3, r4
 8008622:	d9fa      	bls.n	800861a <_free_r+0x46>
 8008624:	6811      	ldr	r1, [r2, #0]
 8008626:	1855      	adds	r5, r2, r1
 8008628:	42a5      	cmp	r5, r4
 800862a:	d10b      	bne.n	8008644 <_free_r+0x70>
 800862c:	6824      	ldr	r4, [r4, #0]
 800862e:	4421      	add	r1, r4
 8008630:	1854      	adds	r4, r2, r1
 8008632:	42a3      	cmp	r3, r4
 8008634:	6011      	str	r1, [r2, #0]
 8008636:	d1e0      	bne.n	80085fa <_free_r+0x26>
 8008638:	681c      	ldr	r4, [r3, #0]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	6053      	str	r3, [r2, #4]
 800863e:	440c      	add	r4, r1
 8008640:	6014      	str	r4, [r2, #0]
 8008642:	e7da      	b.n	80085fa <_free_r+0x26>
 8008644:	d902      	bls.n	800864c <_free_r+0x78>
 8008646:	230c      	movs	r3, #12
 8008648:	6003      	str	r3, [r0, #0]
 800864a:	e7d6      	b.n	80085fa <_free_r+0x26>
 800864c:	6825      	ldr	r5, [r4, #0]
 800864e:	1961      	adds	r1, r4, r5
 8008650:	428b      	cmp	r3, r1
 8008652:	bf04      	itt	eq
 8008654:	6819      	ldreq	r1, [r3, #0]
 8008656:	685b      	ldreq	r3, [r3, #4]
 8008658:	6063      	str	r3, [r4, #4]
 800865a:	bf04      	itt	eq
 800865c:	1949      	addeq	r1, r1, r5
 800865e:	6021      	streq	r1, [r4, #0]
 8008660:	6054      	str	r4, [r2, #4]
 8008662:	e7ca      	b.n	80085fa <_free_r+0x26>
 8008664:	b003      	add	sp, #12
 8008666:	bd30      	pop	{r4, r5, pc}
 8008668:	20000560 	.word	0x20000560

0800866c <sbrk_aligned>:
 800866c:	b570      	push	{r4, r5, r6, lr}
 800866e:	4e0e      	ldr	r6, [pc, #56]	; (80086a8 <sbrk_aligned+0x3c>)
 8008670:	460c      	mov	r4, r1
 8008672:	6831      	ldr	r1, [r6, #0]
 8008674:	4605      	mov	r5, r0
 8008676:	b911      	cbnz	r1, 800867e <sbrk_aligned+0x12>
 8008678:	f000 fe50 	bl	800931c <_sbrk_r>
 800867c:	6030      	str	r0, [r6, #0]
 800867e:	4621      	mov	r1, r4
 8008680:	4628      	mov	r0, r5
 8008682:	f000 fe4b 	bl	800931c <_sbrk_r>
 8008686:	1c43      	adds	r3, r0, #1
 8008688:	d00a      	beq.n	80086a0 <sbrk_aligned+0x34>
 800868a:	1cc4      	adds	r4, r0, #3
 800868c:	f024 0403 	bic.w	r4, r4, #3
 8008690:	42a0      	cmp	r0, r4
 8008692:	d007      	beq.n	80086a4 <sbrk_aligned+0x38>
 8008694:	1a21      	subs	r1, r4, r0
 8008696:	4628      	mov	r0, r5
 8008698:	f000 fe40 	bl	800931c <_sbrk_r>
 800869c:	3001      	adds	r0, #1
 800869e:	d101      	bne.n	80086a4 <sbrk_aligned+0x38>
 80086a0:	f04f 34ff 	mov.w	r4, #4294967295
 80086a4:	4620      	mov	r0, r4
 80086a6:	bd70      	pop	{r4, r5, r6, pc}
 80086a8:	20000564 	.word	0x20000564

080086ac <_malloc_r>:
 80086ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086b0:	1ccd      	adds	r5, r1, #3
 80086b2:	f025 0503 	bic.w	r5, r5, #3
 80086b6:	3508      	adds	r5, #8
 80086b8:	2d0c      	cmp	r5, #12
 80086ba:	bf38      	it	cc
 80086bc:	250c      	movcc	r5, #12
 80086be:	2d00      	cmp	r5, #0
 80086c0:	4607      	mov	r7, r0
 80086c2:	db01      	blt.n	80086c8 <_malloc_r+0x1c>
 80086c4:	42a9      	cmp	r1, r5
 80086c6:	d905      	bls.n	80086d4 <_malloc_r+0x28>
 80086c8:	230c      	movs	r3, #12
 80086ca:	603b      	str	r3, [r7, #0]
 80086cc:	2600      	movs	r6, #0
 80086ce:	4630      	mov	r0, r6
 80086d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80087a8 <_malloc_r+0xfc>
 80086d8:	f000 f868 	bl	80087ac <__malloc_lock>
 80086dc:	f8d8 3000 	ldr.w	r3, [r8]
 80086e0:	461c      	mov	r4, r3
 80086e2:	bb5c      	cbnz	r4, 800873c <_malloc_r+0x90>
 80086e4:	4629      	mov	r1, r5
 80086e6:	4638      	mov	r0, r7
 80086e8:	f7ff ffc0 	bl	800866c <sbrk_aligned>
 80086ec:	1c43      	adds	r3, r0, #1
 80086ee:	4604      	mov	r4, r0
 80086f0:	d155      	bne.n	800879e <_malloc_r+0xf2>
 80086f2:	f8d8 4000 	ldr.w	r4, [r8]
 80086f6:	4626      	mov	r6, r4
 80086f8:	2e00      	cmp	r6, #0
 80086fa:	d145      	bne.n	8008788 <_malloc_r+0xdc>
 80086fc:	2c00      	cmp	r4, #0
 80086fe:	d048      	beq.n	8008792 <_malloc_r+0xe6>
 8008700:	6823      	ldr	r3, [r4, #0]
 8008702:	4631      	mov	r1, r6
 8008704:	4638      	mov	r0, r7
 8008706:	eb04 0903 	add.w	r9, r4, r3
 800870a:	f000 fe07 	bl	800931c <_sbrk_r>
 800870e:	4581      	cmp	r9, r0
 8008710:	d13f      	bne.n	8008792 <_malloc_r+0xe6>
 8008712:	6821      	ldr	r1, [r4, #0]
 8008714:	1a6d      	subs	r5, r5, r1
 8008716:	4629      	mov	r1, r5
 8008718:	4638      	mov	r0, r7
 800871a:	f7ff ffa7 	bl	800866c <sbrk_aligned>
 800871e:	3001      	adds	r0, #1
 8008720:	d037      	beq.n	8008792 <_malloc_r+0xe6>
 8008722:	6823      	ldr	r3, [r4, #0]
 8008724:	442b      	add	r3, r5
 8008726:	6023      	str	r3, [r4, #0]
 8008728:	f8d8 3000 	ldr.w	r3, [r8]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d038      	beq.n	80087a2 <_malloc_r+0xf6>
 8008730:	685a      	ldr	r2, [r3, #4]
 8008732:	42a2      	cmp	r2, r4
 8008734:	d12b      	bne.n	800878e <_malloc_r+0xe2>
 8008736:	2200      	movs	r2, #0
 8008738:	605a      	str	r2, [r3, #4]
 800873a:	e00f      	b.n	800875c <_malloc_r+0xb0>
 800873c:	6822      	ldr	r2, [r4, #0]
 800873e:	1b52      	subs	r2, r2, r5
 8008740:	d41f      	bmi.n	8008782 <_malloc_r+0xd6>
 8008742:	2a0b      	cmp	r2, #11
 8008744:	d917      	bls.n	8008776 <_malloc_r+0xca>
 8008746:	1961      	adds	r1, r4, r5
 8008748:	42a3      	cmp	r3, r4
 800874a:	6025      	str	r5, [r4, #0]
 800874c:	bf18      	it	ne
 800874e:	6059      	strne	r1, [r3, #4]
 8008750:	6863      	ldr	r3, [r4, #4]
 8008752:	bf08      	it	eq
 8008754:	f8c8 1000 	streq.w	r1, [r8]
 8008758:	5162      	str	r2, [r4, r5]
 800875a:	604b      	str	r3, [r1, #4]
 800875c:	4638      	mov	r0, r7
 800875e:	f104 060b 	add.w	r6, r4, #11
 8008762:	f000 f829 	bl	80087b8 <__malloc_unlock>
 8008766:	f026 0607 	bic.w	r6, r6, #7
 800876a:	1d23      	adds	r3, r4, #4
 800876c:	1af2      	subs	r2, r6, r3
 800876e:	d0ae      	beq.n	80086ce <_malloc_r+0x22>
 8008770:	1b9b      	subs	r3, r3, r6
 8008772:	50a3      	str	r3, [r4, r2]
 8008774:	e7ab      	b.n	80086ce <_malloc_r+0x22>
 8008776:	42a3      	cmp	r3, r4
 8008778:	6862      	ldr	r2, [r4, #4]
 800877a:	d1dd      	bne.n	8008738 <_malloc_r+0x8c>
 800877c:	f8c8 2000 	str.w	r2, [r8]
 8008780:	e7ec      	b.n	800875c <_malloc_r+0xb0>
 8008782:	4623      	mov	r3, r4
 8008784:	6864      	ldr	r4, [r4, #4]
 8008786:	e7ac      	b.n	80086e2 <_malloc_r+0x36>
 8008788:	4634      	mov	r4, r6
 800878a:	6876      	ldr	r6, [r6, #4]
 800878c:	e7b4      	b.n	80086f8 <_malloc_r+0x4c>
 800878e:	4613      	mov	r3, r2
 8008790:	e7cc      	b.n	800872c <_malloc_r+0x80>
 8008792:	230c      	movs	r3, #12
 8008794:	603b      	str	r3, [r7, #0]
 8008796:	4638      	mov	r0, r7
 8008798:	f000 f80e 	bl	80087b8 <__malloc_unlock>
 800879c:	e797      	b.n	80086ce <_malloc_r+0x22>
 800879e:	6025      	str	r5, [r4, #0]
 80087a0:	e7dc      	b.n	800875c <_malloc_r+0xb0>
 80087a2:	605b      	str	r3, [r3, #4]
 80087a4:	deff      	udf	#255	; 0xff
 80087a6:	bf00      	nop
 80087a8:	20000560 	.word	0x20000560

080087ac <__malloc_lock>:
 80087ac:	4801      	ldr	r0, [pc, #4]	; (80087b4 <__malloc_lock+0x8>)
 80087ae:	f7ff bf0e 	b.w	80085ce <__retarget_lock_acquire_recursive>
 80087b2:	bf00      	nop
 80087b4:	2000055c 	.word	0x2000055c

080087b8 <__malloc_unlock>:
 80087b8:	4801      	ldr	r0, [pc, #4]	; (80087c0 <__malloc_unlock+0x8>)
 80087ba:	f7ff bf09 	b.w	80085d0 <__retarget_lock_release_recursive>
 80087be:	bf00      	nop
 80087c0:	2000055c 	.word	0x2000055c

080087c4 <__ssputs_r>:
 80087c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087c8:	688e      	ldr	r6, [r1, #8]
 80087ca:	461f      	mov	r7, r3
 80087cc:	42be      	cmp	r6, r7
 80087ce:	680b      	ldr	r3, [r1, #0]
 80087d0:	4682      	mov	sl, r0
 80087d2:	460c      	mov	r4, r1
 80087d4:	4690      	mov	r8, r2
 80087d6:	d82c      	bhi.n	8008832 <__ssputs_r+0x6e>
 80087d8:	898a      	ldrh	r2, [r1, #12]
 80087da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80087de:	d026      	beq.n	800882e <__ssputs_r+0x6a>
 80087e0:	6965      	ldr	r5, [r4, #20]
 80087e2:	6909      	ldr	r1, [r1, #16]
 80087e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087e8:	eba3 0901 	sub.w	r9, r3, r1
 80087ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80087f0:	1c7b      	adds	r3, r7, #1
 80087f2:	444b      	add	r3, r9
 80087f4:	106d      	asrs	r5, r5, #1
 80087f6:	429d      	cmp	r5, r3
 80087f8:	bf38      	it	cc
 80087fa:	461d      	movcc	r5, r3
 80087fc:	0553      	lsls	r3, r2, #21
 80087fe:	d527      	bpl.n	8008850 <__ssputs_r+0x8c>
 8008800:	4629      	mov	r1, r5
 8008802:	f7ff ff53 	bl	80086ac <_malloc_r>
 8008806:	4606      	mov	r6, r0
 8008808:	b360      	cbz	r0, 8008864 <__ssputs_r+0xa0>
 800880a:	6921      	ldr	r1, [r4, #16]
 800880c:	464a      	mov	r2, r9
 800880e:	f000 fd95 	bl	800933c <memcpy>
 8008812:	89a3      	ldrh	r3, [r4, #12]
 8008814:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800881c:	81a3      	strh	r3, [r4, #12]
 800881e:	6126      	str	r6, [r4, #16]
 8008820:	6165      	str	r5, [r4, #20]
 8008822:	444e      	add	r6, r9
 8008824:	eba5 0509 	sub.w	r5, r5, r9
 8008828:	6026      	str	r6, [r4, #0]
 800882a:	60a5      	str	r5, [r4, #8]
 800882c:	463e      	mov	r6, r7
 800882e:	42be      	cmp	r6, r7
 8008830:	d900      	bls.n	8008834 <__ssputs_r+0x70>
 8008832:	463e      	mov	r6, r7
 8008834:	6820      	ldr	r0, [r4, #0]
 8008836:	4632      	mov	r2, r6
 8008838:	4641      	mov	r1, r8
 800883a:	f000 fd33 	bl	80092a4 <memmove>
 800883e:	68a3      	ldr	r3, [r4, #8]
 8008840:	1b9b      	subs	r3, r3, r6
 8008842:	60a3      	str	r3, [r4, #8]
 8008844:	6823      	ldr	r3, [r4, #0]
 8008846:	4433      	add	r3, r6
 8008848:	6023      	str	r3, [r4, #0]
 800884a:	2000      	movs	r0, #0
 800884c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008850:	462a      	mov	r2, r5
 8008852:	f000 fd81 	bl	8009358 <_realloc_r>
 8008856:	4606      	mov	r6, r0
 8008858:	2800      	cmp	r0, #0
 800885a:	d1e0      	bne.n	800881e <__ssputs_r+0x5a>
 800885c:	6921      	ldr	r1, [r4, #16]
 800885e:	4650      	mov	r0, sl
 8008860:	f7ff feb8 	bl	80085d4 <_free_r>
 8008864:	230c      	movs	r3, #12
 8008866:	f8ca 3000 	str.w	r3, [sl]
 800886a:	89a3      	ldrh	r3, [r4, #12]
 800886c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008870:	81a3      	strh	r3, [r4, #12]
 8008872:	f04f 30ff 	mov.w	r0, #4294967295
 8008876:	e7e9      	b.n	800884c <__ssputs_r+0x88>

08008878 <_svfiprintf_r>:
 8008878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800887c:	4698      	mov	r8, r3
 800887e:	898b      	ldrh	r3, [r1, #12]
 8008880:	061b      	lsls	r3, r3, #24
 8008882:	b09d      	sub	sp, #116	; 0x74
 8008884:	4607      	mov	r7, r0
 8008886:	460d      	mov	r5, r1
 8008888:	4614      	mov	r4, r2
 800888a:	d50e      	bpl.n	80088aa <_svfiprintf_r+0x32>
 800888c:	690b      	ldr	r3, [r1, #16]
 800888e:	b963      	cbnz	r3, 80088aa <_svfiprintf_r+0x32>
 8008890:	2140      	movs	r1, #64	; 0x40
 8008892:	f7ff ff0b 	bl	80086ac <_malloc_r>
 8008896:	6028      	str	r0, [r5, #0]
 8008898:	6128      	str	r0, [r5, #16]
 800889a:	b920      	cbnz	r0, 80088a6 <_svfiprintf_r+0x2e>
 800889c:	230c      	movs	r3, #12
 800889e:	603b      	str	r3, [r7, #0]
 80088a0:	f04f 30ff 	mov.w	r0, #4294967295
 80088a4:	e0d0      	b.n	8008a48 <_svfiprintf_r+0x1d0>
 80088a6:	2340      	movs	r3, #64	; 0x40
 80088a8:	616b      	str	r3, [r5, #20]
 80088aa:	2300      	movs	r3, #0
 80088ac:	9309      	str	r3, [sp, #36]	; 0x24
 80088ae:	2320      	movs	r3, #32
 80088b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80088b8:	2330      	movs	r3, #48	; 0x30
 80088ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008a60 <_svfiprintf_r+0x1e8>
 80088be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088c2:	f04f 0901 	mov.w	r9, #1
 80088c6:	4623      	mov	r3, r4
 80088c8:	469a      	mov	sl, r3
 80088ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088ce:	b10a      	cbz	r2, 80088d4 <_svfiprintf_r+0x5c>
 80088d0:	2a25      	cmp	r2, #37	; 0x25
 80088d2:	d1f9      	bne.n	80088c8 <_svfiprintf_r+0x50>
 80088d4:	ebba 0b04 	subs.w	fp, sl, r4
 80088d8:	d00b      	beq.n	80088f2 <_svfiprintf_r+0x7a>
 80088da:	465b      	mov	r3, fp
 80088dc:	4622      	mov	r2, r4
 80088de:	4629      	mov	r1, r5
 80088e0:	4638      	mov	r0, r7
 80088e2:	f7ff ff6f 	bl	80087c4 <__ssputs_r>
 80088e6:	3001      	adds	r0, #1
 80088e8:	f000 80a9 	beq.w	8008a3e <_svfiprintf_r+0x1c6>
 80088ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088ee:	445a      	add	r2, fp
 80088f0:	9209      	str	r2, [sp, #36]	; 0x24
 80088f2:	f89a 3000 	ldrb.w	r3, [sl]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	f000 80a1 	beq.w	8008a3e <_svfiprintf_r+0x1c6>
 80088fc:	2300      	movs	r3, #0
 80088fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008902:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008906:	f10a 0a01 	add.w	sl, sl, #1
 800890a:	9304      	str	r3, [sp, #16]
 800890c:	9307      	str	r3, [sp, #28]
 800890e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008912:	931a      	str	r3, [sp, #104]	; 0x68
 8008914:	4654      	mov	r4, sl
 8008916:	2205      	movs	r2, #5
 8008918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800891c:	4850      	ldr	r0, [pc, #320]	; (8008a60 <_svfiprintf_r+0x1e8>)
 800891e:	f7f7 fc5f 	bl	80001e0 <memchr>
 8008922:	9a04      	ldr	r2, [sp, #16]
 8008924:	b9d8      	cbnz	r0, 800895e <_svfiprintf_r+0xe6>
 8008926:	06d0      	lsls	r0, r2, #27
 8008928:	bf44      	itt	mi
 800892a:	2320      	movmi	r3, #32
 800892c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008930:	0711      	lsls	r1, r2, #28
 8008932:	bf44      	itt	mi
 8008934:	232b      	movmi	r3, #43	; 0x2b
 8008936:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800893a:	f89a 3000 	ldrb.w	r3, [sl]
 800893e:	2b2a      	cmp	r3, #42	; 0x2a
 8008940:	d015      	beq.n	800896e <_svfiprintf_r+0xf6>
 8008942:	9a07      	ldr	r2, [sp, #28]
 8008944:	4654      	mov	r4, sl
 8008946:	2000      	movs	r0, #0
 8008948:	f04f 0c0a 	mov.w	ip, #10
 800894c:	4621      	mov	r1, r4
 800894e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008952:	3b30      	subs	r3, #48	; 0x30
 8008954:	2b09      	cmp	r3, #9
 8008956:	d94d      	bls.n	80089f4 <_svfiprintf_r+0x17c>
 8008958:	b1b0      	cbz	r0, 8008988 <_svfiprintf_r+0x110>
 800895a:	9207      	str	r2, [sp, #28]
 800895c:	e014      	b.n	8008988 <_svfiprintf_r+0x110>
 800895e:	eba0 0308 	sub.w	r3, r0, r8
 8008962:	fa09 f303 	lsl.w	r3, r9, r3
 8008966:	4313      	orrs	r3, r2
 8008968:	9304      	str	r3, [sp, #16]
 800896a:	46a2      	mov	sl, r4
 800896c:	e7d2      	b.n	8008914 <_svfiprintf_r+0x9c>
 800896e:	9b03      	ldr	r3, [sp, #12]
 8008970:	1d19      	adds	r1, r3, #4
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	9103      	str	r1, [sp, #12]
 8008976:	2b00      	cmp	r3, #0
 8008978:	bfbb      	ittet	lt
 800897a:	425b      	neglt	r3, r3
 800897c:	f042 0202 	orrlt.w	r2, r2, #2
 8008980:	9307      	strge	r3, [sp, #28]
 8008982:	9307      	strlt	r3, [sp, #28]
 8008984:	bfb8      	it	lt
 8008986:	9204      	strlt	r2, [sp, #16]
 8008988:	7823      	ldrb	r3, [r4, #0]
 800898a:	2b2e      	cmp	r3, #46	; 0x2e
 800898c:	d10c      	bne.n	80089a8 <_svfiprintf_r+0x130>
 800898e:	7863      	ldrb	r3, [r4, #1]
 8008990:	2b2a      	cmp	r3, #42	; 0x2a
 8008992:	d134      	bne.n	80089fe <_svfiprintf_r+0x186>
 8008994:	9b03      	ldr	r3, [sp, #12]
 8008996:	1d1a      	adds	r2, r3, #4
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	9203      	str	r2, [sp, #12]
 800899c:	2b00      	cmp	r3, #0
 800899e:	bfb8      	it	lt
 80089a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80089a4:	3402      	adds	r4, #2
 80089a6:	9305      	str	r3, [sp, #20]
 80089a8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008a70 <_svfiprintf_r+0x1f8>
 80089ac:	7821      	ldrb	r1, [r4, #0]
 80089ae:	2203      	movs	r2, #3
 80089b0:	4650      	mov	r0, sl
 80089b2:	f7f7 fc15 	bl	80001e0 <memchr>
 80089b6:	b138      	cbz	r0, 80089c8 <_svfiprintf_r+0x150>
 80089b8:	9b04      	ldr	r3, [sp, #16]
 80089ba:	eba0 000a 	sub.w	r0, r0, sl
 80089be:	2240      	movs	r2, #64	; 0x40
 80089c0:	4082      	lsls	r2, r0
 80089c2:	4313      	orrs	r3, r2
 80089c4:	3401      	adds	r4, #1
 80089c6:	9304      	str	r3, [sp, #16]
 80089c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089cc:	4825      	ldr	r0, [pc, #148]	; (8008a64 <_svfiprintf_r+0x1ec>)
 80089ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089d2:	2206      	movs	r2, #6
 80089d4:	f7f7 fc04 	bl	80001e0 <memchr>
 80089d8:	2800      	cmp	r0, #0
 80089da:	d038      	beq.n	8008a4e <_svfiprintf_r+0x1d6>
 80089dc:	4b22      	ldr	r3, [pc, #136]	; (8008a68 <_svfiprintf_r+0x1f0>)
 80089de:	bb1b      	cbnz	r3, 8008a28 <_svfiprintf_r+0x1b0>
 80089e0:	9b03      	ldr	r3, [sp, #12]
 80089e2:	3307      	adds	r3, #7
 80089e4:	f023 0307 	bic.w	r3, r3, #7
 80089e8:	3308      	adds	r3, #8
 80089ea:	9303      	str	r3, [sp, #12]
 80089ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ee:	4433      	add	r3, r6
 80089f0:	9309      	str	r3, [sp, #36]	; 0x24
 80089f2:	e768      	b.n	80088c6 <_svfiprintf_r+0x4e>
 80089f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80089f8:	460c      	mov	r4, r1
 80089fa:	2001      	movs	r0, #1
 80089fc:	e7a6      	b.n	800894c <_svfiprintf_r+0xd4>
 80089fe:	2300      	movs	r3, #0
 8008a00:	3401      	adds	r4, #1
 8008a02:	9305      	str	r3, [sp, #20]
 8008a04:	4619      	mov	r1, r3
 8008a06:	f04f 0c0a 	mov.w	ip, #10
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a10:	3a30      	subs	r2, #48	; 0x30
 8008a12:	2a09      	cmp	r2, #9
 8008a14:	d903      	bls.n	8008a1e <_svfiprintf_r+0x1a6>
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d0c6      	beq.n	80089a8 <_svfiprintf_r+0x130>
 8008a1a:	9105      	str	r1, [sp, #20]
 8008a1c:	e7c4      	b.n	80089a8 <_svfiprintf_r+0x130>
 8008a1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a22:	4604      	mov	r4, r0
 8008a24:	2301      	movs	r3, #1
 8008a26:	e7f0      	b.n	8008a0a <_svfiprintf_r+0x192>
 8008a28:	ab03      	add	r3, sp, #12
 8008a2a:	9300      	str	r3, [sp, #0]
 8008a2c:	462a      	mov	r2, r5
 8008a2e:	4b0f      	ldr	r3, [pc, #60]	; (8008a6c <_svfiprintf_r+0x1f4>)
 8008a30:	a904      	add	r1, sp, #16
 8008a32:	4638      	mov	r0, r7
 8008a34:	f3af 8000 	nop.w
 8008a38:	1c42      	adds	r2, r0, #1
 8008a3a:	4606      	mov	r6, r0
 8008a3c:	d1d6      	bne.n	80089ec <_svfiprintf_r+0x174>
 8008a3e:	89ab      	ldrh	r3, [r5, #12]
 8008a40:	065b      	lsls	r3, r3, #25
 8008a42:	f53f af2d 	bmi.w	80088a0 <_svfiprintf_r+0x28>
 8008a46:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a48:	b01d      	add	sp, #116	; 0x74
 8008a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a4e:	ab03      	add	r3, sp, #12
 8008a50:	9300      	str	r3, [sp, #0]
 8008a52:	462a      	mov	r2, r5
 8008a54:	4b05      	ldr	r3, [pc, #20]	; (8008a6c <_svfiprintf_r+0x1f4>)
 8008a56:	a904      	add	r1, sp, #16
 8008a58:	4638      	mov	r0, r7
 8008a5a:	f000 f9bd 	bl	8008dd8 <_printf_i>
 8008a5e:	e7eb      	b.n	8008a38 <_svfiprintf_r+0x1c0>
 8008a60:	08009518 	.word	0x08009518
 8008a64:	08009522 	.word	0x08009522
 8008a68:	00000000 	.word	0x00000000
 8008a6c:	080087c5 	.word	0x080087c5
 8008a70:	0800951e 	.word	0x0800951e

08008a74 <__sfputc_r>:
 8008a74:	6893      	ldr	r3, [r2, #8]
 8008a76:	3b01      	subs	r3, #1
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	b410      	push	{r4}
 8008a7c:	6093      	str	r3, [r2, #8]
 8008a7e:	da08      	bge.n	8008a92 <__sfputc_r+0x1e>
 8008a80:	6994      	ldr	r4, [r2, #24]
 8008a82:	42a3      	cmp	r3, r4
 8008a84:	db01      	blt.n	8008a8a <__sfputc_r+0x16>
 8008a86:	290a      	cmp	r1, #10
 8008a88:	d103      	bne.n	8008a92 <__sfputc_r+0x1e>
 8008a8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a8e:	f7ff bc7e 	b.w	800838e <__swbuf_r>
 8008a92:	6813      	ldr	r3, [r2, #0]
 8008a94:	1c58      	adds	r0, r3, #1
 8008a96:	6010      	str	r0, [r2, #0]
 8008a98:	7019      	strb	r1, [r3, #0]
 8008a9a:	4608      	mov	r0, r1
 8008a9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008aa0:	4770      	bx	lr

08008aa2 <__sfputs_r>:
 8008aa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aa4:	4606      	mov	r6, r0
 8008aa6:	460f      	mov	r7, r1
 8008aa8:	4614      	mov	r4, r2
 8008aaa:	18d5      	adds	r5, r2, r3
 8008aac:	42ac      	cmp	r4, r5
 8008aae:	d101      	bne.n	8008ab4 <__sfputs_r+0x12>
 8008ab0:	2000      	movs	r0, #0
 8008ab2:	e007      	b.n	8008ac4 <__sfputs_r+0x22>
 8008ab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ab8:	463a      	mov	r2, r7
 8008aba:	4630      	mov	r0, r6
 8008abc:	f7ff ffda 	bl	8008a74 <__sfputc_r>
 8008ac0:	1c43      	adds	r3, r0, #1
 8008ac2:	d1f3      	bne.n	8008aac <__sfputs_r+0xa>
 8008ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ac8 <_vfiprintf_r>:
 8008ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008acc:	460d      	mov	r5, r1
 8008ace:	b09d      	sub	sp, #116	; 0x74
 8008ad0:	4614      	mov	r4, r2
 8008ad2:	4698      	mov	r8, r3
 8008ad4:	4606      	mov	r6, r0
 8008ad6:	b118      	cbz	r0, 8008ae0 <_vfiprintf_r+0x18>
 8008ad8:	6a03      	ldr	r3, [r0, #32]
 8008ada:	b90b      	cbnz	r3, 8008ae0 <_vfiprintf_r+0x18>
 8008adc:	f7ff fb48 	bl	8008170 <__sinit>
 8008ae0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ae2:	07d9      	lsls	r1, r3, #31
 8008ae4:	d405      	bmi.n	8008af2 <_vfiprintf_r+0x2a>
 8008ae6:	89ab      	ldrh	r3, [r5, #12]
 8008ae8:	059a      	lsls	r2, r3, #22
 8008aea:	d402      	bmi.n	8008af2 <_vfiprintf_r+0x2a>
 8008aec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008aee:	f7ff fd6e 	bl	80085ce <__retarget_lock_acquire_recursive>
 8008af2:	89ab      	ldrh	r3, [r5, #12]
 8008af4:	071b      	lsls	r3, r3, #28
 8008af6:	d501      	bpl.n	8008afc <_vfiprintf_r+0x34>
 8008af8:	692b      	ldr	r3, [r5, #16]
 8008afa:	b99b      	cbnz	r3, 8008b24 <_vfiprintf_r+0x5c>
 8008afc:	4629      	mov	r1, r5
 8008afe:	4630      	mov	r0, r6
 8008b00:	f7ff fc82 	bl	8008408 <__swsetup_r>
 8008b04:	b170      	cbz	r0, 8008b24 <_vfiprintf_r+0x5c>
 8008b06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b08:	07dc      	lsls	r4, r3, #31
 8008b0a:	d504      	bpl.n	8008b16 <_vfiprintf_r+0x4e>
 8008b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b10:	b01d      	add	sp, #116	; 0x74
 8008b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b16:	89ab      	ldrh	r3, [r5, #12]
 8008b18:	0598      	lsls	r0, r3, #22
 8008b1a:	d4f7      	bmi.n	8008b0c <_vfiprintf_r+0x44>
 8008b1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b1e:	f7ff fd57 	bl	80085d0 <__retarget_lock_release_recursive>
 8008b22:	e7f3      	b.n	8008b0c <_vfiprintf_r+0x44>
 8008b24:	2300      	movs	r3, #0
 8008b26:	9309      	str	r3, [sp, #36]	; 0x24
 8008b28:	2320      	movs	r3, #32
 8008b2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b32:	2330      	movs	r3, #48	; 0x30
 8008b34:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008ce8 <_vfiprintf_r+0x220>
 8008b38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b3c:	f04f 0901 	mov.w	r9, #1
 8008b40:	4623      	mov	r3, r4
 8008b42:	469a      	mov	sl, r3
 8008b44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b48:	b10a      	cbz	r2, 8008b4e <_vfiprintf_r+0x86>
 8008b4a:	2a25      	cmp	r2, #37	; 0x25
 8008b4c:	d1f9      	bne.n	8008b42 <_vfiprintf_r+0x7a>
 8008b4e:	ebba 0b04 	subs.w	fp, sl, r4
 8008b52:	d00b      	beq.n	8008b6c <_vfiprintf_r+0xa4>
 8008b54:	465b      	mov	r3, fp
 8008b56:	4622      	mov	r2, r4
 8008b58:	4629      	mov	r1, r5
 8008b5a:	4630      	mov	r0, r6
 8008b5c:	f7ff ffa1 	bl	8008aa2 <__sfputs_r>
 8008b60:	3001      	adds	r0, #1
 8008b62:	f000 80a9 	beq.w	8008cb8 <_vfiprintf_r+0x1f0>
 8008b66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b68:	445a      	add	r2, fp
 8008b6a:	9209      	str	r2, [sp, #36]	; 0x24
 8008b6c:	f89a 3000 	ldrb.w	r3, [sl]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f000 80a1 	beq.w	8008cb8 <_vfiprintf_r+0x1f0>
 8008b76:	2300      	movs	r3, #0
 8008b78:	f04f 32ff 	mov.w	r2, #4294967295
 8008b7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b80:	f10a 0a01 	add.w	sl, sl, #1
 8008b84:	9304      	str	r3, [sp, #16]
 8008b86:	9307      	str	r3, [sp, #28]
 8008b88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b8c:	931a      	str	r3, [sp, #104]	; 0x68
 8008b8e:	4654      	mov	r4, sl
 8008b90:	2205      	movs	r2, #5
 8008b92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b96:	4854      	ldr	r0, [pc, #336]	; (8008ce8 <_vfiprintf_r+0x220>)
 8008b98:	f7f7 fb22 	bl	80001e0 <memchr>
 8008b9c:	9a04      	ldr	r2, [sp, #16]
 8008b9e:	b9d8      	cbnz	r0, 8008bd8 <_vfiprintf_r+0x110>
 8008ba0:	06d1      	lsls	r1, r2, #27
 8008ba2:	bf44      	itt	mi
 8008ba4:	2320      	movmi	r3, #32
 8008ba6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008baa:	0713      	lsls	r3, r2, #28
 8008bac:	bf44      	itt	mi
 8008bae:	232b      	movmi	r3, #43	; 0x2b
 8008bb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bb4:	f89a 3000 	ldrb.w	r3, [sl]
 8008bb8:	2b2a      	cmp	r3, #42	; 0x2a
 8008bba:	d015      	beq.n	8008be8 <_vfiprintf_r+0x120>
 8008bbc:	9a07      	ldr	r2, [sp, #28]
 8008bbe:	4654      	mov	r4, sl
 8008bc0:	2000      	movs	r0, #0
 8008bc2:	f04f 0c0a 	mov.w	ip, #10
 8008bc6:	4621      	mov	r1, r4
 8008bc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bcc:	3b30      	subs	r3, #48	; 0x30
 8008bce:	2b09      	cmp	r3, #9
 8008bd0:	d94d      	bls.n	8008c6e <_vfiprintf_r+0x1a6>
 8008bd2:	b1b0      	cbz	r0, 8008c02 <_vfiprintf_r+0x13a>
 8008bd4:	9207      	str	r2, [sp, #28]
 8008bd6:	e014      	b.n	8008c02 <_vfiprintf_r+0x13a>
 8008bd8:	eba0 0308 	sub.w	r3, r0, r8
 8008bdc:	fa09 f303 	lsl.w	r3, r9, r3
 8008be0:	4313      	orrs	r3, r2
 8008be2:	9304      	str	r3, [sp, #16]
 8008be4:	46a2      	mov	sl, r4
 8008be6:	e7d2      	b.n	8008b8e <_vfiprintf_r+0xc6>
 8008be8:	9b03      	ldr	r3, [sp, #12]
 8008bea:	1d19      	adds	r1, r3, #4
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	9103      	str	r1, [sp, #12]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	bfbb      	ittet	lt
 8008bf4:	425b      	neglt	r3, r3
 8008bf6:	f042 0202 	orrlt.w	r2, r2, #2
 8008bfa:	9307      	strge	r3, [sp, #28]
 8008bfc:	9307      	strlt	r3, [sp, #28]
 8008bfe:	bfb8      	it	lt
 8008c00:	9204      	strlt	r2, [sp, #16]
 8008c02:	7823      	ldrb	r3, [r4, #0]
 8008c04:	2b2e      	cmp	r3, #46	; 0x2e
 8008c06:	d10c      	bne.n	8008c22 <_vfiprintf_r+0x15a>
 8008c08:	7863      	ldrb	r3, [r4, #1]
 8008c0a:	2b2a      	cmp	r3, #42	; 0x2a
 8008c0c:	d134      	bne.n	8008c78 <_vfiprintf_r+0x1b0>
 8008c0e:	9b03      	ldr	r3, [sp, #12]
 8008c10:	1d1a      	adds	r2, r3, #4
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	9203      	str	r2, [sp, #12]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	bfb8      	it	lt
 8008c1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c1e:	3402      	adds	r4, #2
 8008c20:	9305      	str	r3, [sp, #20]
 8008c22:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008cf8 <_vfiprintf_r+0x230>
 8008c26:	7821      	ldrb	r1, [r4, #0]
 8008c28:	2203      	movs	r2, #3
 8008c2a:	4650      	mov	r0, sl
 8008c2c:	f7f7 fad8 	bl	80001e0 <memchr>
 8008c30:	b138      	cbz	r0, 8008c42 <_vfiprintf_r+0x17a>
 8008c32:	9b04      	ldr	r3, [sp, #16]
 8008c34:	eba0 000a 	sub.w	r0, r0, sl
 8008c38:	2240      	movs	r2, #64	; 0x40
 8008c3a:	4082      	lsls	r2, r0
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	3401      	adds	r4, #1
 8008c40:	9304      	str	r3, [sp, #16]
 8008c42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c46:	4829      	ldr	r0, [pc, #164]	; (8008cec <_vfiprintf_r+0x224>)
 8008c48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c4c:	2206      	movs	r2, #6
 8008c4e:	f7f7 fac7 	bl	80001e0 <memchr>
 8008c52:	2800      	cmp	r0, #0
 8008c54:	d03f      	beq.n	8008cd6 <_vfiprintf_r+0x20e>
 8008c56:	4b26      	ldr	r3, [pc, #152]	; (8008cf0 <_vfiprintf_r+0x228>)
 8008c58:	bb1b      	cbnz	r3, 8008ca2 <_vfiprintf_r+0x1da>
 8008c5a:	9b03      	ldr	r3, [sp, #12]
 8008c5c:	3307      	adds	r3, #7
 8008c5e:	f023 0307 	bic.w	r3, r3, #7
 8008c62:	3308      	adds	r3, #8
 8008c64:	9303      	str	r3, [sp, #12]
 8008c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c68:	443b      	add	r3, r7
 8008c6a:	9309      	str	r3, [sp, #36]	; 0x24
 8008c6c:	e768      	b.n	8008b40 <_vfiprintf_r+0x78>
 8008c6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c72:	460c      	mov	r4, r1
 8008c74:	2001      	movs	r0, #1
 8008c76:	e7a6      	b.n	8008bc6 <_vfiprintf_r+0xfe>
 8008c78:	2300      	movs	r3, #0
 8008c7a:	3401      	adds	r4, #1
 8008c7c:	9305      	str	r3, [sp, #20]
 8008c7e:	4619      	mov	r1, r3
 8008c80:	f04f 0c0a 	mov.w	ip, #10
 8008c84:	4620      	mov	r0, r4
 8008c86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c8a:	3a30      	subs	r2, #48	; 0x30
 8008c8c:	2a09      	cmp	r2, #9
 8008c8e:	d903      	bls.n	8008c98 <_vfiprintf_r+0x1d0>
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d0c6      	beq.n	8008c22 <_vfiprintf_r+0x15a>
 8008c94:	9105      	str	r1, [sp, #20]
 8008c96:	e7c4      	b.n	8008c22 <_vfiprintf_r+0x15a>
 8008c98:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c9c:	4604      	mov	r4, r0
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e7f0      	b.n	8008c84 <_vfiprintf_r+0x1bc>
 8008ca2:	ab03      	add	r3, sp, #12
 8008ca4:	9300      	str	r3, [sp, #0]
 8008ca6:	462a      	mov	r2, r5
 8008ca8:	4b12      	ldr	r3, [pc, #72]	; (8008cf4 <_vfiprintf_r+0x22c>)
 8008caa:	a904      	add	r1, sp, #16
 8008cac:	4630      	mov	r0, r6
 8008cae:	f3af 8000 	nop.w
 8008cb2:	4607      	mov	r7, r0
 8008cb4:	1c78      	adds	r0, r7, #1
 8008cb6:	d1d6      	bne.n	8008c66 <_vfiprintf_r+0x19e>
 8008cb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cba:	07d9      	lsls	r1, r3, #31
 8008cbc:	d405      	bmi.n	8008cca <_vfiprintf_r+0x202>
 8008cbe:	89ab      	ldrh	r3, [r5, #12]
 8008cc0:	059a      	lsls	r2, r3, #22
 8008cc2:	d402      	bmi.n	8008cca <_vfiprintf_r+0x202>
 8008cc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cc6:	f7ff fc83 	bl	80085d0 <__retarget_lock_release_recursive>
 8008cca:	89ab      	ldrh	r3, [r5, #12]
 8008ccc:	065b      	lsls	r3, r3, #25
 8008cce:	f53f af1d 	bmi.w	8008b0c <_vfiprintf_r+0x44>
 8008cd2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cd4:	e71c      	b.n	8008b10 <_vfiprintf_r+0x48>
 8008cd6:	ab03      	add	r3, sp, #12
 8008cd8:	9300      	str	r3, [sp, #0]
 8008cda:	462a      	mov	r2, r5
 8008cdc:	4b05      	ldr	r3, [pc, #20]	; (8008cf4 <_vfiprintf_r+0x22c>)
 8008cde:	a904      	add	r1, sp, #16
 8008ce0:	4630      	mov	r0, r6
 8008ce2:	f000 f879 	bl	8008dd8 <_printf_i>
 8008ce6:	e7e4      	b.n	8008cb2 <_vfiprintf_r+0x1ea>
 8008ce8:	08009518 	.word	0x08009518
 8008cec:	08009522 	.word	0x08009522
 8008cf0:	00000000 	.word	0x00000000
 8008cf4:	08008aa3 	.word	0x08008aa3
 8008cf8:	0800951e 	.word	0x0800951e

08008cfc <_printf_common>:
 8008cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d00:	4616      	mov	r6, r2
 8008d02:	4699      	mov	r9, r3
 8008d04:	688a      	ldr	r2, [r1, #8]
 8008d06:	690b      	ldr	r3, [r1, #16]
 8008d08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	bfb8      	it	lt
 8008d10:	4613      	movlt	r3, r2
 8008d12:	6033      	str	r3, [r6, #0]
 8008d14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d18:	4607      	mov	r7, r0
 8008d1a:	460c      	mov	r4, r1
 8008d1c:	b10a      	cbz	r2, 8008d22 <_printf_common+0x26>
 8008d1e:	3301      	adds	r3, #1
 8008d20:	6033      	str	r3, [r6, #0]
 8008d22:	6823      	ldr	r3, [r4, #0]
 8008d24:	0699      	lsls	r1, r3, #26
 8008d26:	bf42      	ittt	mi
 8008d28:	6833      	ldrmi	r3, [r6, #0]
 8008d2a:	3302      	addmi	r3, #2
 8008d2c:	6033      	strmi	r3, [r6, #0]
 8008d2e:	6825      	ldr	r5, [r4, #0]
 8008d30:	f015 0506 	ands.w	r5, r5, #6
 8008d34:	d106      	bne.n	8008d44 <_printf_common+0x48>
 8008d36:	f104 0a19 	add.w	sl, r4, #25
 8008d3a:	68e3      	ldr	r3, [r4, #12]
 8008d3c:	6832      	ldr	r2, [r6, #0]
 8008d3e:	1a9b      	subs	r3, r3, r2
 8008d40:	42ab      	cmp	r3, r5
 8008d42:	dc26      	bgt.n	8008d92 <_printf_common+0x96>
 8008d44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d48:	1e13      	subs	r3, r2, #0
 8008d4a:	6822      	ldr	r2, [r4, #0]
 8008d4c:	bf18      	it	ne
 8008d4e:	2301      	movne	r3, #1
 8008d50:	0692      	lsls	r2, r2, #26
 8008d52:	d42b      	bmi.n	8008dac <_printf_common+0xb0>
 8008d54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d58:	4649      	mov	r1, r9
 8008d5a:	4638      	mov	r0, r7
 8008d5c:	47c0      	blx	r8
 8008d5e:	3001      	adds	r0, #1
 8008d60:	d01e      	beq.n	8008da0 <_printf_common+0xa4>
 8008d62:	6823      	ldr	r3, [r4, #0]
 8008d64:	6922      	ldr	r2, [r4, #16]
 8008d66:	f003 0306 	and.w	r3, r3, #6
 8008d6a:	2b04      	cmp	r3, #4
 8008d6c:	bf02      	ittt	eq
 8008d6e:	68e5      	ldreq	r5, [r4, #12]
 8008d70:	6833      	ldreq	r3, [r6, #0]
 8008d72:	1aed      	subeq	r5, r5, r3
 8008d74:	68a3      	ldr	r3, [r4, #8]
 8008d76:	bf0c      	ite	eq
 8008d78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d7c:	2500      	movne	r5, #0
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	bfc4      	itt	gt
 8008d82:	1a9b      	subgt	r3, r3, r2
 8008d84:	18ed      	addgt	r5, r5, r3
 8008d86:	2600      	movs	r6, #0
 8008d88:	341a      	adds	r4, #26
 8008d8a:	42b5      	cmp	r5, r6
 8008d8c:	d11a      	bne.n	8008dc4 <_printf_common+0xc8>
 8008d8e:	2000      	movs	r0, #0
 8008d90:	e008      	b.n	8008da4 <_printf_common+0xa8>
 8008d92:	2301      	movs	r3, #1
 8008d94:	4652      	mov	r2, sl
 8008d96:	4649      	mov	r1, r9
 8008d98:	4638      	mov	r0, r7
 8008d9a:	47c0      	blx	r8
 8008d9c:	3001      	adds	r0, #1
 8008d9e:	d103      	bne.n	8008da8 <_printf_common+0xac>
 8008da0:	f04f 30ff 	mov.w	r0, #4294967295
 8008da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008da8:	3501      	adds	r5, #1
 8008daa:	e7c6      	b.n	8008d3a <_printf_common+0x3e>
 8008dac:	18e1      	adds	r1, r4, r3
 8008dae:	1c5a      	adds	r2, r3, #1
 8008db0:	2030      	movs	r0, #48	; 0x30
 8008db2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008db6:	4422      	add	r2, r4
 8008db8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008dbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008dc0:	3302      	adds	r3, #2
 8008dc2:	e7c7      	b.n	8008d54 <_printf_common+0x58>
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	4622      	mov	r2, r4
 8008dc8:	4649      	mov	r1, r9
 8008dca:	4638      	mov	r0, r7
 8008dcc:	47c0      	blx	r8
 8008dce:	3001      	adds	r0, #1
 8008dd0:	d0e6      	beq.n	8008da0 <_printf_common+0xa4>
 8008dd2:	3601      	adds	r6, #1
 8008dd4:	e7d9      	b.n	8008d8a <_printf_common+0x8e>
	...

08008dd8 <_printf_i>:
 8008dd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ddc:	7e0f      	ldrb	r7, [r1, #24]
 8008dde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008de0:	2f78      	cmp	r7, #120	; 0x78
 8008de2:	4691      	mov	r9, r2
 8008de4:	4680      	mov	r8, r0
 8008de6:	460c      	mov	r4, r1
 8008de8:	469a      	mov	sl, r3
 8008dea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008dee:	d807      	bhi.n	8008e00 <_printf_i+0x28>
 8008df0:	2f62      	cmp	r7, #98	; 0x62
 8008df2:	d80a      	bhi.n	8008e0a <_printf_i+0x32>
 8008df4:	2f00      	cmp	r7, #0
 8008df6:	f000 80d4 	beq.w	8008fa2 <_printf_i+0x1ca>
 8008dfa:	2f58      	cmp	r7, #88	; 0x58
 8008dfc:	f000 80c0 	beq.w	8008f80 <_printf_i+0x1a8>
 8008e00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008e08:	e03a      	b.n	8008e80 <_printf_i+0xa8>
 8008e0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e0e:	2b15      	cmp	r3, #21
 8008e10:	d8f6      	bhi.n	8008e00 <_printf_i+0x28>
 8008e12:	a101      	add	r1, pc, #4	; (adr r1, 8008e18 <_printf_i+0x40>)
 8008e14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e18:	08008e71 	.word	0x08008e71
 8008e1c:	08008e85 	.word	0x08008e85
 8008e20:	08008e01 	.word	0x08008e01
 8008e24:	08008e01 	.word	0x08008e01
 8008e28:	08008e01 	.word	0x08008e01
 8008e2c:	08008e01 	.word	0x08008e01
 8008e30:	08008e85 	.word	0x08008e85
 8008e34:	08008e01 	.word	0x08008e01
 8008e38:	08008e01 	.word	0x08008e01
 8008e3c:	08008e01 	.word	0x08008e01
 8008e40:	08008e01 	.word	0x08008e01
 8008e44:	08008f89 	.word	0x08008f89
 8008e48:	08008eb1 	.word	0x08008eb1
 8008e4c:	08008f43 	.word	0x08008f43
 8008e50:	08008e01 	.word	0x08008e01
 8008e54:	08008e01 	.word	0x08008e01
 8008e58:	08008fab 	.word	0x08008fab
 8008e5c:	08008e01 	.word	0x08008e01
 8008e60:	08008eb1 	.word	0x08008eb1
 8008e64:	08008e01 	.word	0x08008e01
 8008e68:	08008e01 	.word	0x08008e01
 8008e6c:	08008f4b 	.word	0x08008f4b
 8008e70:	682b      	ldr	r3, [r5, #0]
 8008e72:	1d1a      	adds	r2, r3, #4
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	602a      	str	r2, [r5, #0]
 8008e78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e80:	2301      	movs	r3, #1
 8008e82:	e09f      	b.n	8008fc4 <_printf_i+0x1ec>
 8008e84:	6820      	ldr	r0, [r4, #0]
 8008e86:	682b      	ldr	r3, [r5, #0]
 8008e88:	0607      	lsls	r7, r0, #24
 8008e8a:	f103 0104 	add.w	r1, r3, #4
 8008e8e:	6029      	str	r1, [r5, #0]
 8008e90:	d501      	bpl.n	8008e96 <_printf_i+0xbe>
 8008e92:	681e      	ldr	r6, [r3, #0]
 8008e94:	e003      	b.n	8008e9e <_printf_i+0xc6>
 8008e96:	0646      	lsls	r6, r0, #25
 8008e98:	d5fb      	bpl.n	8008e92 <_printf_i+0xba>
 8008e9a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008e9e:	2e00      	cmp	r6, #0
 8008ea0:	da03      	bge.n	8008eaa <_printf_i+0xd2>
 8008ea2:	232d      	movs	r3, #45	; 0x2d
 8008ea4:	4276      	negs	r6, r6
 8008ea6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008eaa:	485a      	ldr	r0, [pc, #360]	; (8009014 <_printf_i+0x23c>)
 8008eac:	230a      	movs	r3, #10
 8008eae:	e012      	b.n	8008ed6 <_printf_i+0xfe>
 8008eb0:	682b      	ldr	r3, [r5, #0]
 8008eb2:	6820      	ldr	r0, [r4, #0]
 8008eb4:	1d19      	adds	r1, r3, #4
 8008eb6:	6029      	str	r1, [r5, #0]
 8008eb8:	0605      	lsls	r5, r0, #24
 8008eba:	d501      	bpl.n	8008ec0 <_printf_i+0xe8>
 8008ebc:	681e      	ldr	r6, [r3, #0]
 8008ebe:	e002      	b.n	8008ec6 <_printf_i+0xee>
 8008ec0:	0641      	lsls	r1, r0, #25
 8008ec2:	d5fb      	bpl.n	8008ebc <_printf_i+0xe4>
 8008ec4:	881e      	ldrh	r6, [r3, #0]
 8008ec6:	4853      	ldr	r0, [pc, #332]	; (8009014 <_printf_i+0x23c>)
 8008ec8:	2f6f      	cmp	r7, #111	; 0x6f
 8008eca:	bf0c      	ite	eq
 8008ecc:	2308      	moveq	r3, #8
 8008ece:	230a      	movne	r3, #10
 8008ed0:	2100      	movs	r1, #0
 8008ed2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ed6:	6865      	ldr	r5, [r4, #4]
 8008ed8:	60a5      	str	r5, [r4, #8]
 8008eda:	2d00      	cmp	r5, #0
 8008edc:	bfa2      	ittt	ge
 8008ede:	6821      	ldrge	r1, [r4, #0]
 8008ee0:	f021 0104 	bicge.w	r1, r1, #4
 8008ee4:	6021      	strge	r1, [r4, #0]
 8008ee6:	b90e      	cbnz	r6, 8008eec <_printf_i+0x114>
 8008ee8:	2d00      	cmp	r5, #0
 8008eea:	d04b      	beq.n	8008f84 <_printf_i+0x1ac>
 8008eec:	4615      	mov	r5, r2
 8008eee:	fbb6 f1f3 	udiv	r1, r6, r3
 8008ef2:	fb03 6711 	mls	r7, r3, r1, r6
 8008ef6:	5dc7      	ldrb	r7, [r0, r7]
 8008ef8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008efc:	4637      	mov	r7, r6
 8008efe:	42bb      	cmp	r3, r7
 8008f00:	460e      	mov	r6, r1
 8008f02:	d9f4      	bls.n	8008eee <_printf_i+0x116>
 8008f04:	2b08      	cmp	r3, #8
 8008f06:	d10b      	bne.n	8008f20 <_printf_i+0x148>
 8008f08:	6823      	ldr	r3, [r4, #0]
 8008f0a:	07de      	lsls	r6, r3, #31
 8008f0c:	d508      	bpl.n	8008f20 <_printf_i+0x148>
 8008f0e:	6923      	ldr	r3, [r4, #16]
 8008f10:	6861      	ldr	r1, [r4, #4]
 8008f12:	4299      	cmp	r1, r3
 8008f14:	bfde      	ittt	le
 8008f16:	2330      	movle	r3, #48	; 0x30
 8008f18:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f20:	1b52      	subs	r2, r2, r5
 8008f22:	6122      	str	r2, [r4, #16]
 8008f24:	f8cd a000 	str.w	sl, [sp]
 8008f28:	464b      	mov	r3, r9
 8008f2a:	aa03      	add	r2, sp, #12
 8008f2c:	4621      	mov	r1, r4
 8008f2e:	4640      	mov	r0, r8
 8008f30:	f7ff fee4 	bl	8008cfc <_printf_common>
 8008f34:	3001      	adds	r0, #1
 8008f36:	d14a      	bne.n	8008fce <_printf_i+0x1f6>
 8008f38:	f04f 30ff 	mov.w	r0, #4294967295
 8008f3c:	b004      	add	sp, #16
 8008f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f42:	6823      	ldr	r3, [r4, #0]
 8008f44:	f043 0320 	orr.w	r3, r3, #32
 8008f48:	6023      	str	r3, [r4, #0]
 8008f4a:	4833      	ldr	r0, [pc, #204]	; (8009018 <_printf_i+0x240>)
 8008f4c:	2778      	movs	r7, #120	; 0x78
 8008f4e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008f52:	6823      	ldr	r3, [r4, #0]
 8008f54:	6829      	ldr	r1, [r5, #0]
 8008f56:	061f      	lsls	r7, r3, #24
 8008f58:	f851 6b04 	ldr.w	r6, [r1], #4
 8008f5c:	d402      	bmi.n	8008f64 <_printf_i+0x18c>
 8008f5e:	065f      	lsls	r7, r3, #25
 8008f60:	bf48      	it	mi
 8008f62:	b2b6      	uxthmi	r6, r6
 8008f64:	07df      	lsls	r7, r3, #31
 8008f66:	bf48      	it	mi
 8008f68:	f043 0320 	orrmi.w	r3, r3, #32
 8008f6c:	6029      	str	r1, [r5, #0]
 8008f6e:	bf48      	it	mi
 8008f70:	6023      	strmi	r3, [r4, #0]
 8008f72:	b91e      	cbnz	r6, 8008f7c <_printf_i+0x1a4>
 8008f74:	6823      	ldr	r3, [r4, #0]
 8008f76:	f023 0320 	bic.w	r3, r3, #32
 8008f7a:	6023      	str	r3, [r4, #0]
 8008f7c:	2310      	movs	r3, #16
 8008f7e:	e7a7      	b.n	8008ed0 <_printf_i+0xf8>
 8008f80:	4824      	ldr	r0, [pc, #144]	; (8009014 <_printf_i+0x23c>)
 8008f82:	e7e4      	b.n	8008f4e <_printf_i+0x176>
 8008f84:	4615      	mov	r5, r2
 8008f86:	e7bd      	b.n	8008f04 <_printf_i+0x12c>
 8008f88:	682b      	ldr	r3, [r5, #0]
 8008f8a:	6826      	ldr	r6, [r4, #0]
 8008f8c:	6961      	ldr	r1, [r4, #20]
 8008f8e:	1d18      	adds	r0, r3, #4
 8008f90:	6028      	str	r0, [r5, #0]
 8008f92:	0635      	lsls	r5, r6, #24
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	d501      	bpl.n	8008f9c <_printf_i+0x1c4>
 8008f98:	6019      	str	r1, [r3, #0]
 8008f9a:	e002      	b.n	8008fa2 <_printf_i+0x1ca>
 8008f9c:	0670      	lsls	r0, r6, #25
 8008f9e:	d5fb      	bpl.n	8008f98 <_printf_i+0x1c0>
 8008fa0:	8019      	strh	r1, [r3, #0]
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	6123      	str	r3, [r4, #16]
 8008fa6:	4615      	mov	r5, r2
 8008fa8:	e7bc      	b.n	8008f24 <_printf_i+0x14c>
 8008faa:	682b      	ldr	r3, [r5, #0]
 8008fac:	1d1a      	adds	r2, r3, #4
 8008fae:	602a      	str	r2, [r5, #0]
 8008fb0:	681d      	ldr	r5, [r3, #0]
 8008fb2:	6862      	ldr	r2, [r4, #4]
 8008fb4:	2100      	movs	r1, #0
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	f7f7 f912 	bl	80001e0 <memchr>
 8008fbc:	b108      	cbz	r0, 8008fc2 <_printf_i+0x1ea>
 8008fbe:	1b40      	subs	r0, r0, r5
 8008fc0:	6060      	str	r0, [r4, #4]
 8008fc2:	6863      	ldr	r3, [r4, #4]
 8008fc4:	6123      	str	r3, [r4, #16]
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fcc:	e7aa      	b.n	8008f24 <_printf_i+0x14c>
 8008fce:	6923      	ldr	r3, [r4, #16]
 8008fd0:	462a      	mov	r2, r5
 8008fd2:	4649      	mov	r1, r9
 8008fd4:	4640      	mov	r0, r8
 8008fd6:	47d0      	blx	sl
 8008fd8:	3001      	adds	r0, #1
 8008fda:	d0ad      	beq.n	8008f38 <_printf_i+0x160>
 8008fdc:	6823      	ldr	r3, [r4, #0]
 8008fde:	079b      	lsls	r3, r3, #30
 8008fe0:	d413      	bmi.n	800900a <_printf_i+0x232>
 8008fe2:	68e0      	ldr	r0, [r4, #12]
 8008fe4:	9b03      	ldr	r3, [sp, #12]
 8008fe6:	4298      	cmp	r0, r3
 8008fe8:	bfb8      	it	lt
 8008fea:	4618      	movlt	r0, r3
 8008fec:	e7a6      	b.n	8008f3c <_printf_i+0x164>
 8008fee:	2301      	movs	r3, #1
 8008ff0:	4632      	mov	r2, r6
 8008ff2:	4649      	mov	r1, r9
 8008ff4:	4640      	mov	r0, r8
 8008ff6:	47d0      	blx	sl
 8008ff8:	3001      	adds	r0, #1
 8008ffa:	d09d      	beq.n	8008f38 <_printf_i+0x160>
 8008ffc:	3501      	adds	r5, #1
 8008ffe:	68e3      	ldr	r3, [r4, #12]
 8009000:	9903      	ldr	r1, [sp, #12]
 8009002:	1a5b      	subs	r3, r3, r1
 8009004:	42ab      	cmp	r3, r5
 8009006:	dcf2      	bgt.n	8008fee <_printf_i+0x216>
 8009008:	e7eb      	b.n	8008fe2 <_printf_i+0x20a>
 800900a:	2500      	movs	r5, #0
 800900c:	f104 0619 	add.w	r6, r4, #25
 8009010:	e7f5      	b.n	8008ffe <_printf_i+0x226>
 8009012:	bf00      	nop
 8009014:	08009529 	.word	0x08009529
 8009018:	0800953a 	.word	0x0800953a

0800901c <__sflush_r>:
 800901c:	898a      	ldrh	r2, [r1, #12]
 800901e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009022:	4605      	mov	r5, r0
 8009024:	0710      	lsls	r0, r2, #28
 8009026:	460c      	mov	r4, r1
 8009028:	d458      	bmi.n	80090dc <__sflush_r+0xc0>
 800902a:	684b      	ldr	r3, [r1, #4]
 800902c:	2b00      	cmp	r3, #0
 800902e:	dc05      	bgt.n	800903c <__sflush_r+0x20>
 8009030:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009032:	2b00      	cmp	r3, #0
 8009034:	dc02      	bgt.n	800903c <__sflush_r+0x20>
 8009036:	2000      	movs	r0, #0
 8009038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800903c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800903e:	2e00      	cmp	r6, #0
 8009040:	d0f9      	beq.n	8009036 <__sflush_r+0x1a>
 8009042:	2300      	movs	r3, #0
 8009044:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009048:	682f      	ldr	r7, [r5, #0]
 800904a:	6a21      	ldr	r1, [r4, #32]
 800904c:	602b      	str	r3, [r5, #0]
 800904e:	d032      	beq.n	80090b6 <__sflush_r+0x9a>
 8009050:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009052:	89a3      	ldrh	r3, [r4, #12]
 8009054:	075a      	lsls	r2, r3, #29
 8009056:	d505      	bpl.n	8009064 <__sflush_r+0x48>
 8009058:	6863      	ldr	r3, [r4, #4]
 800905a:	1ac0      	subs	r0, r0, r3
 800905c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800905e:	b10b      	cbz	r3, 8009064 <__sflush_r+0x48>
 8009060:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009062:	1ac0      	subs	r0, r0, r3
 8009064:	2300      	movs	r3, #0
 8009066:	4602      	mov	r2, r0
 8009068:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800906a:	6a21      	ldr	r1, [r4, #32]
 800906c:	4628      	mov	r0, r5
 800906e:	47b0      	blx	r6
 8009070:	1c43      	adds	r3, r0, #1
 8009072:	89a3      	ldrh	r3, [r4, #12]
 8009074:	d106      	bne.n	8009084 <__sflush_r+0x68>
 8009076:	6829      	ldr	r1, [r5, #0]
 8009078:	291d      	cmp	r1, #29
 800907a:	d82b      	bhi.n	80090d4 <__sflush_r+0xb8>
 800907c:	4a29      	ldr	r2, [pc, #164]	; (8009124 <__sflush_r+0x108>)
 800907e:	410a      	asrs	r2, r1
 8009080:	07d6      	lsls	r6, r2, #31
 8009082:	d427      	bmi.n	80090d4 <__sflush_r+0xb8>
 8009084:	2200      	movs	r2, #0
 8009086:	6062      	str	r2, [r4, #4]
 8009088:	04d9      	lsls	r1, r3, #19
 800908a:	6922      	ldr	r2, [r4, #16]
 800908c:	6022      	str	r2, [r4, #0]
 800908e:	d504      	bpl.n	800909a <__sflush_r+0x7e>
 8009090:	1c42      	adds	r2, r0, #1
 8009092:	d101      	bne.n	8009098 <__sflush_r+0x7c>
 8009094:	682b      	ldr	r3, [r5, #0]
 8009096:	b903      	cbnz	r3, 800909a <__sflush_r+0x7e>
 8009098:	6560      	str	r0, [r4, #84]	; 0x54
 800909a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800909c:	602f      	str	r7, [r5, #0]
 800909e:	2900      	cmp	r1, #0
 80090a0:	d0c9      	beq.n	8009036 <__sflush_r+0x1a>
 80090a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090a6:	4299      	cmp	r1, r3
 80090a8:	d002      	beq.n	80090b0 <__sflush_r+0x94>
 80090aa:	4628      	mov	r0, r5
 80090ac:	f7ff fa92 	bl	80085d4 <_free_r>
 80090b0:	2000      	movs	r0, #0
 80090b2:	6360      	str	r0, [r4, #52]	; 0x34
 80090b4:	e7c0      	b.n	8009038 <__sflush_r+0x1c>
 80090b6:	2301      	movs	r3, #1
 80090b8:	4628      	mov	r0, r5
 80090ba:	47b0      	blx	r6
 80090bc:	1c41      	adds	r1, r0, #1
 80090be:	d1c8      	bne.n	8009052 <__sflush_r+0x36>
 80090c0:	682b      	ldr	r3, [r5, #0]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d0c5      	beq.n	8009052 <__sflush_r+0x36>
 80090c6:	2b1d      	cmp	r3, #29
 80090c8:	d001      	beq.n	80090ce <__sflush_r+0xb2>
 80090ca:	2b16      	cmp	r3, #22
 80090cc:	d101      	bne.n	80090d2 <__sflush_r+0xb6>
 80090ce:	602f      	str	r7, [r5, #0]
 80090d0:	e7b1      	b.n	8009036 <__sflush_r+0x1a>
 80090d2:	89a3      	ldrh	r3, [r4, #12]
 80090d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090d8:	81a3      	strh	r3, [r4, #12]
 80090da:	e7ad      	b.n	8009038 <__sflush_r+0x1c>
 80090dc:	690f      	ldr	r7, [r1, #16]
 80090de:	2f00      	cmp	r7, #0
 80090e0:	d0a9      	beq.n	8009036 <__sflush_r+0x1a>
 80090e2:	0793      	lsls	r3, r2, #30
 80090e4:	680e      	ldr	r6, [r1, #0]
 80090e6:	bf08      	it	eq
 80090e8:	694b      	ldreq	r3, [r1, #20]
 80090ea:	600f      	str	r7, [r1, #0]
 80090ec:	bf18      	it	ne
 80090ee:	2300      	movne	r3, #0
 80090f0:	eba6 0807 	sub.w	r8, r6, r7
 80090f4:	608b      	str	r3, [r1, #8]
 80090f6:	f1b8 0f00 	cmp.w	r8, #0
 80090fa:	dd9c      	ble.n	8009036 <__sflush_r+0x1a>
 80090fc:	6a21      	ldr	r1, [r4, #32]
 80090fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009100:	4643      	mov	r3, r8
 8009102:	463a      	mov	r2, r7
 8009104:	4628      	mov	r0, r5
 8009106:	47b0      	blx	r6
 8009108:	2800      	cmp	r0, #0
 800910a:	dc06      	bgt.n	800911a <__sflush_r+0xfe>
 800910c:	89a3      	ldrh	r3, [r4, #12]
 800910e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009112:	81a3      	strh	r3, [r4, #12]
 8009114:	f04f 30ff 	mov.w	r0, #4294967295
 8009118:	e78e      	b.n	8009038 <__sflush_r+0x1c>
 800911a:	4407      	add	r7, r0
 800911c:	eba8 0800 	sub.w	r8, r8, r0
 8009120:	e7e9      	b.n	80090f6 <__sflush_r+0xda>
 8009122:	bf00      	nop
 8009124:	dfbffffe 	.word	0xdfbffffe

08009128 <_fflush_r>:
 8009128:	b538      	push	{r3, r4, r5, lr}
 800912a:	690b      	ldr	r3, [r1, #16]
 800912c:	4605      	mov	r5, r0
 800912e:	460c      	mov	r4, r1
 8009130:	b913      	cbnz	r3, 8009138 <_fflush_r+0x10>
 8009132:	2500      	movs	r5, #0
 8009134:	4628      	mov	r0, r5
 8009136:	bd38      	pop	{r3, r4, r5, pc}
 8009138:	b118      	cbz	r0, 8009142 <_fflush_r+0x1a>
 800913a:	6a03      	ldr	r3, [r0, #32]
 800913c:	b90b      	cbnz	r3, 8009142 <_fflush_r+0x1a>
 800913e:	f7ff f817 	bl	8008170 <__sinit>
 8009142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d0f3      	beq.n	8009132 <_fflush_r+0xa>
 800914a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800914c:	07d0      	lsls	r0, r2, #31
 800914e:	d404      	bmi.n	800915a <_fflush_r+0x32>
 8009150:	0599      	lsls	r1, r3, #22
 8009152:	d402      	bmi.n	800915a <_fflush_r+0x32>
 8009154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009156:	f7ff fa3a 	bl	80085ce <__retarget_lock_acquire_recursive>
 800915a:	4628      	mov	r0, r5
 800915c:	4621      	mov	r1, r4
 800915e:	f7ff ff5d 	bl	800901c <__sflush_r>
 8009162:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009164:	07da      	lsls	r2, r3, #31
 8009166:	4605      	mov	r5, r0
 8009168:	d4e4      	bmi.n	8009134 <_fflush_r+0xc>
 800916a:	89a3      	ldrh	r3, [r4, #12]
 800916c:	059b      	lsls	r3, r3, #22
 800916e:	d4e1      	bmi.n	8009134 <_fflush_r+0xc>
 8009170:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009172:	f7ff fa2d 	bl	80085d0 <__retarget_lock_release_recursive>
 8009176:	e7dd      	b.n	8009134 <_fflush_r+0xc>

08009178 <__swhatbuf_r>:
 8009178:	b570      	push	{r4, r5, r6, lr}
 800917a:	460c      	mov	r4, r1
 800917c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009180:	2900      	cmp	r1, #0
 8009182:	b096      	sub	sp, #88	; 0x58
 8009184:	4615      	mov	r5, r2
 8009186:	461e      	mov	r6, r3
 8009188:	da0d      	bge.n	80091a6 <__swhatbuf_r+0x2e>
 800918a:	89a3      	ldrh	r3, [r4, #12]
 800918c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009190:	f04f 0100 	mov.w	r1, #0
 8009194:	bf0c      	ite	eq
 8009196:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800919a:	2340      	movne	r3, #64	; 0x40
 800919c:	2000      	movs	r0, #0
 800919e:	6031      	str	r1, [r6, #0]
 80091a0:	602b      	str	r3, [r5, #0]
 80091a2:	b016      	add	sp, #88	; 0x58
 80091a4:	bd70      	pop	{r4, r5, r6, pc}
 80091a6:	466a      	mov	r2, sp
 80091a8:	f000 f896 	bl	80092d8 <_fstat_r>
 80091ac:	2800      	cmp	r0, #0
 80091ae:	dbec      	blt.n	800918a <__swhatbuf_r+0x12>
 80091b0:	9901      	ldr	r1, [sp, #4]
 80091b2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80091b6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80091ba:	4259      	negs	r1, r3
 80091bc:	4159      	adcs	r1, r3
 80091be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091c2:	e7eb      	b.n	800919c <__swhatbuf_r+0x24>

080091c4 <__smakebuf_r>:
 80091c4:	898b      	ldrh	r3, [r1, #12]
 80091c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80091c8:	079d      	lsls	r5, r3, #30
 80091ca:	4606      	mov	r6, r0
 80091cc:	460c      	mov	r4, r1
 80091ce:	d507      	bpl.n	80091e0 <__smakebuf_r+0x1c>
 80091d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80091d4:	6023      	str	r3, [r4, #0]
 80091d6:	6123      	str	r3, [r4, #16]
 80091d8:	2301      	movs	r3, #1
 80091da:	6163      	str	r3, [r4, #20]
 80091dc:	b002      	add	sp, #8
 80091de:	bd70      	pop	{r4, r5, r6, pc}
 80091e0:	ab01      	add	r3, sp, #4
 80091e2:	466a      	mov	r2, sp
 80091e4:	f7ff ffc8 	bl	8009178 <__swhatbuf_r>
 80091e8:	9900      	ldr	r1, [sp, #0]
 80091ea:	4605      	mov	r5, r0
 80091ec:	4630      	mov	r0, r6
 80091ee:	f7ff fa5d 	bl	80086ac <_malloc_r>
 80091f2:	b948      	cbnz	r0, 8009208 <__smakebuf_r+0x44>
 80091f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091f8:	059a      	lsls	r2, r3, #22
 80091fa:	d4ef      	bmi.n	80091dc <__smakebuf_r+0x18>
 80091fc:	f023 0303 	bic.w	r3, r3, #3
 8009200:	f043 0302 	orr.w	r3, r3, #2
 8009204:	81a3      	strh	r3, [r4, #12]
 8009206:	e7e3      	b.n	80091d0 <__smakebuf_r+0xc>
 8009208:	89a3      	ldrh	r3, [r4, #12]
 800920a:	6020      	str	r0, [r4, #0]
 800920c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009210:	81a3      	strh	r3, [r4, #12]
 8009212:	9b00      	ldr	r3, [sp, #0]
 8009214:	6163      	str	r3, [r4, #20]
 8009216:	9b01      	ldr	r3, [sp, #4]
 8009218:	6120      	str	r0, [r4, #16]
 800921a:	b15b      	cbz	r3, 8009234 <__smakebuf_r+0x70>
 800921c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009220:	4630      	mov	r0, r6
 8009222:	f000 f86b 	bl	80092fc <_isatty_r>
 8009226:	b128      	cbz	r0, 8009234 <__smakebuf_r+0x70>
 8009228:	89a3      	ldrh	r3, [r4, #12]
 800922a:	f023 0303 	bic.w	r3, r3, #3
 800922e:	f043 0301 	orr.w	r3, r3, #1
 8009232:	81a3      	strh	r3, [r4, #12]
 8009234:	89a3      	ldrh	r3, [r4, #12]
 8009236:	431d      	orrs	r5, r3
 8009238:	81a5      	strh	r5, [r4, #12]
 800923a:	e7cf      	b.n	80091dc <__smakebuf_r+0x18>

0800923c <_putc_r>:
 800923c:	b570      	push	{r4, r5, r6, lr}
 800923e:	460d      	mov	r5, r1
 8009240:	4614      	mov	r4, r2
 8009242:	4606      	mov	r6, r0
 8009244:	b118      	cbz	r0, 800924e <_putc_r+0x12>
 8009246:	6a03      	ldr	r3, [r0, #32]
 8009248:	b90b      	cbnz	r3, 800924e <_putc_r+0x12>
 800924a:	f7fe ff91 	bl	8008170 <__sinit>
 800924e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009250:	07d8      	lsls	r0, r3, #31
 8009252:	d405      	bmi.n	8009260 <_putc_r+0x24>
 8009254:	89a3      	ldrh	r3, [r4, #12]
 8009256:	0599      	lsls	r1, r3, #22
 8009258:	d402      	bmi.n	8009260 <_putc_r+0x24>
 800925a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800925c:	f7ff f9b7 	bl	80085ce <__retarget_lock_acquire_recursive>
 8009260:	68a3      	ldr	r3, [r4, #8]
 8009262:	3b01      	subs	r3, #1
 8009264:	2b00      	cmp	r3, #0
 8009266:	60a3      	str	r3, [r4, #8]
 8009268:	da05      	bge.n	8009276 <_putc_r+0x3a>
 800926a:	69a2      	ldr	r2, [r4, #24]
 800926c:	4293      	cmp	r3, r2
 800926e:	db12      	blt.n	8009296 <_putc_r+0x5a>
 8009270:	b2eb      	uxtb	r3, r5
 8009272:	2b0a      	cmp	r3, #10
 8009274:	d00f      	beq.n	8009296 <_putc_r+0x5a>
 8009276:	6823      	ldr	r3, [r4, #0]
 8009278:	1c5a      	adds	r2, r3, #1
 800927a:	6022      	str	r2, [r4, #0]
 800927c:	701d      	strb	r5, [r3, #0]
 800927e:	b2ed      	uxtb	r5, r5
 8009280:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009282:	07da      	lsls	r2, r3, #31
 8009284:	d405      	bmi.n	8009292 <_putc_r+0x56>
 8009286:	89a3      	ldrh	r3, [r4, #12]
 8009288:	059b      	lsls	r3, r3, #22
 800928a:	d402      	bmi.n	8009292 <_putc_r+0x56>
 800928c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800928e:	f7ff f99f 	bl	80085d0 <__retarget_lock_release_recursive>
 8009292:	4628      	mov	r0, r5
 8009294:	bd70      	pop	{r4, r5, r6, pc}
 8009296:	4629      	mov	r1, r5
 8009298:	4622      	mov	r2, r4
 800929a:	4630      	mov	r0, r6
 800929c:	f7ff f877 	bl	800838e <__swbuf_r>
 80092a0:	4605      	mov	r5, r0
 80092a2:	e7ed      	b.n	8009280 <_putc_r+0x44>

080092a4 <memmove>:
 80092a4:	4288      	cmp	r0, r1
 80092a6:	b510      	push	{r4, lr}
 80092a8:	eb01 0402 	add.w	r4, r1, r2
 80092ac:	d902      	bls.n	80092b4 <memmove+0x10>
 80092ae:	4284      	cmp	r4, r0
 80092b0:	4623      	mov	r3, r4
 80092b2:	d807      	bhi.n	80092c4 <memmove+0x20>
 80092b4:	1e43      	subs	r3, r0, #1
 80092b6:	42a1      	cmp	r1, r4
 80092b8:	d008      	beq.n	80092cc <memmove+0x28>
 80092ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80092c2:	e7f8      	b.n	80092b6 <memmove+0x12>
 80092c4:	4402      	add	r2, r0
 80092c6:	4601      	mov	r1, r0
 80092c8:	428a      	cmp	r2, r1
 80092ca:	d100      	bne.n	80092ce <memmove+0x2a>
 80092cc:	bd10      	pop	{r4, pc}
 80092ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80092d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80092d6:	e7f7      	b.n	80092c8 <memmove+0x24>

080092d8 <_fstat_r>:
 80092d8:	b538      	push	{r3, r4, r5, lr}
 80092da:	4d07      	ldr	r5, [pc, #28]	; (80092f8 <_fstat_r+0x20>)
 80092dc:	2300      	movs	r3, #0
 80092de:	4604      	mov	r4, r0
 80092e0:	4608      	mov	r0, r1
 80092e2:	4611      	mov	r1, r2
 80092e4:	602b      	str	r3, [r5, #0]
 80092e6:	f7f9 fd00 	bl	8002cea <_fstat>
 80092ea:	1c43      	adds	r3, r0, #1
 80092ec:	d102      	bne.n	80092f4 <_fstat_r+0x1c>
 80092ee:	682b      	ldr	r3, [r5, #0]
 80092f0:	b103      	cbz	r3, 80092f4 <_fstat_r+0x1c>
 80092f2:	6023      	str	r3, [r4, #0]
 80092f4:	bd38      	pop	{r3, r4, r5, pc}
 80092f6:	bf00      	nop
 80092f8:	20000558 	.word	0x20000558

080092fc <_isatty_r>:
 80092fc:	b538      	push	{r3, r4, r5, lr}
 80092fe:	4d06      	ldr	r5, [pc, #24]	; (8009318 <_isatty_r+0x1c>)
 8009300:	2300      	movs	r3, #0
 8009302:	4604      	mov	r4, r0
 8009304:	4608      	mov	r0, r1
 8009306:	602b      	str	r3, [r5, #0]
 8009308:	f7f9 fcff 	bl	8002d0a <_isatty>
 800930c:	1c43      	adds	r3, r0, #1
 800930e:	d102      	bne.n	8009316 <_isatty_r+0x1a>
 8009310:	682b      	ldr	r3, [r5, #0]
 8009312:	b103      	cbz	r3, 8009316 <_isatty_r+0x1a>
 8009314:	6023      	str	r3, [r4, #0]
 8009316:	bd38      	pop	{r3, r4, r5, pc}
 8009318:	20000558 	.word	0x20000558

0800931c <_sbrk_r>:
 800931c:	b538      	push	{r3, r4, r5, lr}
 800931e:	4d06      	ldr	r5, [pc, #24]	; (8009338 <_sbrk_r+0x1c>)
 8009320:	2300      	movs	r3, #0
 8009322:	4604      	mov	r4, r0
 8009324:	4608      	mov	r0, r1
 8009326:	602b      	str	r3, [r5, #0]
 8009328:	f7f9 fd08 	bl	8002d3c <_sbrk>
 800932c:	1c43      	adds	r3, r0, #1
 800932e:	d102      	bne.n	8009336 <_sbrk_r+0x1a>
 8009330:	682b      	ldr	r3, [r5, #0]
 8009332:	b103      	cbz	r3, 8009336 <_sbrk_r+0x1a>
 8009334:	6023      	str	r3, [r4, #0]
 8009336:	bd38      	pop	{r3, r4, r5, pc}
 8009338:	20000558 	.word	0x20000558

0800933c <memcpy>:
 800933c:	440a      	add	r2, r1
 800933e:	4291      	cmp	r1, r2
 8009340:	f100 33ff 	add.w	r3, r0, #4294967295
 8009344:	d100      	bne.n	8009348 <memcpy+0xc>
 8009346:	4770      	bx	lr
 8009348:	b510      	push	{r4, lr}
 800934a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800934e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009352:	4291      	cmp	r1, r2
 8009354:	d1f9      	bne.n	800934a <memcpy+0xe>
 8009356:	bd10      	pop	{r4, pc}

08009358 <_realloc_r>:
 8009358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800935c:	4680      	mov	r8, r0
 800935e:	4614      	mov	r4, r2
 8009360:	460e      	mov	r6, r1
 8009362:	b921      	cbnz	r1, 800936e <_realloc_r+0x16>
 8009364:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009368:	4611      	mov	r1, r2
 800936a:	f7ff b99f 	b.w	80086ac <_malloc_r>
 800936e:	b92a      	cbnz	r2, 800937c <_realloc_r+0x24>
 8009370:	f7ff f930 	bl	80085d4 <_free_r>
 8009374:	4625      	mov	r5, r4
 8009376:	4628      	mov	r0, r5
 8009378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800937c:	f000 f81b 	bl	80093b6 <_malloc_usable_size_r>
 8009380:	4284      	cmp	r4, r0
 8009382:	4607      	mov	r7, r0
 8009384:	d802      	bhi.n	800938c <_realloc_r+0x34>
 8009386:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800938a:	d812      	bhi.n	80093b2 <_realloc_r+0x5a>
 800938c:	4621      	mov	r1, r4
 800938e:	4640      	mov	r0, r8
 8009390:	f7ff f98c 	bl	80086ac <_malloc_r>
 8009394:	4605      	mov	r5, r0
 8009396:	2800      	cmp	r0, #0
 8009398:	d0ed      	beq.n	8009376 <_realloc_r+0x1e>
 800939a:	42bc      	cmp	r4, r7
 800939c:	4622      	mov	r2, r4
 800939e:	4631      	mov	r1, r6
 80093a0:	bf28      	it	cs
 80093a2:	463a      	movcs	r2, r7
 80093a4:	f7ff ffca 	bl	800933c <memcpy>
 80093a8:	4631      	mov	r1, r6
 80093aa:	4640      	mov	r0, r8
 80093ac:	f7ff f912 	bl	80085d4 <_free_r>
 80093b0:	e7e1      	b.n	8009376 <_realloc_r+0x1e>
 80093b2:	4635      	mov	r5, r6
 80093b4:	e7df      	b.n	8009376 <_realloc_r+0x1e>

080093b6 <_malloc_usable_size_r>:
 80093b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093ba:	1f18      	subs	r0, r3, #4
 80093bc:	2b00      	cmp	r3, #0
 80093be:	bfbc      	itt	lt
 80093c0:	580b      	ldrlt	r3, [r1, r0]
 80093c2:	18c0      	addlt	r0, r0, r3
 80093c4:	4770      	bx	lr
	...

080093c8 <_init>:
 80093c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ca:	bf00      	nop
 80093cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ce:	bc08      	pop	{r3}
 80093d0:	469e      	mov	lr, r3
 80093d2:	4770      	bx	lr

080093d4 <_fini>:
 80093d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093d6:	bf00      	nop
 80093d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093da:	bc08      	pop	{r3}
 80093dc:	469e      	mov	lr, r3
 80093de:	4770      	bx	lr
