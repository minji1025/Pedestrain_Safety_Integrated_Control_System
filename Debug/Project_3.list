
Project_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d1c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08008ebc  08008ebc  00018ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009028  08009028  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08009028  08009028  00019028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009030  08009030  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009030  08009030  00019030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009034  08009034  00019034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08009038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f0  2000006c  080090a4  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000055c  080090a4  0002055c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001354b  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ec6  00000000  00000000  0003362a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001200  00000000  00000000  000364f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e15  00000000  00000000  000376f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000185fb  00000000  00000000  00038505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016235  00000000  00000000  00050b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092e35  00000000  00000000  00066d35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005658  00000000  00000000  000f9b6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003f  00000000  00000000  000ff1c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008ea4 	.word	0x08008ea4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08008ea4 	.word	0x08008ea4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b970 	b.w	8000d54 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9e08      	ldr	r6, [sp, #32]
 8000a92:	460d      	mov	r5, r1
 8000a94:	4604      	mov	r4, r0
 8000a96:	460f      	mov	r7, r1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d14a      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4694      	mov	ip, r2
 8000aa0:	d965      	bls.n	8000b6e <__udivmoddi4+0xe2>
 8000aa2:	fab2 f382 	clz	r3, r2
 8000aa6:	b143      	cbz	r3, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000aac:	f1c3 0220 	rsb	r2, r3, #32
 8000ab0:	409f      	lsls	r7, r3
 8000ab2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ab6:	4317      	orrs	r7, r2
 8000ab8:	409c      	lsls	r4, r3
 8000aba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000abe:	fa1f f58c 	uxth.w	r5, ip
 8000ac2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ac6:	0c22      	lsrs	r2, r4, #16
 8000ac8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000acc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ad0:	fb01 f005 	mul.w	r0, r1, r5
 8000ad4:	4290      	cmp	r0, r2
 8000ad6:	d90a      	bls.n	8000aee <__udivmoddi4+0x62>
 8000ad8:	eb1c 0202 	adds.w	r2, ip, r2
 8000adc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ae0:	f080 811c 	bcs.w	8000d1c <__udivmoddi4+0x290>
 8000ae4:	4290      	cmp	r0, r2
 8000ae6:	f240 8119 	bls.w	8000d1c <__udivmoddi4+0x290>
 8000aea:	3902      	subs	r1, #2
 8000aec:	4462      	add	r2, ip
 8000aee:	1a12      	subs	r2, r2, r0
 8000af0:	b2a4      	uxth	r4, r4
 8000af2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000af6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000afa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000afe:	fb00 f505 	mul.w	r5, r0, r5
 8000b02:	42a5      	cmp	r5, r4
 8000b04:	d90a      	bls.n	8000b1c <__udivmoddi4+0x90>
 8000b06:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b0e:	f080 8107 	bcs.w	8000d20 <__udivmoddi4+0x294>
 8000b12:	42a5      	cmp	r5, r4
 8000b14:	f240 8104 	bls.w	8000d20 <__udivmoddi4+0x294>
 8000b18:	4464      	add	r4, ip
 8000b1a:	3802      	subs	r0, #2
 8000b1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b20:	1b64      	subs	r4, r4, r5
 8000b22:	2100      	movs	r1, #0
 8000b24:	b11e      	cbz	r6, 8000b2e <__udivmoddi4+0xa2>
 8000b26:	40dc      	lsrs	r4, r3
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0xbc>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	f000 80ed 	beq.w	8000d16 <__udivmoddi4+0x28a>
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b42:	4608      	mov	r0, r1
 8000b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b48:	fab3 f183 	clz	r1, r3
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	d149      	bne.n	8000be4 <__udivmoddi4+0x158>
 8000b50:	42ab      	cmp	r3, r5
 8000b52:	d302      	bcc.n	8000b5a <__udivmoddi4+0xce>
 8000b54:	4282      	cmp	r2, r0
 8000b56:	f200 80f8 	bhi.w	8000d4a <__udivmoddi4+0x2be>
 8000b5a:	1a84      	subs	r4, r0, r2
 8000b5c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b60:	2001      	movs	r0, #1
 8000b62:	4617      	mov	r7, r2
 8000b64:	2e00      	cmp	r6, #0
 8000b66:	d0e2      	beq.n	8000b2e <__udivmoddi4+0xa2>
 8000b68:	e9c6 4700 	strd	r4, r7, [r6]
 8000b6c:	e7df      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000b6e:	b902      	cbnz	r2, 8000b72 <__udivmoddi4+0xe6>
 8000b70:	deff      	udf	#255	; 0xff
 8000b72:	fab2 f382 	clz	r3, r2
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f040 8090 	bne.w	8000c9c <__udivmoddi4+0x210>
 8000b7c:	1a8a      	subs	r2, r1, r2
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2101      	movs	r1, #1
 8000b88:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b8c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b90:	0c22      	lsrs	r2, r4, #16
 8000b92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b96:	fb0e f005 	mul.w	r0, lr, r5
 8000b9a:	4290      	cmp	r0, r2
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x124>
 8000b9e:	eb1c 0202 	adds.w	r2, ip, r2
 8000ba2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x122>
 8000ba8:	4290      	cmp	r0, r2
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2b8>
 8000bae:	4645      	mov	r5, r8
 8000bb0:	1a12      	subs	r2, r2, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bb8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x14e>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x14c>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2c2>
 8000bd8:	4610      	mov	r0, r2
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000be2:	e79f      	b.n	8000b24 <__udivmoddi4+0x98>
 8000be4:	f1c1 0720 	rsb	r7, r1, #32
 8000be8:	408b      	lsls	r3, r1
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa05 f401 	lsl.w	r4, r5, r1
 8000bf6:	fa20 f307 	lsr.w	r3, r0, r7
 8000bfa:	40fd      	lsrs	r5, r7
 8000bfc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c00:	4323      	orrs	r3, r4
 8000c02:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c06:	fa1f fe8c 	uxth.w	lr, ip
 8000c0a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c0e:	0c1c      	lsrs	r4, r3, #16
 8000c10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c14:	fb08 f50e 	mul.w	r5, r8, lr
 8000c18:	42a5      	cmp	r5, r4
 8000c1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b0>
 8000c24:	eb1c 0404 	adds.w	r4, ip, r4
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2b4>
 8000c30:	42a5      	cmp	r5, r4
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2b4>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4464      	add	r4, ip
 8000c3c:	1b64      	subs	r4, r4, r5
 8000c3e:	b29d      	uxth	r5, r3
 8000c40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c44:	fb09 4413 	mls	r4, r9, r3, r4
 8000c48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c4c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c50:	45a6      	cmp	lr, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1da>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2ac>
 8000c5e:	45a6      	cmp	lr, r4
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2ac>
 8000c62:	3b02      	subs	r3, #2
 8000c64:	4464      	add	r4, ip
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c6e:	eba4 040e 	sub.w	r4, r4, lr
 8000c72:	42ac      	cmp	r4, r5
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46ae      	mov	lr, r5
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x29c>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x298>
 8000c7c:	b156      	cbz	r6, 8000c94 <__udivmoddi4+0x208>
 8000c7e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c82:	eb64 040e 	sbc.w	r4, r4, lr
 8000c86:	fa04 f707 	lsl.w	r7, r4, r7
 8000c8a:	40ca      	lsrs	r2, r1
 8000c8c:	40cc      	lsrs	r4, r1
 8000c8e:	4317      	orrs	r7, r2
 8000c90:	e9c6 7400 	strd	r7, r4, [r6]
 8000c94:	4618      	mov	r0, r3
 8000c96:	2100      	movs	r1, #0
 8000c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9c:	f1c3 0120 	rsb	r1, r3, #32
 8000ca0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ca8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cac:	409d      	lsls	r5, r3
 8000cae:	432a      	orrs	r2, r5
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cbc:	fb07 1510 	mls	r5, r7, r0, r1
 8000cc0:	0c11      	lsrs	r1, r2, #16
 8000cc2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cc6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cca:	428d      	cmp	r5, r1
 8000ccc:	fa04 f403 	lsl.w	r4, r4, r3
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x258>
 8000cd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000cdc:	428d      	cmp	r5, r1
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4461      	add	r1, ip
 8000ce4:	1b49      	subs	r1, r1, r5
 8000ce6:	b292      	uxth	r2, r2
 8000ce8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cec:	fb07 1115 	mls	r1, r7, r5, r1
 8000cf0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cf4:	fb05 f10e 	mul.w	r1, r5, lr
 8000cf8:	4291      	cmp	r1, r2
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x282>
 8000cfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000d00:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000d06:	4291      	cmp	r1, r2
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000d0a:	3d02      	subs	r5, #2
 8000d0c:	4462      	add	r2, ip
 8000d0e:	1a52      	subs	r2, r2, r1
 8000d10:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0xfc>
 8000d16:	4631      	mov	r1, r6
 8000d18:	4630      	mov	r0, r6
 8000d1a:	e708      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000d1c:	4639      	mov	r1, r7
 8000d1e:	e6e6      	b.n	8000aee <__udivmoddi4+0x62>
 8000d20:	4610      	mov	r0, r2
 8000d22:	e6fb      	b.n	8000b1c <__udivmoddi4+0x90>
 8000d24:	4548      	cmp	r0, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f0>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d30:	3b01      	subs	r3, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f0>
 8000d34:	4645      	mov	r5, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x282>
 8000d38:	462b      	mov	r3, r5
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1da>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x258>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b0>
 8000d44:	3d02      	subs	r5, #2
 8000d46:	4462      	add	r2, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x124>
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	e70a      	b.n	8000b64 <__udivmoddi4+0xd8>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x14e>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <SysTickcallback>:
uint16_t counttime = 0;
static ESCALATOR_STATUS_t state = STOP;
static ESCALATOR_STATUS_t oldstate = STOP;
static SPEED_STATUS_t speedState = FAST;
static SPEED_STATUS_t oldespeedState = FAST;
void SysTickcallback() {
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
	if (counttime > 0)
 8000d5c:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <SysTickcallback+0x24>)
 8000d5e:	881b      	ldrh	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d005      	beq.n	8000d70 <SysTickcallback+0x18>
		counttime--;
 8000d64:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <SysTickcallback+0x24>)
 8000d66:	881b      	ldrh	r3, [r3, #0]
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	4b03      	ldr	r3, [pc, #12]	; (8000d7c <SysTickcallback+0x24>)
 8000d6e:	801a      	strh	r2, [r3, #0]
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	2000008a 	.word	0x2000008a

08000d80 <EscalatorSpeedEventCheck>:

void EscalatorSpeedEventCheck() {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
	char *msg;

	msg = getMessage();
 8000d86:	f001 fe09 	bl	800299c <getMessage>
 8000d8a:	6078      	str	r0, [r7, #4]

	if ((strncmp(msg, "Slow", 4) == 0)
 8000d8c:	2204      	movs	r2, #4
 8000d8e:	491b      	ldr	r1, [pc, #108]	; (8000dfc <EscalatorSpeedEventCheck+0x7c>)
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f007 f907 	bl	8007fa4 <strncmp>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d007      	beq.n	8000dac <EscalatorSpeedEventCheck+0x2c>
			|| (HAL_GPIO_ReadPin(slow_GPIO_Port, slow_Pin) == 0)) {
 8000d9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000da0:	4817      	ldr	r0, [pc, #92]	; (8000e00 <EscalatorSpeedEventCheck+0x80>)
 8000da2:	f002 fa21 	bl	80031e8 <HAL_GPIO_ReadPin>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d102      	bne.n	8000db2 <EscalatorSpeedEventCheck+0x32>
		speedState = SLOW;
 8000dac:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <EscalatorSpeedEventCheck+0x84>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	701a      	strb	r2, [r3, #0]
	}
	if ((strncmp(msg, "Fast", 4) == 0)
 8000db2:	2204      	movs	r2, #4
 8000db4:	4914      	ldr	r1, [pc, #80]	; (8000e08 <EscalatorSpeedEventCheck+0x88>)
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f007 f8f4 	bl	8007fa4 <strncmp>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d007      	beq.n	8000dd2 <EscalatorSpeedEventCheck+0x52>
			|| (HAL_GPIO_ReadPin(fast_GPIO_Port, fast_Pin) == 0)) {
 8000dc2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dc6:	480e      	ldr	r0, [pc, #56]	; (8000e00 <EscalatorSpeedEventCheck+0x80>)
 8000dc8:	f002 fa0e 	bl	80031e8 <HAL_GPIO_ReadPin>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d102      	bne.n	8000dd8 <EscalatorSpeedEventCheck+0x58>
		speedState = FAST;
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <EscalatorSpeedEventCheck+0x84>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	701a      	strb	r2, [r3, #0]
	}
	if ((strncmp(msg, "Stop", 4) == 0)) {
 8000dd8:	2204      	movs	r2, #4
 8000dda:	490c      	ldr	r1, [pc, #48]	; (8000e0c <EscalatorSpeedEventCheck+0x8c>)
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f007 f8e1 	bl	8007fa4 <strncmp>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d105      	bne.n	8000df4 <EscalatorSpeedEventCheck+0x74>
		state = STOP;
 8000de8:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <EscalatorSpeedEventCheck+0x90>)
 8000dea:	2202      	movs	r2, #2
 8000dec:	701a      	strb	r2, [r3, #0]
		count = 0;
 8000dee:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <EscalatorSpeedEventCheck+0x94>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	701a      	strb	r2, [r3, #0]
	}
}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	08008ebc 	.word	0x08008ebc
 8000e00:	40020800 	.word	0x40020800
 8000e04:	20000002 	.word	0x20000002
 8000e08:	08008ec4 	.word	0x08008ec4
 8000e0c:	08008ecc 	.word	0x08008ecc
 8000e10:	20000000 	.word	0x20000000
 8000e14:	20000088 	.word	0x20000088

08000e18 <EscalatorStateCheck>:

void EscalatorStateCheck() {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
	switch (speedState) {
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <EscalatorStateCheck+0x20>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d004      	beq.n	8000e2e <EscalatorStateCheck+0x16>
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d105      	bne.n	8000e34 <EscalatorStateCheck+0x1c>
		case FAST:
			EscalatorStateCheck_FAST();
 8000e28:	f000 f81a 	bl	8000e60 <EscalatorStateCheck_FAST>
			break;
 8000e2c:	e002      	b.n	8000e34 <EscalatorStateCheck+0x1c>

		case SLOW:
			EscalatorStateCheck_SLOW();
 8000e2e:	f000 f8e3 	bl	8000ff8 <EscalatorStateCheck_SLOW>
			break;
 8000e32:	bf00      	nop
	}
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000002 	.word	0x20000002

08000e3c <EscalatorRUN>:
void EscalatorRUN() {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
	switch (speedState) {
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <EscalatorRUN+0x20>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d004      	beq.n	8000e52 <EscalatorRUN+0x16>
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d105      	bne.n	8000e58 <EscalatorRUN+0x1c>
		case FAST:
			EscalatorRUN_FAST();
 8000e4c:	f000 f934 	bl	80010b8 <EscalatorRUN_FAST>
			break;
 8000e50:	e002      	b.n	8000e58 <EscalatorRUN+0x1c>

		case SLOW:
			EscalatorRUN_SLOW();
 8000e52:	f000 fa25 	bl	80012a0 <EscalatorRUN_SLOW>
			break;
 8000e56:	bf00      	nop
	}
}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000002 	.word	0x20000002

08000e60 <EscalatorStateCheck_FAST>:

void EscalatorStateCheck_FAST() {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
	uint16_t dist1;
	uint16_t dist2;
	dist1 = getDistance();
 8000e66:	f000 ff37 	bl	8001cd8 <getDistance>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	80fb      	strh	r3, [r7, #6]
	dist2 = getDistance2();
 8000e6e:	f000 ff59 	bl	8001d24 <getDistance2>
 8000e72:	4603      	mov	r3, r0
 8000e74:	80bb      	strh	r3, [r7, #4]

	switch (state) {
 8000e76:	4b5d      	ldr	r3, [pc, #372]	; (8000fec <EscalatorStateCheck_FAST+0x18c>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d073      	beq.n	8000f66 <EscalatorStateCheck_FAST+0x106>
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	f300 80af 	bgt.w	8000fe2 <EscalatorStateCheck_FAST+0x182>
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d039      	beq.n	8000efc <EscalatorStateCheck_FAST+0x9c>
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	f040 80aa 	bne.w	8000fe2 <EscalatorStateCheck_FAST+0x182>
		case DOWN:
			if ((dist1 > dist2) && (dist2 < 20) && (dist2 > 3)) {
 8000e8e:	88fa      	ldrh	r2, [r7, #6]
 8000e90:	88bb      	ldrh	r3, [r7, #4]
 8000e92:	429a      	cmp	r2, r3
 8000e94:	d913      	bls.n	8000ebe <EscalatorStateCheck_FAST+0x5e>
 8000e96:	88bb      	ldrh	r3, [r7, #4]
 8000e98:	2b13      	cmp	r3, #19
 8000e9a:	d810      	bhi.n	8000ebe <EscalatorStateCheck_FAST+0x5e>
 8000e9c:	88bb      	ldrh	r3, [r7, #4]
 8000e9e:	2b03      	cmp	r3, #3
 8000ea0:	d90d      	bls.n	8000ebe <EscalatorStateCheck_FAST+0x5e>
				if (counttime == 0) {
 8000ea2:	4b53      	ldr	r3, [pc, #332]	; (8000ff0 <EscalatorStateCheck_FAST+0x190>)
 8000ea4:	881b      	ldrh	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d109      	bne.n	8000ebe <EscalatorStateCheck_FAST+0x5e>
					counttime = 1000;
 8000eaa:	4b51      	ldr	r3, [pc, #324]	; (8000ff0 <EscalatorStateCheck_FAST+0x190>)
 8000eac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000eb0:	801a      	strh	r2, [r3, #0]
					count++;
 8000eb2:	4b50      	ldr	r3, [pc, #320]	; (8000ff4 <EscalatorStateCheck_FAST+0x194>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	4b4e      	ldr	r3, [pc, #312]	; (8000ff4 <EscalatorStateCheck_FAST+0x194>)
 8000ebc:	701a      	strb	r2, [r3, #0]
				}
			}
			if ((dist1 < dist2) && (dist1 < 20)) {
 8000ebe:	88fa      	ldrh	r2, [r7, #6]
 8000ec0:	88bb      	ldrh	r3, [r7, #4]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	f080 8088 	bcs.w	8000fd8 <EscalatorStateCheck_FAST+0x178>
 8000ec8:	88fb      	ldrh	r3, [r7, #6]
 8000eca:	2b13      	cmp	r3, #19
 8000ecc:	f200 8084 	bhi.w	8000fd8 <EscalatorStateCheck_FAST+0x178>
				if (counttime == 0) {
 8000ed0:	4b47      	ldr	r3, [pc, #284]	; (8000ff0 <EscalatorStateCheck_FAST+0x190>)
 8000ed2:	881b      	ldrh	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d17f      	bne.n	8000fd8 <EscalatorStateCheck_FAST+0x178>
					counttime = 1000;
 8000ed8:	4b45      	ldr	r3, [pc, #276]	; (8000ff0 <EscalatorStateCheck_FAST+0x190>)
 8000eda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ede:	801a      	strh	r2, [r3, #0]
					count--;
 8000ee0:	4b44      	ldr	r3, [pc, #272]	; (8000ff4 <EscalatorStateCheck_FAST+0x194>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	4b42      	ldr	r3, [pc, #264]	; (8000ff4 <EscalatorStateCheck_FAST+0x194>)
 8000eea:	701a      	strb	r2, [r3, #0]
					if (count == 0) {
 8000eec:	4b41      	ldr	r3, [pc, #260]	; (8000ff4 <EscalatorStateCheck_FAST+0x194>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d171      	bne.n	8000fd8 <EscalatorStateCheck_FAST+0x178>
						state = STOP;
 8000ef4:	4b3d      	ldr	r3, [pc, #244]	; (8000fec <EscalatorStateCheck_FAST+0x18c>)
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			break;
 8000efa:	e06d      	b.n	8000fd8 <EscalatorStateCheck_FAST+0x178>

		case UP:
			if ((dist1 < dist2) && (dist1 < 20) && (dist1 > 3)) {
 8000efc:	88fa      	ldrh	r2, [r7, #6]
 8000efe:	88bb      	ldrh	r3, [r7, #4]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d213      	bcs.n	8000f2c <EscalatorStateCheck_FAST+0xcc>
 8000f04:	88fb      	ldrh	r3, [r7, #6]
 8000f06:	2b13      	cmp	r3, #19
 8000f08:	d810      	bhi.n	8000f2c <EscalatorStateCheck_FAST+0xcc>
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	2b03      	cmp	r3, #3
 8000f0e:	d90d      	bls.n	8000f2c <EscalatorStateCheck_FAST+0xcc>
				if (counttime == 0) {
 8000f10:	4b37      	ldr	r3, [pc, #220]	; (8000ff0 <EscalatorStateCheck_FAST+0x190>)
 8000f12:	881b      	ldrh	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d109      	bne.n	8000f2c <EscalatorStateCheck_FAST+0xcc>
					counttime = 1000;
 8000f18:	4b35      	ldr	r3, [pc, #212]	; (8000ff0 <EscalatorStateCheck_FAST+0x190>)
 8000f1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f1e:	801a      	strh	r2, [r3, #0]
					count++;
 8000f20:	4b34      	ldr	r3, [pc, #208]	; (8000ff4 <EscalatorStateCheck_FAST+0x194>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	3301      	adds	r3, #1
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	4b32      	ldr	r3, [pc, #200]	; (8000ff4 <EscalatorStateCheck_FAST+0x194>)
 8000f2a:	701a      	strb	r2, [r3, #0]
				}
			}
			if ((dist1 > dist2) && (dist2 < 20)) {
 8000f2c:	88fa      	ldrh	r2, [r7, #6]
 8000f2e:	88bb      	ldrh	r3, [r7, #4]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d953      	bls.n	8000fdc <EscalatorStateCheck_FAST+0x17c>
 8000f34:	88bb      	ldrh	r3, [r7, #4]
 8000f36:	2b13      	cmp	r3, #19
 8000f38:	d850      	bhi.n	8000fdc <EscalatorStateCheck_FAST+0x17c>
				if (counttime == 0) {
 8000f3a:	4b2d      	ldr	r3, [pc, #180]	; (8000ff0 <EscalatorStateCheck_FAST+0x190>)
 8000f3c:	881b      	ldrh	r3, [r3, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d14c      	bne.n	8000fdc <EscalatorStateCheck_FAST+0x17c>
					counttime = 1000;
 8000f42:	4b2b      	ldr	r3, [pc, #172]	; (8000ff0 <EscalatorStateCheck_FAST+0x190>)
 8000f44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f48:	801a      	strh	r2, [r3, #0]
					count--;
 8000f4a:	4b2a      	ldr	r3, [pc, #168]	; (8000ff4 <EscalatorStateCheck_FAST+0x194>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4b28      	ldr	r3, [pc, #160]	; (8000ff4 <EscalatorStateCheck_FAST+0x194>)
 8000f54:	701a      	strb	r2, [r3, #0]
					if (count == 0) {
 8000f56:	4b27      	ldr	r3, [pc, #156]	; (8000ff4 <EscalatorStateCheck_FAST+0x194>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d13e      	bne.n	8000fdc <EscalatorStateCheck_FAST+0x17c>
						state = STOP;
 8000f5e:	4b23      	ldr	r3, [pc, #140]	; (8000fec <EscalatorStateCheck_FAST+0x18c>)
 8000f60:	2202      	movs	r2, #2
 8000f62:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			break;
 8000f64:	e03a      	b.n	8000fdc <EscalatorStateCheck_FAST+0x17c>

		case STOP:
			if ((dist1 > dist2) && (dist2 < 20) && (dist2 > 3)) {
 8000f66:	88fa      	ldrh	r2, [r7, #6]
 8000f68:	88bb      	ldrh	r3, [r7, #4]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d917      	bls.n	8000f9e <EscalatorStateCheck_FAST+0x13e>
 8000f6e:	88bb      	ldrh	r3, [r7, #4]
 8000f70:	2b13      	cmp	r3, #19
 8000f72:	d814      	bhi.n	8000f9e <EscalatorStateCheck_FAST+0x13e>
 8000f74:	88bb      	ldrh	r3, [r7, #4]
 8000f76:	2b03      	cmp	r3, #3
 8000f78:	d911      	bls.n	8000f9e <EscalatorStateCheck_FAST+0x13e>
				if (counttime == 0) {
 8000f7a:	4b1d      	ldr	r3, [pc, #116]	; (8000ff0 <EscalatorStateCheck_FAST+0x190>)
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d129      	bne.n	8000fd6 <EscalatorStateCheck_FAST+0x176>
					counttime = 1000;
 8000f82:	4b1b      	ldr	r3, [pc, #108]	; (8000ff0 <EscalatorStateCheck_FAST+0x190>)
 8000f84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f88:	801a      	strh	r2, [r3, #0]
					state = DOWN;
 8000f8a:	4b18      	ldr	r3, [pc, #96]	; (8000fec <EscalatorStateCheck_FAST+0x18c>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	701a      	strb	r2, [r3, #0]
					count++;
 8000f90:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <EscalatorStateCheck_FAST+0x194>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	3301      	adds	r3, #1
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <EscalatorStateCheck_FAST+0x194>)
 8000f9a:	701a      	strb	r2, [r3, #0]
				if (counttime == 0) {
 8000f9c:	e01b      	b.n	8000fd6 <EscalatorStateCheck_FAST+0x176>
				}
			} else if ((dist1 < dist2) && (dist1 < 20) && (dist1 > 3)) {
 8000f9e:	88fa      	ldrh	r2, [r7, #6]
 8000fa0:	88bb      	ldrh	r3, [r7, #4]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d21c      	bcs.n	8000fe0 <EscalatorStateCheck_FAST+0x180>
 8000fa6:	88fb      	ldrh	r3, [r7, #6]
 8000fa8:	2b13      	cmp	r3, #19
 8000faa:	d819      	bhi.n	8000fe0 <EscalatorStateCheck_FAST+0x180>
 8000fac:	88fb      	ldrh	r3, [r7, #6]
 8000fae:	2b03      	cmp	r3, #3
 8000fb0:	d916      	bls.n	8000fe0 <EscalatorStateCheck_FAST+0x180>
				if (counttime == 0) {
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <EscalatorStateCheck_FAST+0x190>)
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d112      	bne.n	8000fe0 <EscalatorStateCheck_FAST+0x180>
					counttime = 1000;
 8000fba:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <EscalatorStateCheck_FAST+0x190>)
 8000fbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fc0:	801a      	strh	r2, [r3, #0]
					state = UP;
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <EscalatorStateCheck_FAST+0x18c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	701a      	strb	r2, [r3, #0]
					count++;
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <EscalatorStateCheck_FAST+0x194>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <EscalatorStateCheck_FAST+0x194>)
 8000fd2:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 8000fd4:	e004      	b.n	8000fe0 <EscalatorStateCheck_FAST+0x180>
 8000fd6:	e003      	b.n	8000fe0 <EscalatorStateCheck_FAST+0x180>
			break;
 8000fd8:	bf00      	nop
 8000fda:	e002      	b.n	8000fe2 <EscalatorStateCheck_FAST+0x182>
			break;
 8000fdc:	bf00      	nop
 8000fde:	e000      	b.n	8000fe2 <EscalatorStateCheck_FAST+0x182>
			break;
 8000fe0:	bf00      	nop
	}
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000000 	.word	0x20000000
 8000ff0:	2000008a 	.word	0x2000008a
 8000ff4:	20000088 	.word	0x20000088

08000ff8 <EscalatorStateCheck_SLOW>:

void EscalatorStateCheck_SLOW() {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
	uint16_t dist1;
	uint16_t dist2;
	dist1 = getDistance();
 8000ffe:	f000 fe6b 	bl	8001cd8 <getDistance>
 8001002:	4603      	mov	r3, r0
 8001004:	80fb      	strh	r3, [r7, #6]
	dist2 = getDistance2();
 8001006:	f000 fe8d 	bl	8001d24 <getDistance2>
 800100a:	4603      	mov	r3, r0
 800100c:	80bb      	strh	r3, [r7, #4]

	switch (state) {
 800100e:	4b28      	ldr	r3, [pc, #160]	; (80010b0 <EscalatorStateCheck_SLOW+0xb8>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b02      	cmp	r3, #2
 8001014:	d015      	beq.n	8001042 <EscalatorStateCheck_SLOW+0x4a>
 8001016:	2b02      	cmp	r3, #2
 8001018:	dc45      	bgt.n	80010a6 <EscalatorStateCheck_SLOW+0xae>
 800101a:	2b00      	cmp	r3, #0
 800101c:	d009      	beq.n	8001032 <EscalatorStateCheck_SLOW+0x3a>
 800101e:	2b01      	cmp	r3, #1
 8001020:	d141      	bne.n	80010a6 <EscalatorStateCheck_SLOW+0xae>
		case DOWN:
			if (counttime == 0) {
 8001022:	4b24      	ldr	r3, [pc, #144]	; (80010b4 <EscalatorStateCheck_SLOW+0xbc>)
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d138      	bne.n	800109c <EscalatorStateCheck_SLOW+0xa4>
				state = STOP;
 800102a:	4b21      	ldr	r3, [pc, #132]	; (80010b0 <EscalatorStateCheck_SLOW+0xb8>)
 800102c:	2202      	movs	r2, #2
 800102e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001030:	e034      	b.n	800109c <EscalatorStateCheck_SLOW+0xa4>

		case UP:
			if (counttime == 0) {
 8001032:	4b20      	ldr	r3, [pc, #128]	; (80010b4 <EscalatorStateCheck_SLOW+0xbc>)
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d132      	bne.n	80010a0 <EscalatorStateCheck_SLOW+0xa8>
				state = STOP;
 800103a:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <EscalatorStateCheck_SLOW+0xb8>)
 800103c:	2202      	movs	r2, #2
 800103e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001040:	e02e      	b.n	80010a0 <EscalatorStateCheck_SLOW+0xa8>

		case STOP:
			if ((dist1 > dist2) && (dist2 < 20) && (dist2 > 3)) {
 8001042:	88fa      	ldrh	r2, [r7, #6]
 8001044:	88bb      	ldrh	r3, [r7, #4]
 8001046:	429a      	cmp	r2, r3
 8001048:	d911      	bls.n	800106e <EscalatorStateCheck_SLOW+0x76>
 800104a:	88bb      	ldrh	r3, [r7, #4]
 800104c:	2b13      	cmp	r3, #19
 800104e:	d80e      	bhi.n	800106e <EscalatorStateCheck_SLOW+0x76>
 8001050:	88bb      	ldrh	r3, [r7, #4]
 8001052:	2b03      	cmp	r3, #3
 8001054:	d90b      	bls.n	800106e <EscalatorStateCheck_SLOW+0x76>
				if (counttime == 0) {
 8001056:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <EscalatorStateCheck_SLOW+0xbc>)
 8001058:	881b      	ldrh	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d11d      	bne.n	800109a <EscalatorStateCheck_SLOW+0xa2>
					counttime = 5000;
 800105e:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <EscalatorStateCheck_SLOW+0xbc>)
 8001060:	f241 3288 	movw	r2, #5000	; 0x1388
 8001064:	801a      	strh	r2, [r3, #0]
					state = DOWN;
 8001066:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <EscalatorStateCheck_SLOW+0xb8>)
 8001068:	2201      	movs	r2, #1
 800106a:	701a      	strb	r2, [r3, #0]
				if (counttime == 0) {
 800106c:	e015      	b.n	800109a <EscalatorStateCheck_SLOW+0xa2>
				}

			} else if ((dist1 < dist2) && (dist1 < 20) && (dist1 > 3)) {
 800106e:	88fa      	ldrh	r2, [r7, #6]
 8001070:	88bb      	ldrh	r3, [r7, #4]
 8001072:	429a      	cmp	r2, r3
 8001074:	d216      	bcs.n	80010a4 <EscalatorStateCheck_SLOW+0xac>
 8001076:	88fb      	ldrh	r3, [r7, #6]
 8001078:	2b13      	cmp	r3, #19
 800107a:	d813      	bhi.n	80010a4 <EscalatorStateCheck_SLOW+0xac>
 800107c:	88fb      	ldrh	r3, [r7, #6]
 800107e:	2b03      	cmp	r3, #3
 8001080:	d910      	bls.n	80010a4 <EscalatorStateCheck_SLOW+0xac>
				if (counttime == 0) {
 8001082:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <EscalatorStateCheck_SLOW+0xbc>)
 8001084:	881b      	ldrh	r3, [r3, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d10c      	bne.n	80010a4 <EscalatorStateCheck_SLOW+0xac>
					counttime = 5000;
 800108a:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <EscalatorStateCheck_SLOW+0xbc>)
 800108c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001090:	801a      	strh	r2, [r3, #0]
					state = UP;
 8001092:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <EscalatorStateCheck_SLOW+0xb8>)
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 8001098:	e004      	b.n	80010a4 <EscalatorStateCheck_SLOW+0xac>
 800109a:	e003      	b.n	80010a4 <EscalatorStateCheck_SLOW+0xac>
			break;
 800109c:	bf00      	nop
 800109e:	e002      	b.n	80010a6 <EscalatorStateCheck_SLOW+0xae>
			break;
 80010a0:	bf00      	nop
 80010a2:	e000      	b.n	80010a6 <EscalatorStateCheck_SLOW+0xae>
			break;
 80010a4:	bf00      	nop
	}
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000000 	.word	0x20000000
 80010b4:	2000008a 	.word	0x2000008a

080010b8 <EscalatorRUN_FAST>:

void EscalatorRUN_FAST() {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0

	switch (state) {
 80010bc:	4b69      	ldr	r3, [pc, #420]	; (8001264 <EscalatorRUN_FAST+0x1ac>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	f000 8087 	beq.w	80011d4 <EscalatorRUN_FAST+0x11c>
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	f300 80c7 	bgt.w	800125a <EscalatorRUN_FAST+0x1a2>
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d042      	beq.n	8001156 <EscalatorRUN_FAST+0x9e>
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	f040 80c2 	bne.w	800125a <EscalatorRUN_FAST+0x1a2>
		case DOWN:
			goBackward(100);
 80010d6:	2064      	movs	r0, #100	; 0x64
 80010d8:	f000 fad4 	bl	8001684 <goBackward>
			if (oldespeedState != speedState || oldstate != state
 80010dc:	4b62      	ldr	r3, [pc, #392]	; (8001268 <EscalatorRUN_FAST+0x1b0>)
 80010de:	781a      	ldrb	r2, [r3, #0]
 80010e0:	4b62      	ldr	r3, [pc, #392]	; (800126c <EscalatorRUN_FAST+0x1b4>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d10c      	bne.n	8001102 <EscalatorRUN_FAST+0x4a>
 80010e8:	4b61      	ldr	r3, [pc, #388]	; (8001270 <EscalatorRUN_FAST+0x1b8>)
 80010ea:	781a      	ldrb	r2, [r3, #0]
 80010ec:	4b5d      	ldr	r3, [pc, #372]	; (8001264 <EscalatorRUN_FAST+0x1ac>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d106      	bne.n	8001102 <EscalatorRUN_FAST+0x4a>
					|| oldcount != count) {
 80010f4:	4b5f      	ldr	r3, [pc, #380]	; (8001274 <EscalatorRUN_FAST+0x1bc>)
 80010f6:	781a      	ldrb	r2, [r3, #0]
 80010f8:	4b5f      	ldr	r3, [pc, #380]	; (8001278 <EscalatorRUN_FAST+0x1c0>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	f000 80a7 	beq.w	8001250 <EscalatorRUN_FAST+0x198>
				I2C_CLCD_GotoXY(0, 1);
 8001102:	2101      	movs	r1, #1
 8001104:	2000      	movs	r0, #0
 8001106:	f000 fa35 	bl	8001574 <I2C_CLCD_GotoXY>
				I2C_CLCD_PutStr("               ");
 800110a:	485c      	ldr	r0, [pc, #368]	; (800127c <EscalatorRUN_FAST+0x1c4>)
 800110c:	f000 fa6e 	bl	80015ec <I2C_CLCD_PutStr>
				I2C_CLCD_GotoXY(0, 1);
 8001110:	2101      	movs	r1, #1
 8001112:	2000      	movs	r0, #0
 8001114:	f000 fa2e 	bl	8001574 <I2C_CLCD_GotoXY>
				I2C_CLCD_PutStr("  FAST  /  DOWN ");
 8001118:	4859      	ldr	r0, [pc, #356]	; (8001280 <EscalatorRUN_FAST+0x1c8>)
 800111a:	f000 fa67 	bl	80015ec <I2C_CLCD_PutStr>
				printf("speed : FAST\n");
 800111e:	4859      	ldr	r0, [pc, #356]	; (8001284 <EscalatorRUN_FAST+0x1cc>)
 8001120:	f006 fe38 	bl	8007d94 <puts>
				printf("State : DOWN \n");
 8001124:	4858      	ldr	r0, [pc, #352]	; (8001288 <EscalatorRUN_FAST+0x1d0>)
 8001126:	f006 fe35 	bl	8007d94 <puts>
				printf("Count : %d \n", count);
 800112a:	4b53      	ldr	r3, [pc, #332]	; (8001278 <EscalatorRUN_FAST+0x1c0>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	4619      	mov	r1, r3
 8001130:	4856      	ldr	r0, [pc, #344]	; (800128c <EscalatorRUN_FAST+0x1d4>)
 8001132:	f006 fdc1 	bl	8007cb8 <iprintf>
				oldespeedState = speedState;
 8001136:	4b4d      	ldr	r3, [pc, #308]	; (800126c <EscalatorRUN_FAST+0x1b4>)
 8001138:	781a      	ldrb	r2, [r3, #0]
 800113a:	4b4b      	ldr	r3, [pc, #300]	; (8001268 <EscalatorRUN_FAST+0x1b0>)
 800113c:	701a      	strb	r2, [r3, #0]
				oldstate = state;
 800113e:	4b49      	ldr	r3, [pc, #292]	; (8001264 <EscalatorRUN_FAST+0x1ac>)
 8001140:	781a      	ldrb	r2, [r3, #0]
 8001142:	4b4b      	ldr	r3, [pc, #300]	; (8001270 <EscalatorRUN_FAST+0x1b8>)
 8001144:	701a      	strb	r2, [r3, #0]
				oldcount = count;
 8001146:	4b4c      	ldr	r3, [pc, #304]	; (8001278 <EscalatorRUN_FAST+0x1c0>)
 8001148:	781a      	ldrb	r2, [r3, #0]
 800114a:	4b4a      	ldr	r3, [pc, #296]	; (8001274 <EscalatorRUN_FAST+0x1bc>)
 800114c:	701a      	strb	r2, [r3, #0]
				printf("\n");
 800114e:	200a      	movs	r0, #10
 8001150:	f006 fdc4 	bl	8007cdc <putchar>
			}
			break;
 8001154:	e07c      	b.n	8001250 <EscalatorRUN_FAST+0x198>
		case UP:
			goForward(100);
 8001156:	2064      	movs	r0, #100	; 0x64
 8001158:	f000 fa6e 	bl	8001638 <goForward>
			if (oldespeedState != speedState || oldstate != state
 800115c:	4b42      	ldr	r3, [pc, #264]	; (8001268 <EscalatorRUN_FAST+0x1b0>)
 800115e:	781a      	ldrb	r2, [r3, #0]
 8001160:	4b42      	ldr	r3, [pc, #264]	; (800126c <EscalatorRUN_FAST+0x1b4>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	429a      	cmp	r2, r3
 8001166:	d10b      	bne.n	8001180 <EscalatorRUN_FAST+0xc8>
 8001168:	4b41      	ldr	r3, [pc, #260]	; (8001270 <EscalatorRUN_FAST+0x1b8>)
 800116a:	781a      	ldrb	r2, [r3, #0]
 800116c:	4b3d      	ldr	r3, [pc, #244]	; (8001264 <EscalatorRUN_FAST+0x1ac>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	429a      	cmp	r2, r3
 8001172:	d105      	bne.n	8001180 <EscalatorRUN_FAST+0xc8>
					|| oldcount != count) {
 8001174:	4b3f      	ldr	r3, [pc, #252]	; (8001274 <EscalatorRUN_FAST+0x1bc>)
 8001176:	781a      	ldrb	r2, [r3, #0]
 8001178:	4b3f      	ldr	r3, [pc, #252]	; (8001278 <EscalatorRUN_FAST+0x1c0>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	429a      	cmp	r2, r3
 800117e:	d069      	beq.n	8001254 <EscalatorRUN_FAST+0x19c>
				I2C_CLCD_GotoXY(0, 1);
 8001180:	2101      	movs	r1, #1
 8001182:	2000      	movs	r0, #0
 8001184:	f000 f9f6 	bl	8001574 <I2C_CLCD_GotoXY>
				I2C_CLCD_PutStr("               ");
 8001188:	483c      	ldr	r0, [pc, #240]	; (800127c <EscalatorRUN_FAST+0x1c4>)
 800118a:	f000 fa2f 	bl	80015ec <I2C_CLCD_PutStr>
				I2C_CLCD_GotoXY(0, 1);
 800118e:	2101      	movs	r1, #1
 8001190:	2000      	movs	r0, #0
 8001192:	f000 f9ef 	bl	8001574 <I2C_CLCD_GotoXY>
				I2C_CLCD_PutStr("  FAST  /  UP  ");
 8001196:	483e      	ldr	r0, [pc, #248]	; (8001290 <EscalatorRUN_FAST+0x1d8>)
 8001198:	f000 fa28 	bl	80015ec <I2C_CLCD_PutStr>
				printf("speed : FAST\n");
 800119c:	4839      	ldr	r0, [pc, #228]	; (8001284 <EscalatorRUN_FAST+0x1cc>)
 800119e:	f006 fdf9 	bl	8007d94 <puts>
				printf("State : UP \n");
 80011a2:	483c      	ldr	r0, [pc, #240]	; (8001294 <EscalatorRUN_FAST+0x1dc>)
 80011a4:	f006 fdf6 	bl	8007d94 <puts>
				printf("Count : %d \n", count);
 80011a8:	4b33      	ldr	r3, [pc, #204]	; (8001278 <EscalatorRUN_FAST+0x1c0>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	4837      	ldr	r0, [pc, #220]	; (800128c <EscalatorRUN_FAST+0x1d4>)
 80011b0:	f006 fd82 	bl	8007cb8 <iprintf>
				oldespeedState = speedState;
 80011b4:	4b2d      	ldr	r3, [pc, #180]	; (800126c <EscalatorRUN_FAST+0x1b4>)
 80011b6:	781a      	ldrb	r2, [r3, #0]
 80011b8:	4b2b      	ldr	r3, [pc, #172]	; (8001268 <EscalatorRUN_FAST+0x1b0>)
 80011ba:	701a      	strb	r2, [r3, #0]
				oldstate = state;
 80011bc:	4b29      	ldr	r3, [pc, #164]	; (8001264 <EscalatorRUN_FAST+0x1ac>)
 80011be:	781a      	ldrb	r2, [r3, #0]
 80011c0:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <EscalatorRUN_FAST+0x1b8>)
 80011c2:	701a      	strb	r2, [r3, #0]
				oldcount = count;
 80011c4:	4b2c      	ldr	r3, [pc, #176]	; (8001278 <EscalatorRUN_FAST+0x1c0>)
 80011c6:	781a      	ldrb	r2, [r3, #0]
 80011c8:	4b2a      	ldr	r3, [pc, #168]	; (8001274 <EscalatorRUN_FAST+0x1bc>)
 80011ca:	701a      	strb	r2, [r3, #0]
				printf("\n");
 80011cc:	200a      	movs	r0, #10
 80011ce:	f006 fd85 	bl	8007cdc <putchar>
			}
			break;
 80011d2:	e03f      	b.n	8001254 <EscalatorRUN_FAST+0x19c>
		case STOP:
			stopMove();
 80011d4:	f000 fa7c 	bl	80016d0 <stopMove>
			if (oldespeedState != speedState || oldstate != state
 80011d8:	4b23      	ldr	r3, [pc, #140]	; (8001268 <EscalatorRUN_FAST+0x1b0>)
 80011da:	781a      	ldrb	r2, [r3, #0]
 80011dc:	4b23      	ldr	r3, [pc, #140]	; (800126c <EscalatorRUN_FAST+0x1b4>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d10b      	bne.n	80011fc <EscalatorRUN_FAST+0x144>
 80011e4:	4b22      	ldr	r3, [pc, #136]	; (8001270 <EscalatorRUN_FAST+0x1b8>)
 80011e6:	781a      	ldrb	r2, [r3, #0]
 80011e8:	4b1e      	ldr	r3, [pc, #120]	; (8001264 <EscalatorRUN_FAST+0x1ac>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d105      	bne.n	80011fc <EscalatorRUN_FAST+0x144>
					|| oldcount != count) {
 80011f0:	4b20      	ldr	r3, [pc, #128]	; (8001274 <EscalatorRUN_FAST+0x1bc>)
 80011f2:	781a      	ldrb	r2, [r3, #0]
 80011f4:	4b20      	ldr	r3, [pc, #128]	; (8001278 <EscalatorRUN_FAST+0x1c0>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d02d      	beq.n	8001258 <EscalatorRUN_FAST+0x1a0>
				I2C_CLCD_GotoXY(0, 1);
 80011fc:	2101      	movs	r1, #1
 80011fe:	2000      	movs	r0, #0
 8001200:	f000 f9b8 	bl	8001574 <I2C_CLCD_GotoXY>
				I2C_CLCD_PutStr("               ");
 8001204:	481d      	ldr	r0, [pc, #116]	; (800127c <EscalatorRUN_FAST+0x1c4>)
 8001206:	f000 f9f1 	bl	80015ec <I2C_CLCD_PutStr>
				I2C_CLCD_GotoXY(0, 1);
 800120a:	2101      	movs	r1, #1
 800120c:	2000      	movs	r0, #0
 800120e:	f000 f9b1 	bl	8001574 <I2C_CLCD_GotoXY>
				I2C_CLCD_PutStr("  FAST  /  STOP ");
 8001212:	4821      	ldr	r0, [pc, #132]	; (8001298 <EscalatorRUN_FAST+0x1e0>)
 8001214:	f000 f9ea 	bl	80015ec <I2C_CLCD_PutStr>
				printf("speed : FAST\n");
 8001218:	481a      	ldr	r0, [pc, #104]	; (8001284 <EscalatorRUN_FAST+0x1cc>)
 800121a:	f006 fdbb 	bl	8007d94 <puts>
				printf("State : STOP \n");
 800121e:	481f      	ldr	r0, [pc, #124]	; (800129c <EscalatorRUN_FAST+0x1e4>)
 8001220:	f006 fdb8 	bl	8007d94 <puts>
				printf("Count : %d \n", count);
 8001224:	4b14      	ldr	r3, [pc, #80]	; (8001278 <EscalatorRUN_FAST+0x1c0>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	4619      	mov	r1, r3
 800122a:	4818      	ldr	r0, [pc, #96]	; (800128c <EscalatorRUN_FAST+0x1d4>)
 800122c:	f006 fd44 	bl	8007cb8 <iprintf>
				oldespeedState = speedState;
 8001230:	4b0e      	ldr	r3, [pc, #56]	; (800126c <EscalatorRUN_FAST+0x1b4>)
 8001232:	781a      	ldrb	r2, [r3, #0]
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <EscalatorRUN_FAST+0x1b0>)
 8001236:	701a      	strb	r2, [r3, #0]
				oldstate = state;
 8001238:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <EscalatorRUN_FAST+0x1ac>)
 800123a:	781a      	ldrb	r2, [r3, #0]
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <EscalatorRUN_FAST+0x1b8>)
 800123e:	701a      	strb	r2, [r3, #0]
				oldcount = count;
 8001240:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <EscalatorRUN_FAST+0x1c0>)
 8001242:	781a      	ldrb	r2, [r3, #0]
 8001244:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <EscalatorRUN_FAST+0x1bc>)
 8001246:	701a      	strb	r2, [r3, #0]
				printf("\n");
 8001248:	200a      	movs	r0, #10
 800124a:	f006 fd47 	bl	8007cdc <putchar>
			}
			break;
 800124e:	e003      	b.n	8001258 <EscalatorRUN_FAST+0x1a0>
			break;
 8001250:	bf00      	nop
 8001252:	e002      	b.n	800125a <EscalatorRUN_FAST+0x1a2>
			break;
 8001254:	bf00      	nop
 8001256:	e000      	b.n	800125a <EscalatorRUN_FAST+0x1a2>
			break;
 8001258:	bf00      	nop
	}
	HAL_Delay(100);
 800125a:	2064      	movs	r0, #100	; 0x64
 800125c:	f001 fc78 	bl	8002b50 <HAL_Delay>
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000000 	.word	0x20000000
 8001268:	20000003 	.word	0x20000003
 800126c:	20000002 	.word	0x20000002
 8001270:	20000001 	.word	0x20000001
 8001274:	20000089 	.word	0x20000089
 8001278:	20000088 	.word	0x20000088
 800127c:	08008ed4 	.word	0x08008ed4
 8001280:	08008ee4 	.word	0x08008ee4
 8001284:	08008ef8 	.word	0x08008ef8
 8001288:	08008f08 	.word	0x08008f08
 800128c:	08008f18 	.word	0x08008f18
 8001290:	08008f28 	.word	0x08008f28
 8001294:	08008f38 	.word	0x08008f38
 8001298:	08008f44 	.word	0x08008f44
 800129c:	08008f58 	.word	0x08008f58

080012a0 <EscalatorRUN_SLOW>:

void EscalatorRUN_SLOW() {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
	switch (state) {
 80012a4:	4b4c      	ldr	r3, [pc, #304]	; (80013d8 <EscalatorRUN_SLOW+0x138>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d061      	beq.n	8001370 <EscalatorRUN_SLOW+0xd0>
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	f300 808e 	bgt.w	80013ce <EscalatorRUN_SLOW+0x12e>
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d031      	beq.n	800131a <EscalatorRUN_SLOW+0x7a>
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	f040 8089 	bne.w	80013ce <EscalatorRUN_SLOW+0x12e>
		case DOWN:
			goBackward(80);
 80012bc:	2050      	movs	r0, #80	; 0x50
 80012be:	f000 f9e1 	bl	8001684 <goBackward>
			if (oldespeedState != speedState || oldstate != state) {
 80012c2:	4b46      	ldr	r3, [pc, #280]	; (80013dc <EscalatorRUN_SLOW+0x13c>)
 80012c4:	781a      	ldrb	r2, [r3, #0]
 80012c6:	4b46      	ldr	r3, [pc, #280]	; (80013e0 <EscalatorRUN_SLOW+0x140>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d105      	bne.n	80012da <EscalatorRUN_SLOW+0x3a>
 80012ce:	4b45      	ldr	r3, [pc, #276]	; (80013e4 <EscalatorRUN_SLOW+0x144>)
 80012d0:	781a      	ldrb	r2, [r3, #0]
 80012d2:	4b41      	ldr	r3, [pc, #260]	; (80013d8 <EscalatorRUN_SLOW+0x138>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d074      	beq.n	80013c4 <EscalatorRUN_SLOW+0x124>
				I2C_CLCD_GotoXY(0, 1);
 80012da:	2101      	movs	r1, #1
 80012dc:	2000      	movs	r0, #0
 80012de:	f000 f949 	bl	8001574 <I2C_CLCD_GotoXY>
				I2C_CLCD_PutStr("               ");
 80012e2:	4841      	ldr	r0, [pc, #260]	; (80013e8 <EscalatorRUN_SLOW+0x148>)
 80012e4:	f000 f982 	bl	80015ec <I2C_CLCD_PutStr>
				I2C_CLCD_GotoXY(0, 1);
 80012e8:	2101      	movs	r1, #1
 80012ea:	2000      	movs	r0, #0
 80012ec:	f000 f942 	bl	8001574 <I2C_CLCD_GotoXY>
				I2C_CLCD_PutStr("  SLOW  /  DOWN ");
 80012f0:	483e      	ldr	r0, [pc, #248]	; (80013ec <EscalatorRUN_SLOW+0x14c>)
 80012f2:	f000 f97b 	bl	80015ec <I2C_CLCD_PutStr>
				printf("speed : SLOW\n");
 80012f6:	483e      	ldr	r0, [pc, #248]	; (80013f0 <EscalatorRUN_SLOW+0x150>)
 80012f8:	f006 fd4c 	bl	8007d94 <puts>
				printf("State : DOWN \n");
 80012fc:	483d      	ldr	r0, [pc, #244]	; (80013f4 <EscalatorRUN_SLOW+0x154>)
 80012fe:	f006 fd49 	bl	8007d94 <puts>
				oldespeedState = speedState;
 8001302:	4b37      	ldr	r3, [pc, #220]	; (80013e0 <EscalatorRUN_SLOW+0x140>)
 8001304:	781a      	ldrb	r2, [r3, #0]
 8001306:	4b35      	ldr	r3, [pc, #212]	; (80013dc <EscalatorRUN_SLOW+0x13c>)
 8001308:	701a      	strb	r2, [r3, #0]
				oldstate = state;
 800130a:	4b33      	ldr	r3, [pc, #204]	; (80013d8 <EscalatorRUN_SLOW+0x138>)
 800130c:	781a      	ldrb	r2, [r3, #0]
 800130e:	4b35      	ldr	r3, [pc, #212]	; (80013e4 <EscalatorRUN_SLOW+0x144>)
 8001310:	701a      	strb	r2, [r3, #0]
				printf("\n");
 8001312:	200a      	movs	r0, #10
 8001314:	f006 fce2 	bl	8007cdc <putchar>
			}
			break;
 8001318:	e054      	b.n	80013c4 <EscalatorRUN_SLOW+0x124>
		case UP:
			goForward(80);
 800131a:	2050      	movs	r0, #80	; 0x50
 800131c:	f000 f98c 	bl	8001638 <goForward>
			if (oldespeedState != speedState || oldstate != state) {
 8001320:	4b2e      	ldr	r3, [pc, #184]	; (80013dc <EscalatorRUN_SLOW+0x13c>)
 8001322:	781a      	ldrb	r2, [r3, #0]
 8001324:	4b2e      	ldr	r3, [pc, #184]	; (80013e0 <EscalatorRUN_SLOW+0x140>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	429a      	cmp	r2, r3
 800132a:	d105      	bne.n	8001338 <EscalatorRUN_SLOW+0x98>
 800132c:	4b2d      	ldr	r3, [pc, #180]	; (80013e4 <EscalatorRUN_SLOW+0x144>)
 800132e:	781a      	ldrb	r2, [r3, #0]
 8001330:	4b29      	ldr	r3, [pc, #164]	; (80013d8 <EscalatorRUN_SLOW+0x138>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	429a      	cmp	r2, r3
 8001336:	d047      	beq.n	80013c8 <EscalatorRUN_SLOW+0x128>
				I2C_CLCD_PutStr("               ");
 8001338:	482b      	ldr	r0, [pc, #172]	; (80013e8 <EscalatorRUN_SLOW+0x148>)
 800133a:	f000 f957 	bl	80015ec <I2C_CLCD_PutStr>
				I2C_CLCD_GotoXY(0, 1);
 800133e:	2101      	movs	r1, #1
 8001340:	2000      	movs	r0, #0
 8001342:	f000 f917 	bl	8001574 <I2C_CLCD_GotoXY>
				I2C_CLCD_PutStr("  SLOW  /  UP  ");
 8001346:	482c      	ldr	r0, [pc, #176]	; (80013f8 <EscalatorRUN_SLOW+0x158>)
 8001348:	f000 f950 	bl	80015ec <I2C_CLCD_PutStr>
				printf("speed : SLOW\n");
 800134c:	4828      	ldr	r0, [pc, #160]	; (80013f0 <EscalatorRUN_SLOW+0x150>)
 800134e:	f006 fd21 	bl	8007d94 <puts>
				printf("State : UP \n");
 8001352:	482a      	ldr	r0, [pc, #168]	; (80013fc <EscalatorRUN_SLOW+0x15c>)
 8001354:	f006 fd1e 	bl	8007d94 <puts>
				oldespeedState = speedState;
 8001358:	4b21      	ldr	r3, [pc, #132]	; (80013e0 <EscalatorRUN_SLOW+0x140>)
 800135a:	781a      	ldrb	r2, [r3, #0]
 800135c:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <EscalatorRUN_SLOW+0x13c>)
 800135e:	701a      	strb	r2, [r3, #0]
				oldstate = state;
 8001360:	4b1d      	ldr	r3, [pc, #116]	; (80013d8 <EscalatorRUN_SLOW+0x138>)
 8001362:	781a      	ldrb	r2, [r3, #0]
 8001364:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <EscalatorRUN_SLOW+0x144>)
 8001366:	701a      	strb	r2, [r3, #0]
				printf("\n");
 8001368:	200a      	movs	r0, #10
 800136a:	f006 fcb7 	bl	8007cdc <putchar>
			}
			break;
 800136e:	e02b      	b.n	80013c8 <EscalatorRUN_SLOW+0x128>
		case STOP:
			stopMove();
 8001370:	f000 f9ae 	bl	80016d0 <stopMove>
			if (oldespeedState != speedState || oldstate != state) {
 8001374:	4b19      	ldr	r3, [pc, #100]	; (80013dc <EscalatorRUN_SLOW+0x13c>)
 8001376:	781a      	ldrb	r2, [r3, #0]
 8001378:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <EscalatorRUN_SLOW+0x140>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	429a      	cmp	r2, r3
 800137e:	d105      	bne.n	800138c <EscalatorRUN_SLOW+0xec>
 8001380:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <EscalatorRUN_SLOW+0x144>)
 8001382:	781a      	ldrb	r2, [r3, #0]
 8001384:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <EscalatorRUN_SLOW+0x138>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	429a      	cmp	r2, r3
 800138a:	d01f      	beq.n	80013cc <EscalatorRUN_SLOW+0x12c>
				I2C_CLCD_PutStr("               ");
 800138c:	4816      	ldr	r0, [pc, #88]	; (80013e8 <EscalatorRUN_SLOW+0x148>)
 800138e:	f000 f92d 	bl	80015ec <I2C_CLCD_PutStr>
				I2C_CLCD_GotoXY(0, 1);
 8001392:	2101      	movs	r1, #1
 8001394:	2000      	movs	r0, #0
 8001396:	f000 f8ed 	bl	8001574 <I2C_CLCD_GotoXY>
				I2C_CLCD_PutStr("  SLOW  /  STOP  ");
 800139a:	4819      	ldr	r0, [pc, #100]	; (8001400 <EscalatorRUN_SLOW+0x160>)
 800139c:	f000 f926 	bl	80015ec <I2C_CLCD_PutStr>
				printf("speed : SLOW\n");
 80013a0:	4813      	ldr	r0, [pc, #76]	; (80013f0 <EscalatorRUN_SLOW+0x150>)
 80013a2:	f006 fcf7 	bl	8007d94 <puts>
				printf("State : STOP \n");
 80013a6:	4817      	ldr	r0, [pc, #92]	; (8001404 <EscalatorRUN_SLOW+0x164>)
 80013a8:	f006 fcf4 	bl	8007d94 <puts>
				oldespeedState = speedState;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <EscalatorRUN_SLOW+0x140>)
 80013ae:	781a      	ldrb	r2, [r3, #0]
 80013b0:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <EscalatorRUN_SLOW+0x13c>)
 80013b2:	701a      	strb	r2, [r3, #0]
				oldstate = state;
 80013b4:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <EscalatorRUN_SLOW+0x138>)
 80013b6:	781a      	ldrb	r2, [r3, #0]
 80013b8:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <EscalatorRUN_SLOW+0x144>)
 80013ba:	701a      	strb	r2, [r3, #0]
				printf("\n");
 80013bc:	200a      	movs	r0, #10
 80013be:	f006 fc8d 	bl	8007cdc <putchar>
			}
			break;
 80013c2:	e003      	b.n	80013cc <EscalatorRUN_SLOW+0x12c>
			break;
 80013c4:	bf00      	nop
 80013c6:	e002      	b.n	80013ce <EscalatorRUN_SLOW+0x12e>
			break;
 80013c8:	bf00      	nop
 80013ca:	e000      	b.n	80013ce <EscalatorRUN_SLOW+0x12e>
			break;
 80013cc:	bf00      	nop
	}
	HAL_Delay(100);
 80013ce:	2064      	movs	r0, #100	; 0x64
 80013d0:	f001 fbbe 	bl	8002b50 <HAL_Delay>
}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000000 	.word	0x20000000
 80013dc:	20000003 	.word	0x20000003
 80013e0:	20000002 	.word	0x20000002
 80013e4:	20000001 	.word	0x20000001
 80013e8:	08008ed4 	.word	0x08008ed4
 80013ec:	08008f68 	.word	0x08008f68
 80013f0:	08008f7c 	.word	0x08008f7c
 80013f4:	08008f08 	.word	0x08008f08
 80013f8:	08008f8c 	.word	0x08008f8c
 80013fc:	08008f38 	.word	0x08008f38
 8001400:	08008f9c 	.word	0x08008f9c
 8001404:	08008f58 	.word	0x08008f58

08001408 <I2C_CLCD_Delay_us>:
#include "I2C_CLCD.h"

extern I2C_HandleTypeDef hi2c1;

void I2C_CLCD_Delay_us(uint8_t us) {
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
	volatile uint8_t i;

	for (i = 0; i < 19 * us / 10; i++)
 8001412:	2300      	movs	r3, #0
 8001414:	73fb      	strb	r3, [r7, #15]
 8001416:	e004      	b.n	8001422 <I2C_CLCD_Delay_us+0x1a>
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	b2db      	uxtb	r3, r3
 800141c:	3301      	adds	r3, #1
 800141e:	b2db      	uxtb	r3, r3
 8001420:	73fb      	strb	r3, [r7, #15]
 8001422:	7bfb      	ldrb	r3, [r7, #15]
 8001424:	b2db      	uxtb	r3, r3
 8001426:	4619      	mov	r1, r3
 8001428:	79fa      	ldrb	r2, [r7, #7]
 800142a:	4613      	mov	r3, r2
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	4413      	add	r3, r2
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	4413      	add	r3, r2
 8001434:	4a07      	ldr	r2, [pc, #28]	; (8001454 <I2C_CLCD_Delay_us+0x4c>)
 8001436:	fb82 0203 	smull	r0, r2, r2, r3
 800143a:	1092      	asrs	r2, r2, #2
 800143c:	17db      	asrs	r3, r3, #31
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	4299      	cmp	r1, r3
 8001442:	dbe9      	blt.n	8001418 <I2C_CLCD_Delay_us+0x10>
		;
}
 8001444:	bf00      	nop
 8001446:	bf00      	nop
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	66666667 	.word	0x66666667

08001458 <I2C_CLCD_SendByte>:

void I2C_CLCD_SendByte(uint8_t RS_State, uint8_t Byte) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af02      	add	r7, sp, #8
 800145e:	4603      	mov	r3, r0
 8001460:	460a      	mov	r2, r1
 8001462:	71fb      	strb	r3, [r7, #7]
 8001464:	4613      	mov	r3, r2
 8001466:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	uint8_t buffer[4];

	for (i = 0; i < 2; i++) {
 8001468:	2300      	movs	r3, #0
 800146a:	73fb      	strb	r3, [r7, #15]
 800146c:	e01c      	b.n	80014a8 <I2C_CLCD_SendByte+0x50>
		buffer[i] = (Byte & 0xf0) | (1 << I2C_CLCD_LED) | (!i << I2C_CLCD_E)
 800146e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001472:	f023 030f 	bic.w	r3, r3, #15
 8001476:	b25b      	sxtb	r3, r3
 8001478:	f043 0308 	orr.w	r3, r3, #8
 800147c:	b25b      	sxtb	r3, r3
				| (0 << I2C_CLCD_RW) | (RS_State << I2C_CLCD_RS);
 800147e:	7bfa      	ldrb	r2, [r7, #15]
 8001480:	2a00      	cmp	r2, #0
 8001482:	d101      	bne.n	8001488 <I2C_CLCD_SendByte+0x30>
 8001484:	2204      	movs	r2, #4
 8001486:	e000      	b.n	800148a <I2C_CLCD_SendByte+0x32>
 8001488:	2200      	movs	r2, #0
 800148a:	4313      	orrs	r3, r2
 800148c:	b25a      	sxtb	r2, r3
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	4313      	orrs	r3, r2
 8001494:	b25a      	sxtb	r2, r3
		buffer[i] = (Byte & 0xf0) | (1 << I2C_CLCD_LED) | (!i << I2C_CLCD_E)
 8001496:	7bfb      	ldrb	r3, [r7, #15]
				| (0 << I2C_CLCD_RW) | (RS_State << I2C_CLCD_RS);
 8001498:	b2d2      	uxtb	r2, r2
		buffer[i] = (Byte & 0xf0) | (1 << I2C_CLCD_LED) | (!i << I2C_CLCD_E)
 800149a:	3310      	adds	r3, #16
 800149c:	443b      	add	r3, r7
 800149e:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (i = 0; i < 2; i++) {
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	3301      	adds	r3, #1
 80014a6:	73fb      	strb	r3, [r7, #15]
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d9df      	bls.n	800146e <I2C_CLCD_SendByte+0x16>
	}

	for (i = 0; i < 2; i++) {
 80014ae:	2300      	movs	r3, #0
 80014b0:	73fb      	strb	r3, [r7, #15]
 80014b2:	e01b      	b.n	80014ec <I2C_CLCD_SendByte+0x94>
		buffer[i + 2] = (Byte << 4) | (1 << I2C_CLCD_LED) | (!i << I2C_CLCD_E)
 80014b4:	79bb      	ldrb	r3, [r7, #6]
 80014b6:	011b      	lsls	r3, r3, #4
 80014b8:	b25b      	sxtb	r3, r3
 80014ba:	f043 0308 	orr.w	r3, r3, #8
 80014be:	b25b      	sxtb	r3, r3
				| (0 << I2C_CLCD_RW) | (RS_State << I2C_CLCD_RS);
 80014c0:	7bfa      	ldrb	r2, [r7, #15]
 80014c2:	2a00      	cmp	r2, #0
 80014c4:	d101      	bne.n	80014ca <I2C_CLCD_SendByte+0x72>
 80014c6:	2204      	movs	r2, #4
 80014c8:	e000      	b.n	80014cc <I2C_CLCD_SendByte+0x74>
 80014ca:	2200      	movs	r2, #0
 80014cc:	4313      	orrs	r3, r2
 80014ce:	b25a      	sxtb	r2, r3
 80014d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	b25a      	sxtb	r2, r3
		buffer[i + 2] = (Byte << 4) | (1 << I2C_CLCD_LED) | (!i << I2C_CLCD_E)
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	3302      	adds	r3, #2
				| (0 << I2C_CLCD_RW) | (RS_State << I2C_CLCD_RS);
 80014dc:	b2d2      	uxtb	r2, r2
		buffer[i + 2] = (Byte << 4) | (1 << I2C_CLCD_LED) | (!i << I2C_CLCD_E)
 80014de:	3310      	adds	r3, #16
 80014e0:	443b      	add	r3, r7
 80014e2:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (i = 0; i < 2; i++) {
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	3301      	adds	r3, #1
 80014ea:	73fb      	strb	r3, [r7, #15]
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d9e0      	bls.n	80014b4 <I2C_CLCD_SendByte+0x5c>
	}
	HAL_I2C_Master_Transmit(&hi2c1, PCF8574_AD | WRITE, buffer, 4, 300);
 80014f2:	f107 0208 	add.w	r2, r7, #8
 80014f6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80014fa:	9300      	str	r3, [sp, #0]
 80014fc:	2304      	movs	r3, #4
 80014fe:	214e      	movs	r1, #78	; 0x4e
 8001500:	4804      	ldr	r0, [pc, #16]	; (8001514 <I2C_CLCD_SendByte+0xbc>)
 8001502:	f001 ffe7 	bl	80034d4 <HAL_I2C_Master_Transmit>

	I2C_CLCD_Delay_us(40);
 8001506:	2028      	movs	r0, #40	; 0x28
 8001508:	f7ff ff7e 	bl	8001408 <I2C_CLCD_Delay_us>
}
 800150c:	bf00      	nop
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	200000cc 	.word	0x200000cc

08001518 <I2C_CLCD_init>:

void I2C_CLCD_init(void) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t CLCD_Init_CMD[4] = { 0x28, 0x0c, 0x01, 0x06 };
 800151e:	4b14      	ldr	r3, [pc, #80]	; (8001570 <I2C_CLCD_init+0x58>)
 8001520:	603b      	str	r3, [r7, #0]

	HAL_Delay(100);
 8001522:	2064      	movs	r0, #100	; 0x64
 8001524:	f001 fb14 	bl	8002b50 <HAL_Delay>

	I2C_CLCD_SendByte(0, 0x02);
 8001528:	2102      	movs	r1, #2
 800152a:	2000      	movs	r0, #0
 800152c:	f7ff ff94 	bl	8001458 <I2C_CLCD_SendByte>

	HAL_Delay(2);
 8001530:	2002      	movs	r0, #2
 8001532:	f001 fb0d 	bl	8002b50 <HAL_Delay>

	for (i = 0; i < 4; i++) {
 8001536:	2300      	movs	r3, #0
 8001538:	71fb      	strb	r3, [r7, #7]
 800153a:	e011      	b.n	8001560 <I2C_CLCD_init+0x48>
		I2C_CLCD_SendByte(0, CLCD_Init_CMD[i]);
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	3308      	adds	r3, #8
 8001540:	443b      	add	r3, r7
 8001542:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8001546:	4619      	mov	r1, r3
 8001548:	2000      	movs	r0, #0
 800154a:	f7ff ff85 	bl	8001458 <I2C_CLCD_SendByte>

		if (i == 2)
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	2b02      	cmp	r3, #2
 8001552:	d102      	bne.n	800155a <I2C_CLCD_init+0x42>
			HAL_Delay(2);
 8001554:	2002      	movs	r0, #2
 8001556:	f001 fafb 	bl	8002b50 <HAL_Delay>
	for (i = 0; i < 4; i++) {
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	3301      	adds	r3, #1
 800155e:	71fb      	strb	r3, [r7, #7]
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	2b03      	cmp	r3, #3
 8001564:	d9ea      	bls.n	800153c <I2C_CLCD_init+0x24>
	}
}
 8001566:	bf00      	nop
 8001568:	bf00      	nop
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	06010c28 	.word	0x06010c28

08001574 <I2C_CLCD_GotoXY>:

void I2C_CLCD_GotoXY(uint8_t X, uint8_t Y) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	460a      	mov	r2, r1
 800157e:	71fb      	strb	r3, [r7, #7]
 8001580:	4613      	mov	r3, r2
 8001582:	71bb      	strb	r3, [r7, #6]
	I2C_CLCD_SendByte(0, 0x80 | (0x40 * Y + X));
 8001584:	79bb      	ldrb	r3, [r7, #6]
 8001586:	019b      	lsls	r3, r3, #6
 8001588:	b2da      	uxtb	r2, r3
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	4413      	add	r3, r2
 800158e:	b2db      	uxtb	r3, r3
 8001590:	b25b      	sxtb	r3, r3
 8001592:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001596:	b25b      	sxtb	r3, r3
 8001598:	b2db      	uxtb	r3, r3
 800159a:	4619      	mov	r1, r3
 800159c:	2000      	movs	r0, #0
 800159e:	f7ff ff5b 	bl	8001458 <I2C_CLCD_SendByte>
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <I2C_CLCD_PutC>:

void I2C_CLCD_PutC(uint8_t C) {
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	4603      	mov	r3, r0
 80015b2:	71fb      	strb	r3, [r7, #7]
	if (C == '\f') {
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	2b0c      	cmp	r3, #12
 80015b8:	d107      	bne.n	80015ca <I2C_CLCD_PutC+0x20>
		I2C_CLCD_SendByte(0, 0x01);
 80015ba:	2101      	movs	r1, #1
 80015bc:	2000      	movs	r0, #0
 80015be:	f7ff ff4b 	bl	8001458 <I2C_CLCD_SendByte>
		HAL_Delay(2);
 80015c2:	2002      	movs	r0, #2
 80015c4:	f001 fac4 	bl	8002b50 <HAL_Delay>
	} else if (C == '\n') {
		I2C_CLCD_GotoXY(0, 1);
	} else {
		I2C_CLCD_SendByte(1, C);
	}
}
 80015c8:	e00c      	b.n	80015e4 <I2C_CLCD_PutC+0x3a>
	} else if (C == '\n') {
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	2b0a      	cmp	r3, #10
 80015ce:	d104      	bne.n	80015da <I2C_CLCD_PutC+0x30>
		I2C_CLCD_GotoXY(0, 1);
 80015d0:	2101      	movs	r1, #1
 80015d2:	2000      	movs	r0, #0
 80015d4:	f7ff ffce 	bl	8001574 <I2C_CLCD_GotoXY>
}
 80015d8:	e004      	b.n	80015e4 <I2C_CLCD_PutC+0x3a>
		I2C_CLCD_SendByte(1, C);
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	4619      	mov	r1, r3
 80015de:	2001      	movs	r0, #1
 80015e0:	f7ff ff3a 	bl	8001458 <I2C_CLCD_SendByte>
}
 80015e4:	bf00      	nop
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <I2C_CLCD_PutStr>:

void I2C_CLCD_PutStr(uint8_t *Str) {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	while (*Str)
 80015f4:	e006      	b.n	8001604 <I2C_CLCD_PutStr+0x18>
		I2C_CLCD_PutC(*Str++);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	1c5a      	adds	r2, r3, #1
 80015fa:	607a      	str	r2, [r7, #4]
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff ffd3 	bl	80015aa <I2C_CLCD_PutC>
	while (*Str)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1f4      	bne.n	80015f6 <I2C_CLCD_PutStr+0xa>
}
 800160c:	bf00      	nop
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <initMotor>:
#include "Motor.h"
#include <stdio.h>
STATUS_t state;
TIM_HandleTypeDef *myHtim;

void initMotor(TIM_HandleTypeDef *inHtim){
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	myHtim = inHtim;
 8001620:	4a04      	ldr	r2, [pc, #16]	; (8001634 <initMotor+0x1c>)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6013      	str	r3, [r2, #0]
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	20000090 	.word	0x20000090

08001638 <goForward>:

//Motor
void goForward(uint8_t percent) {
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, esc_A_Pin, 1);
 8001642:	2201      	movs	r2, #1
 8001644:	2101      	movs	r1, #1
 8001646:	480c      	ldr	r0, [pc, #48]	; (8001678 <goForward+0x40>)
 8001648:	f001 fde6 	bl	8003218 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, esc_B_Pin, 0);
 800164c:	2200      	movs	r2, #0
 800164e:	2102      	movs	r1, #2
 8001650:	4809      	ldr	r0, [pc, #36]	; (8001678 <goForward+0x40>)
 8001652:	f001 fde1 	bl	8003218 <HAL_GPIO_WritePin>
	myHtim->Instance->CCR1 = (percent*10)-1;
 8001656:	79fa      	ldrb	r2, [r7, #7]
 8001658:	4613      	mov	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	1e5a      	subs	r2, r3, #1
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <goForward+0x44>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	635a      	str	r2, [r3, #52]	; 0x34
	state = FORWARD;
 800166a:	4b05      	ldr	r3, [pc, #20]	; (8001680 <goForward+0x48>)
 800166c:	2201      	movs	r2, #1
 800166e:	701a      	strb	r2, [r3, #0]
}
 8001670:	bf00      	nop
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40020800 	.word	0x40020800
 800167c:	20000090 	.word	0x20000090
 8001680:	2000008c 	.word	0x2000008c

08001684 <goBackward>:
void goBackward(uint8_t percent) {
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, esc_A_Pin, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	2101      	movs	r1, #1
 8001692:	480c      	ldr	r0, [pc, #48]	; (80016c4 <goBackward+0x40>)
 8001694:	f001 fdc0 	bl	8003218 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, esc_B_Pin, 1);
 8001698:	2201      	movs	r2, #1
 800169a:	2102      	movs	r1, #2
 800169c:	4809      	ldr	r0, [pc, #36]	; (80016c4 <goBackward+0x40>)
 800169e:	f001 fdbb 	bl	8003218 <HAL_GPIO_WritePin>
	myHtim->Instance->CCR1 = (percent*10)-1;
 80016a2:	79fa      	ldrb	r2, [r7, #7]
 80016a4:	4613      	mov	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	1e5a      	subs	r2, r3, #1
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <goBackward+0x44>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	635a      	str	r2, [r3, #52]	; 0x34
	state = BACKWARD;
 80016b6:	4b05      	ldr	r3, [pc, #20]	; (80016cc <goBackward+0x48>)
 80016b8:	2202      	movs	r2, #2
 80016ba:	701a      	strb	r2, [r3, #0]
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40020800 	.word	0x40020800
 80016c8:	20000090 	.word	0x20000090
 80016cc:	2000008c 	.word	0x2000008c

080016d0 <stopMove>:

void stopMove() {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, esc_A_Pin, 0);
 80016d4:	2200      	movs	r2, #0
 80016d6:	2101      	movs	r1, #1
 80016d8:	4808      	ldr	r0, [pc, #32]	; (80016fc <stopMove+0x2c>)
 80016da:	f001 fd9d 	bl	8003218 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, esc_B_Pin, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2102      	movs	r1, #2
 80016e2:	4806      	ldr	r0, [pc, #24]	; (80016fc <stopMove+0x2c>)
 80016e4:	f001 fd98 	bl	8003218 <HAL_GPIO_WritePin>
	myHtim->Instance->CCR1 = 0;
 80016e8:	4b05      	ldr	r3, [pc, #20]	; (8001700 <stopMove+0x30>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2200      	movs	r2, #0
 80016f0:	635a      	str	r2, [r3, #52]	; 0x34
	state = NONE;
 80016f2:	4b04      	ldr	r3, [pc, #16]	; (8001704 <stopMove+0x34>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	701a      	strb	r2, [r3, #0]
}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40020800 	.word	0x40020800
 8001700:	20000090 	.word	0x20000090
 8001704:	2000008c 	.word	0x2000008c

08001708 <initRTC>:
#include "RTC.h"

I2C_HandleTypeDef *myHi2c1;
DateTime_t dateTime;

void initRTC(UART_HandleTypeDef *inHi2c1) {
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	myHi2c1 = inHi2c1;
 8001710:	4a04      	ldr	r2, [pc, #16]	; (8001724 <initRTC+0x1c>)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6013      	str	r3, [r2, #0]
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	20000094 	.word	0x20000094

08001728 <BCD2Decimal>:
uint8_t BCD2Decimal(uint8_t inData) {
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
	uint8_t upper = inData >> 4;
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	091b      	lsrs	r3, r3, #4
 8001736:	73fb      	strb	r3, [r7, #15]
	uint8_t lower = inData & 0x0f;
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	73bb      	strb	r3, [r7, #14]
	return upper * 10 + lower;
 8001740:	7bfb      	ldrb	r3, [r7, #15]
 8001742:	461a      	mov	r2, r3
 8001744:	0092      	lsls	r2, r2, #2
 8001746:	4413      	add	r3, r2
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	b2da      	uxtb	r2, r3
 800174c:	7bbb      	ldrb	r3, [r7, #14]
 800174e:	4413      	add	r3, r2
 8001750:	b2db      	uxtb	r3, r3
}
 8001752:	4618      	mov	r0, r3
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
	...

08001760 <Decimal2BCD>:

uint8_t Decimal2BCD(uint8_t inData) {
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	71fb      	strb	r3, [r7, #7]
	uint8_t upper = inData / 10;
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	4a0e      	ldr	r2, [pc, #56]	; (80017a8 <Decimal2BCD+0x48>)
 800176e:	fba2 2303 	umull	r2, r3, r2, r3
 8001772:	08db      	lsrs	r3, r3, #3
 8001774:	73fb      	strb	r3, [r7, #15]
	uint8_t lower = inData % 10;
 8001776:	79fa      	ldrb	r2, [r7, #7]
 8001778:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <Decimal2BCD+0x48>)
 800177a:	fba3 1302 	umull	r1, r3, r3, r2
 800177e:	08d9      	lsrs	r1, r3, #3
 8001780:	460b      	mov	r3, r1
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	440b      	add	r3, r1
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	73bb      	strb	r3, [r7, #14]
	return upper << 4 | lower;
 800178c:	7bfb      	ldrb	r3, [r7, #15]
 800178e:	011b      	lsls	r3, r3, #4
 8001790:	b25a      	sxtb	r2, r3
 8001792:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001796:	4313      	orrs	r3, r2
 8001798:	b25b      	sxtb	r3, r3
 800179a:	b2db      	uxtb	r3, r3
}
 800179c:	4618      	mov	r0, r3
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	cccccccd 	.word	0xcccccccd

080017ac <setRTC>:

void setRTC(DateTime_t inData) {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af02      	add	r7, sp, #8
 80017b2:	463b      	mov	r3, r7
 80017b4:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t txBuffer[8];
	txBuffer[7] = Decimal2BCD(inData.year);
 80017b8:	783b      	ldrb	r3, [r7, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff ffd0 	bl	8001760 <Decimal2BCD>
 80017c0:	4603      	mov	r3, r0
 80017c2:	73fb      	strb	r3, [r7, #15]
	txBuffer[6] = Decimal2BCD(inData.month);
 80017c4:	787b      	ldrb	r3, [r7, #1]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff ffca 	bl	8001760 <Decimal2BCD>
 80017cc:	4603      	mov	r3, r0
 80017ce:	73bb      	strb	r3, [r7, #14]
	txBuffer[5] = Decimal2BCD(inData.date);
 80017d0:	78bb      	ldrb	r3, [r7, #2]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff ffc4 	bl	8001760 <Decimal2BCD>
 80017d8:	4603      	mov	r3, r0
 80017da:	737b      	strb	r3, [r7, #13]
	txBuffer[3] = Decimal2BCD(inData.hour);
 80017dc:	793b      	ldrb	r3, [r7, #4]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff ffbe 	bl	8001760 <Decimal2BCD>
 80017e4:	4603      	mov	r3, r0
 80017e6:	72fb      	strb	r3, [r7, #11]
	txBuffer[2] = Decimal2BCD(inData.min);
 80017e8:	797b      	ldrb	r3, [r7, #5]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff ffb8 	bl	8001760 <Decimal2BCD>
 80017f0:	4603      	mov	r3, r0
 80017f2:	72bb      	strb	r3, [r7, #10]
	txBuffer[1] = Decimal2BCD(inData.sec);
 80017f4:	79bb      	ldrb	r3, [r7, #6]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff ffb2 	bl	8001760 <Decimal2BCD>
 80017fc:	4603      	mov	r3, r0
 80017fe:	727b      	strb	r3, [r7, #9]
	txBuffer[0] = 0;
 8001800:	2300      	movs	r3, #0
 8001802:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(myHi2c1, RTC_ADD, txBuffer, sizeof(txBuffer), 10);
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <setRTC+0x74>)
 8001806:	6818      	ldr	r0, [r3, #0]
 8001808:	f107 0208 	add.w	r2, r7, #8
 800180c:	230a      	movs	r3, #10
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	2308      	movs	r3, #8
 8001812:	21d0      	movs	r1, #208	; 0xd0
 8001814:	f001 fe5e 	bl	80034d4 <HAL_I2C_Master_Transmit>
}
 8001818:	bf00      	nop
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000094 	.word	0x20000094

08001824 <getRTC>:

DateTime_t getRTC() {
 8001824:	b580      	push	{r7, lr}
 8001826:	b08a      	sub	sp, #40	; 0x28
 8001828:	af02      	add	r7, sp, #8
 800182a:	6078      	str	r0, [r7, #4]
	DateTime_t result;
	uint8_t rxBuffer[7];
	uint8_t address = 0;
 800182c:	2300      	movs	r3, #0
 800182e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(myHi2c1, RTC_ADD, &address, 1, 10);
 8001830:	4b25      	ldr	r3, [pc, #148]	; (80018c8 <getRTC+0xa4>)
 8001832:	6818      	ldr	r0, [r3, #0]
 8001834:	f107 020f 	add.w	r2, r7, #15
 8001838:	230a      	movs	r3, #10
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	2301      	movs	r3, #1
 800183e:	21d0      	movs	r1, #208	; 0xd0
 8001840:	f001 fe48 	bl	80034d4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(myHi2c1, RTC_ADD | READ, rxBuffer, 7, 10);
 8001844:	4b20      	ldr	r3, [pc, #128]	; (80018c8 <getRTC+0xa4>)
 8001846:	6818      	ldr	r0, [r3, #0]
 8001848:	f107 0210 	add.w	r2, r7, #16
 800184c:	230a      	movs	r3, #10
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	2307      	movs	r3, #7
 8001852:	21d1      	movs	r1, #209	; 0xd1
 8001854:	f001 ff3c 	bl	80036d0 <HAL_I2C_Master_Receive>
	result.year = BCD2Decimal(rxBuffer[6]);
 8001858:	7dbb      	ldrb	r3, [r7, #22]
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff ff64 	bl	8001728 <BCD2Decimal>
 8001860:	4603      	mov	r3, r0
 8001862:	763b      	strb	r3, [r7, #24]
	result.month = BCD2Decimal(rxBuffer[5]);
 8001864:	7d7b      	ldrb	r3, [r7, #21]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff ff5e 	bl	8001728 <BCD2Decimal>
 800186c:	4603      	mov	r3, r0
 800186e:	767b      	strb	r3, [r7, #25]
	result.date = BCD2Decimal(rxBuffer[4]);
 8001870:	7d3b      	ldrb	r3, [r7, #20]
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff ff58 	bl	8001728 <BCD2Decimal>
 8001878:	4603      	mov	r3, r0
 800187a:	76bb      	strb	r3, [r7, #26]
	result.day = BCD2Decimal(rxBuffer[3]);
 800187c:	7cfb      	ldrb	r3, [r7, #19]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff ff52 	bl	8001728 <BCD2Decimal>
 8001884:	4603      	mov	r3, r0
 8001886:	76fb      	strb	r3, [r7, #27]
	result.hour = BCD2Decimal(rxBuffer[2]);
 8001888:	7cbb      	ldrb	r3, [r7, #18]
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff ff4c 	bl	8001728 <BCD2Decimal>
 8001890:	4603      	mov	r3, r0
 8001892:	773b      	strb	r3, [r7, #28]
	result.min = BCD2Decimal(rxBuffer[1]);
 8001894:	7c7b      	ldrb	r3, [r7, #17]
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff ff46 	bl	8001728 <BCD2Decimal>
 800189c:	4603      	mov	r3, r0
 800189e:	777b      	strb	r3, [r7, #29]
	result.sec = BCD2Decimal(rxBuffer[0]);
 80018a0:	7c3b      	ldrb	r3, [r7, #16]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff ff40 	bl	8001728 <BCD2Decimal>
 80018a8:	4603      	mov	r3, r0
 80018aa:	77bb      	strb	r3, [r7, #30]
	return result;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	461a      	mov	r2, r3
 80018b0:	f107 0318 	add.w	r3, r7, #24
 80018b4:	6818      	ldr	r0, [r3, #0]
 80018b6:	6010      	str	r0, [r2, #0]
 80018b8:	8899      	ldrh	r1, [r3, #4]
 80018ba:	799b      	ldrb	r3, [r3, #6]
 80018bc:	8091      	strh	r1, [r2, #4]
 80018be:	7193      	strb	r3, [r2, #6]
}
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	3720      	adds	r7, #32
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000094 	.word	0x20000094

080018cc <write4ByteEEPROM>:
	HAL_I2C_Mem_Read(myHi2c1, ROM_ADD, address, 2, &result, 2, 10);
	return result;

}

void write4ByteEEPROM(uint16_t address, uint16_t data) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af04      	add	r7, sp, #16
 80018d2:	4603      	mov	r3, r0
 80018d4:	460a      	mov	r2, r1
 80018d6:	80fb      	strh	r3, [r7, #6]
 80018d8:	4613      	mov	r3, r2
 80018da:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(myHi2c1, ROM_ADD, address, 2, &data, 4, 10);
 80018dc:	4b09      	ldr	r3, [pc, #36]	; (8001904 <write4ByteEEPROM+0x38>)
 80018de:	6818      	ldr	r0, [r3, #0]
 80018e0:	88fa      	ldrh	r2, [r7, #6]
 80018e2:	230a      	movs	r3, #10
 80018e4:	9302      	str	r3, [sp, #8]
 80018e6:	2304      	movs	r3, #4
 80018e8:	9301      	str	r3, [sp, #4]
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	2302      	movs	r3, #2
 80018f0:	21a0      	movs	r1, #160	; 0xa0
 80018f2:	f002 f91f 	bl	8003b34 <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 80018f6:	2014      	movs	r0, #20
 80018f8:	f001 f92a 	bl	8002b50 <HAL_Delay>
}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000094 	.word	0x20000094

08001908 <read4ByteEEPROM>:

uint32_t read4ByteEEPROM(uint16_t address) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af04      	add	r7, sp, #16
 800190e:	4603      	mov	r3, r0
 8001910:	80fb      	strh	r3, [r7, #6]
	uint32_t result;
	HAL_I2C_Mem_Read(myHi2c1, ROM_ADD, address, 2, &result, 4, 10);
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <read4ByteEEPROM+0x30>)
 8001914:	6818      	ldr	r0, [r3, #0]
 8001916:	88fa      	ldrh	r2, [r7, #6]
 8001918:	230a      	movs	r3, #10
 800191a:	9302      	str	r3, [sp, #8]
 800191c:	2304      	movs	r3, #4
 800191e:	9301      	str	r3, [sp, #4]
 8001920:	f107 030c 	add.w	r3, r7, #12
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	2302      	movs	r3, #2
 8001928:	21a0      	movs	r1, #160	; 0xa0
 800192a:	f002 f9fd 	bl	8003d28 <HAL_I2C_Mem_Read>
	return result;
 800192e:	68fb      	ldr	r3, [r7, #12]
}
 8001930:	4618      	mov	r0, r3
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20000094 	.word	0x20000094

0800193c <timeinit>:

void timeinit() {
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
	if (MagicNumber != read4ByteEEPROM(eeMagicNumberBase)) {
 8001940:	2000      	movs	r0, #0
 8001942:	f7ff ffe1 	bl	8001908 <read4ByteEEPROM>
 8001946:	4603      	mov	r3, r0
 8001948:	4a10      	ldr	r2, [pc, #64]	; (800198c <timeinit+0x50>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d01b      	beq.n	8001986 <timeinit+0x4a>
		//초기 ?��?��
		dateTime.year = 24;
 800194e:	4b10      	ldr	r3, [pc, #64]	; (8001990 <timeinit+0x54>)
 8001950:	2218      	movs	r2, #24
 8001952:	701a      	strb	r2, [r3, #0]
		dateTime.month = 3;
 8001954:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <timeinit+0x54>)
 8001956:	2203      	movs	r2, #3
 8001958:	705a      	strb	r2, [r3, #1]
		dateTime.date = 29;
 800195a:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <timeinit+0x54>)
 800195c:	221d      	movs	r2, #29
 800195e:	709a      	strb	r2, [r3, #2]
		dateTime.hour = 14;
 8001960:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <timeinit+0x54>)
 8001962:	220e      	movs	r2, #14
 8001964:	711a      	strb	r2, [r3, #4]
		dateTime.min = 29;
 8001966:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <timeinit+0x54>)
 8001968:	221d      	movs	r2, #29
 800196a:	715a      	strb	r2, [r3, #5]
		dateTime.sec = 0;
 800196c:	4b08      	ldr	r3, [pc, #32]	; (8001990 <timeinit+0x54>)
 800196e:	2200      	movs	r2, #0
 8001970:	719a      	strb	r2, [r3, #6]
		setRTC(dateTime);
 8001972:	4b07      	ldr	r3, [pc, #28]	; (8001990 <timeinit+0x54>)
 8001974:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001978:	f7ff ff18 	bl	80017ac <setRTC>
		//매직?���?? 기록
		write4ByteEEPROM(eeMagicNumberBase, MagicNumber);
 800197c:	f64a 5114 	movw	r1, #44308	; 0xad14
 8001980:	2000      	movs	r0, #0
 8001982:	f7ff ffa3 	bl	80018cc <write4ByteEEPROM>
	}
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	257fad14 	.word	0x257fad14
 8001990:	20000098 	.word	0x20000098

08001994 <timeLCDprint>:

void timeLCDprint() {
 8001994:	b5b0      	push	{r4, r5, r7, lr}
 8001996:	b0a0      	sub	sp, #128	; 0x80
 8001998:	af04      	add	r7, sp, #16
	dateTime = getRTC();
 800199a:	4c1b      	ldr	r4, [pc, #108]	; (8001a08 <timeLCDprint+0x74>)
 800199c:	463b      	mov	r3, r7
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff ff40 	bl	8001824 <getRTC>
 80019a4:	4622      	mov	r2, r4
 80019a6:	463b      	mov	r3, r7
 80019a8:	6818      	ldr	r0, [r3, #0]
 80019aa:	6010      	str	r0, [r2, #0]
 80019ac:	8899      	ldrh	r1, [r3, #4]
 80019ae:	799b      	ldrb	r3, [r3, #6]
 80019b0:	8091      	strh	r1, [r2, #4]
 80019b2:	7193      	strb	r3, [r2, #6]

	char STR1[100];
	sprintf(STR1, "20%02d-%02d-%02d %02d:%02d\n", dateTime.year, dateTime.month,
 80019b4:	4b14      	ldr	r3, [pc, #80]	; (8001a08 <timeLCDprint+0x74>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	461c      	mov	r4, r3
 80019ba:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <timeLCDprint+0x74>)
 80019bc:	785b      	ldrb	r3, [r3, #1]
 80019be:	461d      	mov	r5, r3
			dateTime.date, dateTime.hour, dateTime.min);
 80019c0:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <timeLCDprint+0x74>)
 80019c2:	789b      	ldrb	r3, [r3, #2]
	sprintf(STR1, "20%02d-%02d-%02d %02d:%02d\n", dateTime.year, dateTime.month,
 80019c4:	461a      	mov	r2, r3
			dateTime.date, dateTime.hour, dateTime.min);
 80019c6:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <timeLCDprint+0x74>)
 80019c8:	791b      	ldrb	r3, [r3, #4]
	sprintf(STR1, "20%02d-%02d-%02d %02d:%02d\n", dateTime.year, dateTime.month,
 80019ca:	4619      	mov	r1, r3
			dateTime.date, dateTime.hour, dateTime.min);
 80019cc:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <timeLCDprint+0x74>)
 80019ce:	795b      	ldrb	r3, [r3, #5]
	sprintf(STR1, "20%02d-%02d-%02d %02d:%02d\n", dateTime.year, dateTime.month,
 80019d0:	f107 000c 	add.w	r0, r7, #12
 80019d4:	9302      	str	r3, [sp, #8]
 80019d6:	9101      	str	r1, [sp, #4]
 80019d8:	9200      	str	r2, [sp, #0]
 80019da:	462b      	mov	r3, r5
 80019dc:	4622      	mov	r2, r4
 80019de:	490b      	ldr	r1, [pc, #44]	; (8001a0c <timeLCDprint+0x78>)
 80019e0:	f006 f9e0 	bl	8007da4 <siprintf>

	I2C_CLCD_GotoXY(0, 0);
 80019e4:	2100      	movs	r1, #0
 80019e6:	2000      	movs	r0, #0
 80019e8:	f7ff fdc4 	bl	8001574 <I2C_CLCD_GotoXY>
	I2C_CLCD_PutStr(STR1);
 80019ec:	f107 030c 	add.w	r3, r7, #12
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff fdfb 	bl	80015ec <I2C_CLCD_PutStr>

	I2C_CLCD_GotoXY(1, 0);
 80019f6:	2100      	movs	r1, #0
 80019f8:	2001      	movs	r0, #1
 80019fa:	f7ff fdbb 	bl	8001574 <I2C_CLCD_GotoXY>
}
 80019fe:	bf00      	nop
 8001a00:	3770      	adds	r7, #112	; 0x70
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bdb0      	pop	{r4, r5, r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000098 	.word	0x20000098
 8001a0c:	08008fb0 	.word	0x08008fb0

08001a10 <initUltraSonic>:
uint8_t IsFirstCapture1 = 0;
uint8_t IsFirstCapture3 = 0;
uint32_t Distance1 = 0;
uint32_t Distance3 = 0;

void initUltraSonic(TIM_HandleTypeDef *inHtim1, TIM_HandleTypeDef *inHtim11) {
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
	myHtim1 = inHtim1;
 8001a1a:	4a06      	ldr	r2, [pc, #24]	; (8001a34 <initUltraSonic+0x24>)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6013      	str	r3, [r2, #0]
	myHtim11 = inHtim11;
 8001a20:	4a05      	ldr	r2, [pc, #20]	; (8001a38 <initUltraSonic+0x28>)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	6013      	str	r3, [r2, #0]
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	200000a0 	.word	0x200000a0
 8001a38:	200000a4 	.word	0x200000a4

08001a3c <delayUs>:
void delayUs(uint16_t time) {
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	80fb      	strh	r3, [r7, #6]
	myHtim11->Instance->CNT = 0;
 8001a46:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <delayUs+0x34>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	625a      	str	r2, [r3, #36]	; 0x24
	while (myHtim11->Instance->CNT < time);
 8001a50:	bf00      	nop
 8001a52:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <delayUs+0x34>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a5a:	88fb      	ldrh	r3, [r7, #6]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d3f8      	bcc.n	8001a52 <delayUs+0x16>
}
 8001a60:	bf00      	nop
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	200000a4 	.word	0x200000a4
 8001a74:	00000000 	.word	0x00000000

08001a78 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	7f1b      	ldrb	r3, [r3, #28]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	f040 8082 	bne.w	8001b8e <HAL_TIM_IC_CaptureCallback+0x116>
		if (IsFirstCapture1 == 0) {
 8001a8a:	4b89      	ldr	r3, [pc, #548]	; (8001cb0 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d11a      	bne.n	8001ac8 <HAL_TIM_IC_CaptureCallback+0x50>
			IC_Val1_Channel1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001a92:	2100      	movs	r1, #0
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f004 fb13 	bl	80060c0 <HAL_TIM_ReadCapturedValue>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	4a85      	ldr	r2, [pc, #532]	; (8001cb4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001a9e:	6013      	str	r3, [r2, #0]
			IsFirstCapture1 = 1;
 8001aa0:	4b83      	ldr	r3, [pc, #524]	; (8001cb0 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6a1a      	ldr	r2, [r3, #32]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 020a 	bic.w	r2, r2, #10
 8001ab4:	621a      	str	r2, [r3, #32]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6a1a      	ldr	r2, [r3, #32]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f042 0202 	orr.w	r2, r2, #2
 8001ac4:	621a      	str	r2, [r3, #32]
 8001ac6:	e062      	b.n	8001b8e <HAL_TIM_IC_CaptureCallback+0x116>
					TIM_INPUTCHANNELPOLARITY_FALLING);
		} else if (IsFirstCapture1 == 1) {
 8001ac8:	4b79      	ldr	r3, [pc, #484]	; (8001cb0 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d15e      	bne.n	8001b8e <HAL_TIM_IC_CaptureCallback+0x116>
			IC_Val2_Channel1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f004 faf4 	bl	80060c0 <HAL_TIM_ReadCapturedValue>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	4a77      	ldr	r2, [pc, #476]	; (8001cb8 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001adc:	6013      	str	r3, [r2, #0]
			htim->Instance->CNT = 0;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2_Channel1 > IC_Val1_Channel1)
 8001ae6:	4b74      	ldr	r3, [pc, #464]	; (8001cb8 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	4b72      	ldr	r3, [pc, #456]	; (8001cb4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d907      	bls.n	8001b02 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference1 = IC_Val2_Channel1 - IC_Val1_Channel1;
 8001af2:	4b71      	ldr	r3, [pc, #452]	; (8001cb8 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	4b6f      	ldr	r3, [pc, #444]	; (8001cb4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	4a6f      	ldr	r2, [pc, #444]	; (8001cbc <HAL_TIM_IC_CaptureCallback+0x244>)
 8001afe:	6013      	str	r3, [r2, #0]
 8001b00:	e00f      	b.n	8001b22 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1_Channel1 > IC_Val2_Channel1)
 8001b02:	4b6c      	ldr	r3, [pc, #432]	; (8001cb4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	4b6c      	ldr	r3, [pc, #432]	; (8001cb8 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d909      	bls.n	8001b22 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference1 = (0xffff - IC_Val1_Channel1) + IC_Val2_Channel1;
 8001b0e:	4b6a      	ldr	r3, [pc, #424]	; (8001cb8 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	4b68      	ldr	r3, [pc, #416]	; (8001cb4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001b1c:	33ff      	adds	r3, #255	; 0xff
 8001b1e:	4a67      	ldr	r2, [pc, #412]	; (8001cbc <HAL_TIM_IC_CaptureCallback+0x244>)
 8001b20:	6013      	str	r3, [r2, #0]
			Distance1 = Difference1 * 0.034 / 2;
 8001b22:	4b66      	ldr	r3, [pc, #408]	; (8001cbc <HAL_TIM_IC_CaptureCallback+0x244>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7fe fcec 	bl	8000504 <__aeabi_ui2d>
 8001b2c:	a35e      	add	r3, pc, #376	; (adr r3, 8001ca8 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b32:	f7fe fd61 	bl	80005f8 <__aeabi_dmul>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b46:	f7fe fe81 	bl	800084c <__aeabi_ddiv>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	4610      	mov	r0, r2
 8001b50:	4619      	mov	r1, r3
 8001b52:	f7fe ff63 	bl	8000a1c <__aeabi_d2uiz>
 8001b56:	4603      	mov	r3, r0
 8001b58:	4a59      	ldr	r2, [pc, #356]	; (8001cc0 <HAL_TIM_IC_CaptureCallback+0x248>)
 8001b5a:	6013      	str	r3, [r2, #0]
			IsFirstCapture1 = 0;
 8001b5c:	4b54      	ldr	r3, [pc, #336]	; (8001cb0 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6a1a      	ldr	r2, [r3, #32]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 020a 	bic.w	r2, r2, #10
 8001b70:	621a      	str	r2, [r3, #32]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	6a12      	ldr	r2, [r2, #32]
 8001b7c:	621a      	str	r2, [r3, #32]
					TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68da      	ldr	r2, [r3, #12]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f022 0202 	bic.w	r2, r2, #2
 8001b8c:	60da      	str	r2, [r3, #12]
		}
	}
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	7f1b      	ldrb	r3, [r3, #28]
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	f040 8082 	bne.w	8001c9c <HAL_TIM_IC_CaptureCallback+0x224>
		if (IsFirstCapture3 == 0) {
 8001b98:	4b4a      	ldr	r3, [pc, #296]	; (8001cc4 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d11a      	bne.n	8001bd6 <HAL_TIM_IC_CaptureCallback+0x15e>
			IC_Val1_Channel3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8001ba0:	2108      	movs	r1, #8
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f004 fa8c 	bl	80060c0 <HAL_TIM_ReadCapturedValue>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	4a47      	ldr	r2, [pc, #284]	; (8001cc8 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001bac:	6013      	str	r3, [r2, #0]
			IsFirstCapture3 = 1;
 8001bae:	4b45      	ldr	r3, [pc, #276]	; (8001cc4 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3,
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6a1a      	ldr	r2, [r3, #32]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8001bc2:	621a      	str	r2, [r3, #32]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6a1a      	ldr	r2, [r3, #32]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bd2:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3,
					TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
		}
	}
}
 8001bd4:	e062      	b.n	8001c9c <HAL_TIM_IC_CaptureCallback+0x224>
		} else if (IsFirstCapture3 == 1) {
 8001bd6:	4b3b      	ldr	r3, [pc, #236]	; (8001cc4 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d15e      	bne.n	8001c9c <HAL_TIM_IC_CaptureCallback+0x224>
			IC_Val2_Channel3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8001bde:	2108      	movs	r1, #8
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f004 fa6d 	bl	80060c0 <HAL_TIM_ReadCapturedValue>
 8001be6:	4603      	mov	r3, r0
 8001be8:	4a38      	ldr	r2, [pc, #224]	; (8001ccc <HAL_TIM_IC_CaptureCallback+0x254>)
 8001bea:	6013      	str	r3, [r2, #0]
			htim->Instance->CNT = 0;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2_Channel3 > IC_Val1_Channel3)
 8001bf4:	4b35      	ldr	r3, [pc, #212]	; (8001ccc <HAL_TIM_IC_CaptureCallback+0x254>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	4b33      	ldr	r3, [pc, #204]	; (8001cc8 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d907      	bls.n	8001c10 <HAL_TIM_IC_CaptureCallback+0x198>
				Difference3 = IC_Val2_Channel3 - IC_Val1_Channel3;
 8001c00:	4b32      	ldr	r3, [pc, #200]	; (8001ccc <HAL_TIM_IC_CaptureCallback+0x254>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4b30      	ldr	r3, [pc, #192]	; (8001cc8 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	4a31      	ldr	r2, [pc, #196]	; (8001cd0 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	e00f      	b.n	8001c30 <HAL_TIM_IC_CaptureCallback+0x1b8>
			else if (IC_Val1_Channel3 > IC_Val2_Channel3)
 8001c10:	4b2d      	ldr	r3, [pc, #180]	; (8001cc8 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	4b2d      	ldr	r3, [pc, #180]	; (8001ccc <HAL_TIM_IC_CaptureCallback+0x254>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d909      	bls.n	8001c30 <HAL_TIM_IC_CaptureCallback+0x1b8>
				Difference3 = (0xffff - IC_Val1_Channel3) + IC_Val2_Channel3;
 8001c1c:	4b2b      	ldr	r3, [pc, #172]	; (8001ccc <HAL_TIM_IC_CaptureCallback+0x254>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4b29      	ldr	r3, [pc, #164]	; (8001cc8 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001c2a:	33ff      	adds	r3, #255	; 0xff
 8001c2c:	4a28      	ldr	r2, [pc, #160]	; (8001cd0 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001c2e:	6013      	str	r3, [r2, #0]
			Distance3 = Difference3 * 0.034 / 2;
 8001c30:	4b27      	ldr	r3, [pc, #156]	; (8001cd0 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7fe fc65 	bl	8000504 <__aeabi_ui2d>
 8001c3a:	a31b      	add	r3, pc, #108	; (adr r3, 8001ca8 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c40:	f7fe fcda 	bl	80005f8 <__aeabi_dmul>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c54:	f7fe fdfa 	bl	800084c <__aeabi_ddiv>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	4610      	mov	r0, r2
 8001c5e:	4619      	mov	r1, r3
 8001c60:	f7fe fedc 	bl	8000a1c <__aeabi_d2uiz>
 8001c64:	4603      	mov	r3, r0
 8001c66:	4a1b      	ldr	r2, [pc, #108]	; (8001cd4 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001c68:	6013      	str	r3, [r2, #0]
			IsFirstCapture3 = 0;
 8001c6a:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3,
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6a1a      	ldr	r2, [r3, #32]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8001c7e:	621a      	str	r2, [r3, #32]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6a12      	ldr	r2, [r2, #32]
 8001c8a:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68da      	ldr	r2, [r3, #12]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f022 0208 	bic.w	r2, r2, #8
 8001c9a:	60da      	str	r2, [r3, #12]
}
 8001c9c:	bf00      	nop
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	f3af 8000 	nop.w
 8001ca8:	b020c49c 	.word	0xb020c49c
 8001cac:	3fa16872 	.word	0x3fa16872
 8001cb0:	200000c0 	.word	0x200000c0
 8001cb4:	200000a8 	.word	0x200000a8
 8001cb8:	200000ac 	.word	0x200000ac
 8001cbc:	200000b8 	.word	0x200000b8
 8001cc0:	200000c4 	.word	0x200000c4
 8001cc4:	200000c1 	.word	0x200000c1
 8001cc8:	200000b0 	.word	0x200000b0
 8001ccc:	200000b4 	.word	0x200000b4
 8001cd0:	200000bc 	.word	0x200000bc
 8001cd4:	200000c8 	.word	0x200000c8

08001cd8 <getDistance>:

uint32_t getDistance() {
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
	//trigger
	HAL_GPIO_WritePin(trigger_GPIO_Port, trigger_Pin, 1);
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ce2:	480d      	ldr	r0, [pc, #52]	; (8001d18 <getDistance+0x40>)
 8001ce4:	f001 fa98 	bl	8003218 <HAL_GPIO_WritePin>
	delayUs(10);
 8001ce8:	200a      	movs	r0, #10
 8001cea:	f7ff fea7 	bl	8001a3c <delayUs>
	HAL_GPIO_WritePin(trigger_GPIO_Port, trigger_Pin, 0);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cf4:	4808      	ldr	r0, [pc, #32]	; (8001d18 <getDistance+0x40>)
 8001cf6:	f001 fa8f 	bl	8003218 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(myHtim1, TIM_IT_CC1);
 8001cfa:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <getDistance+0x44>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68da      	ldr	r2, [r3, #12]
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <getDistance+0x44>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f042 0202 	orr.w	r2, r2, #2
 8001d0c:	60da      	str	r2, [r3, #12]
	return Distance1;
 8001d0e:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <getDistance+0x48>)
 8001d10:	681b      	ldr	r3, [r3, #0]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40020000 	.word	0x40020000
 8001d1c:	200000a0 	.word	0x200000a0
 8001d20:	200000c4 	.word	0x200000c4

08001d24 <getDistance2>:
uint32_t getDistance2() {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
	//trigger
	HAL_GPIO_WritePin(trigger2_GPIO_Port, trigger2_Pin, 1);
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d2e:	480d      	ldr	r0, [pc, #52]	; (8001d64 <getDistance2+0x40>)
 8001d30:	f001 fa72 	bl	8003218 <HAL_GPIO_WritePin>
	delayUs(10);
 8001d34:	200a      	movs	r0, #10
 8001d36:	f7ff fe81 	bl	8001a3c <delayUs>
	HAL_GPIO_WritePin(trigger2_GPIO_Port, trigger2_Pin, 0);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d40:	4808      	ldr	r0, [pc, #32]	; (8001d64 <getDistance2+0x40>)
 8001d42:	f001 fa69 	bl	8003218 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(myHtim1, TIM_IT_CC3);
 8001d46:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <getDistance2+0x44>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68da      	ldr	r2, [r3, #12]
 8001d4e:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <getDistance2+0x44>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f042 0208 	orr.w	r2, r2, #8
 8001d58:	60da      	str	r2, [r3, #12]
	return Distance3;
 8001d5a:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <getDistance2+0x48>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40020000 	.word	0x40020000
 8001d68:	200000a0 	.word	0x200000a0
 8001d6c:	200000c8 	.word	0x200000c8

08001d70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d74:	f000 fe7a 	bl	8002a6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d78:	f000 f852 	bl	8001e20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d7c:	f000 fa56 	bl	800222c <MX_GPIO_Init>
  MX_TIM1_Init();
 8001d80:	f000 f912 	bl	8001fa8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001d84:	f000 f98e 	bl	80020a4 <MX_TIM3_Init>
  MX_TIM11_Init();
 8001d88:	f000 fa02 	bl	8002190 <MX_TIM11_Init>
  MX_USART2_UART_Init();
 8001d8c:	f000 fa24 	bl	80021d8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001d90:	f000 f8ae 	bl	8001ef0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001d94:	f000 f8da 	bl	8001f4c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
	initUart(&huart2);
 8001d98:	481b      	ldr	r0, [pc, #108]	; (8001e08 <main+0x98>)
 8001d9a:	f000 fd85 	bl	80028a8 <initUart>
	initMotor(&htim3);
 8001d9e:	481b      	ldr	r0, [pc, #108]	; (8001e0c <main+0x9c>)
 8001da0:	f7ff fc3a 	bl	8001618 <initMotor>
	initUltraSonic(&htim1, &htim11);
 8001da4:	491a      	ldr	r1, [pc, #104]	; (8001e10 <main+0xa0>)
 8001da6:	481b      	ldr	r0, [pc, #108]	; (8001e14 <main+0xa4>)
 8001da8:	f7ff fe32 	bl	8001a10 <initUltraSonic>
	initRTC(&hi2c1);
 8001dac:	481a      	ldr	r0, [pc, #104]	; (8001e18 <main+0xa8>)
 8001dae:	f7ff fcab 	bl	8001708 <initRTC>
	HAL_TIM_Base_Start(&htim11);
 8001db2:	4817      	ldr	r0, [pc, #92]	; (8001e10 <main+0xa0>)
 8001db4:	f003 fb96 	bl	80054e4 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001db8:	2100      	movs	r1, #0
 8001dba:	4816      	ldr	r0, [pc, #88]	; (8001e14 <main+0xa4>)
 8001dbc:	f003 fd50 	bl	8005860 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 8001dc0:	2108      	movs	r1, #8
 8001dc2:	4814      	ldr	r0, [pc, #80]	; (8001e14 <main+0xa4>)
 8001dc4:	f003 fd4c 	bl	8005860 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001dc8:	2100      	movs	r1, #0
 8001dca:	4810      	ldr	r0, [pc, #64]	; (8001e0c <main+0x9c>)
 8001dcc:	f003 fc3e 	bl	800564c <HAL_TIM_PWM_Start>

	timeinit();
 8001dd0:	f7ff fdb4 	bl	800193c <timeinit>

	I2C_CLCD_init();
 8001dd4:	f7ff fba0 	bl	8001518 <I2C_CLCD_init>
	I2C_CLCD_GotoXY(0, 0);
 8001dd8:	2100      	movs	r1, #0
 8001dda:	2000      	movs	r0, #0
 8001ddc:	f7ff fbca 	bl	8001574 <I2C_CLCD_GotoXY>
	I2C_CLCD_PutStr("               ");
 8001de0:	480e      	ldr	r0, [pc, #56]	; (8001e1c <main+0xac>)
 8001de2:	f7ff fc03 	bl	80015ec <I2C_CLCD_PutStr>
	I2C_CLCD_GotoXY(0, 1);
 8001de6:	2101      	movs	r1, #1
 8001de8:	2000      	movs	r0, #0
 8001dea:	f7ff fbc3 	bl	8001574 <I2C_CLCD_GotoXY>
	I2C_CLCD_PutStr("               ");
 8001dee:	480b      	ldr	r0, [pc, #44]	; (8001e1c <main+0xac>)
 8001df0:	f7ff fbfc 	bl	80015ec <I2C_CLCD_PutStr>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		timeLCDprint();
 8001df4:	f7ff fdce 	bl	8001994 <timeLCDprint>

		EscalatorSpeedEventCheck();
 8001df8:	f7fe ffc2 	bl	8000d80 <EscalatorSpeedEventCheck>
		EscalatorStateCheck();
 8001dfc:	f7ff f80c 	bl	8000e18 <EscalatorStateCheck>
		EscalatorRUN();
 8001e00:	f7ff f81c 	bl	8000e3c <EscalatorRUN>
	while (1) {
 8001e04:	e7f6      	b.n	8001df4 <main+0x84>
 8001e06:	bf00      	nop
 8001e08:	2000024c 	.word	0x2000024c
 8001e0c:	200001bc 	.word	0x200001bc
 8001e10:	20000204 	.word	0x20000204
 8001e14:	20000174 	.word	0x20000174
 8001e18:	200000cc 	.word	0x200000cc
 8001e1c:	08008fcc 	.word	0x08008fcc

08001e20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b094      	sub	sp, #80	; 0x50
 8001e24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e26:	f107 0320 	add.w	r3, r7, #32
 8001e2a:	2230      	movs	r2, #48	; 0x30
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f006 f8b0 	bl	8007f94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e34:	f107 030c 	add.w	r3, r7, #12
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	60da      	str	r2, [r3, #12]
 8001e42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e44:	2300      	movs	r3, #0
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	4b27      	ldr	r3, [pc, #156]	; (8001ee8 <SystemClock_Config+0xc8>)
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	4a26      	ldr	r2, [pc, #152]	; (8001ee8 <SystemClock_Config+0xc8>)
 8001e4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e52:	6413      	str	r3, [r2, #64]	; 0x40
 8001e54:	4b24      	ldr	r3, [pc, #144]	; (8001ee8 <SystemClock_Config+0xc8>)
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e60:	2300      	movs	r3, #0
 8001e62:	607b      	str	r3, [r7, #4]
 8001e64:	4b21      	ldr	r3, [pc, #132]	; (8001eec <SystemClock_Config+0xcc>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a20      	ldr	r2, [pc, #128]	; (8001eec <SystemClock_Config+0xcc>)
 8001e6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e6e:	6013      	str	r3, [r2, #0]
 8001e70:	4b1e      	ldr	r3, [pc, #120]	; (8001eec <SystemClock_Config+0xcc>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e78:	607b      	str	r3, [r7, #4]
 8001e7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e80:	2301      	movs	r3, #1
 8001e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e84:	2310      	movs	r3, #16
 8001e86:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e90:	2308      	movs	r3, #8
 8001e92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001e94:	2364      	movs	r3, #100	; 0x64
 8001e96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e9c:	2304      	movs	r3, #4
 8001e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ea0:	f107 0320 	add.w	r3, r7, #32
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f002 fe75 	bl	8004b94 <HAL_RCC_OscConfig>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001eb0:	f000 fa30 	bl	8002314 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eb4:	230f      	movs	r3, #15
 8001eb6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ec0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001eca:	f107 030c 	add.w	r3, r7, #12
 8001ece:	2103      	movs	r1, #3
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f003 f8d7 	bl	8005084 <HAL_RCC_ClockConfig>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001edc:	f000 fa1a 	bl	8002314 <Error_Handler>
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	3750      	adds	r7, #80	; 0x50
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40007000 	.word	0x40007000

08001ef0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ef4:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <MX_I2C1_Init+0x50>)
 8001ef6:	4a13      	ldr	r2, [pc, #76]	; (8001f44 <MX_I2C1_Init+0x54>)
 8001ef8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001efa:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <MX_I2C1_Init+0x50>)
 8001efc:	4a12      	ldr	r2, [pc, #72]	; (8001f48 <MX_I2C1_Init+0x58>)
 8001efe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f00:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <MX_I2C1_Init+0x50>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f06:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <MX_I2C1_Init+0x50>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <MX_I2C1_Init+0x50>)
 8001f0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f12:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f14:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <MX_I2C1_Init+0x50>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f1a:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <MX_I2C1_Init+0x50>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f20:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <MX_I2C1_Init+0x50>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f26:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <MX_I2C1_Init+0x50>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f2c:	4804      	ldr	r0, [pc, #16]	; (8001f40 <MX_I2C1_Init+0x50>)
 8001f2e:	f001 f98d 	bl	800324c <HAL_I2C_Init>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f38:	f000 f9ec 	bl	8002314 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f3c:	bf00      	nop
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	200000cc 	.word	0x200000cc
 8001f44:	40005400 	.word	0x40005400
 8001f48:	000186a0 	.word	0x000186a0

08001f4c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001f50:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <MX_I2C2_Init+0x50>)
 8001f52:	4a13      	ldr	r2, [pc, #76]	; (8001fa0 <MX_I2C2_Init+0x54>)
 8001f54:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001f56:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <MX_I2C2_Init+0x50>)
 8001f58:	4a12      	ldr	r2, [pc, #72]	; (8001fa4 <MX_I2C2_Init+0x58>)
 8001f5a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f5c:	4b0f      	ldr	r3, [pc, #60]	; (8001f9c <MX_I2C2_Init+0x50>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001f62:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <MX_I2C2_Init+0x50>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f68:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <MX_I2C2_Init+0x50>)
 8001f6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f6e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f70:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <MX_I2C2_Init+0x50>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001f76:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <MX_I2C2_Init+0x50>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f7c:	4b07      	ldr	r3, [pc, #28]	; (8001f9c <MX_I2C2_Init+0x50>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f82:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <MX_I2C2_Init+0x50>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001f88:	4804      	ldr	r0, [pc, #16]	; (8001f9c <MX_I2C2_Init+0x50>)
 8001f8a:	f001 f95f 	bl	800324c <HAL_I2C_Init>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001f94:	f000 f9be 	bl	8002314 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001f98:	bf00      	nop
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	20000120 	.word	0x20000120
 8001fa0:	40005800 	.word	0x40005800
 8001fa4:	000186a0 	.word	0x000186a0

08001fa8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	; 0x28
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fae:	f107 0318 	add.w	r3, r7, #24
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	605a      	str	r2, [r3, #4]
 8001fb8:	609a      	str	r2, [r3, #8]
 8001fba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fbc:	f107 0310 	add.w	r3, r7, #16
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001fc6:	463b      	mov	r3, r7
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fd2:	4b32      	ldr	r3, [pc, #200]	; (800209c <MX_TIM1_Init+0xf4>)
 8001fd4:	4a32      	ldr	r2, [pc, #200]	; (80020a0 <MX_TIM1_Init+0xf8>)
 8001fd6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8001fd8:	4b30      	ldr	r3, [pc, #192]	; (800209c <MX_TIM1_Init+0xf4>)
 8001fda:	2263      	movs	r2, #99	; 0x63
 8001fdc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fde:	4b2f      	ldr	r3, [pc, #188]	; (800209c <MX_TIM1_Init+0xf4>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001fe4:	4b2d      	ldr	r3, [pc, #180]	; (800209c <MX_TIM1_Init+0xf4>)
 8001fe6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fec:	4b2b      	ldr	r3, [pc, #172]	; (800209c <MX_TIM1_Init+0xf4>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ff2:	4b2a      	ldr	r3, [pc, #168]	; (800209c <MX_TIM1_Init+0xf4>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ff8:	4b28      	ldr	r3, [pc, #160]	; (800209c <MX_TIM1_Init+0xf4>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ffe:	4827      	ldr	r0, [pc, #156]	; (800209c <MX_TIM1_Init+0xf4>)
 8002000:	f003 fa20 	bl	8005444 <HAL_TIM_Base_Init>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 800200a:	f000 f983 	bl	8002314 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800200e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002012:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002014:	f107 0318 	add.w	r3, r7, #24
 8002018:	4619      	mov	r1, r3
 800201a:	4820      	ldr	r0, [pc, #128]	; (800209c <MX_TIM1_Init+0xf4>)
 800201c:	f003 ff88 	bl	8005f30 <HAL_TIM_ConfigClockSource>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002026:	f000 f975 	bl	8002314 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800202a:	481c      	ldr	r0, [pc, #112]	; (800209c <MX_TIM1_Init+0xf4>)
 800202c:	f003 fbbe 	bl	80057ac <HAL_TIM_IC_Init>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002036:	f000 f96d 	bl	8002314 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800203a:	2300      	movs	r3, #0
 800203c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002042:	f107 0310 	add.w	r3, r7, #16
 8002046:	4619      	mov	r1, r3
 8002048:	4814      	ldr	r0, [pc, #80]	; (800209c <MX_TIM1_Init+0xf4>)
 800204a:	f004 fc9b 	bl	8006984 <HAL_TIMEx_MasterConfigSynchronization>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8002054:	f000 f95e 	bl	8002314 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002058:	2300      	movs	r3, #0
 800205a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800205c:	2301      	movs	r3, #1
 800205e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002060:	2300      	movs	r3, #0
 8002062:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002068:	463b      	mov	r3, r7
 800206a:	2200      	movs	r2, #0
 800206c:	4619      	mov	r1, r3
 800206e:	480b      	ldr	r0, [pc, #44]	; (800209c <MX_TIM1_Init+0xf4>)
 8002070:	f003 fe00 	bl	8005c74 <HAL_TIM_IC_ConfigChannel>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800207a:	f000 f94b 	bl	8002314 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800207e:	463b      	mov	r3, r7
 8002080:	2208      	movs	r2, #8
 8002082:	4619      	mov	r1, r3
 8002084:	4805      	ldr	r0, [pc, #20]	; (800209c <MX_TIM1_Init+0xf4>)
 8002086:	f003 fdf5 	bl	8005c74 <HAL_TIM_IC_ConfigChannel>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8002090:	f000 f940 	bl	8002314 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002094:	bf00      	nop
 8002096:	3728      	adds	r7, #40	; 0x28
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20000174 	.word	0x20000174
 80020a0:	40010000 	.word	0x40010000

080020a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08e      	sub	sp, #56	; 0x38
 80020a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	605a      	str	r2, [r3, #4]
 80020b4:	609a      	str	r2, [r3, #8]
 80020b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020b8:	f107 0320 	add.w	r3, r7, #32
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020c2:	1d3b      	adds	r3, r7, #4
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	60da      	str	r2, [r3, #12]
 80020ce:	611a      	str	r2, [r3, #16]
 80020d0:	615a      	str	r2, [r3, #20]
 80020d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020d4:	4b2c      	ldr	r3, [pc, #176]	; (8002188 <MX_TIM3_Init+0xe4>)
 80020d6:	4a2d      	ldr	r2, [pc, #180]	; (800218c <MX_TIM3_Init+0xe8>)
 80020d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2-1;
 80020da:	4b2b      	ldr	r3, [pc, #172]	; (8002188 <MX_TIM3_Init+0xe4>)
 80020dc:	2201      	movs	r2, #1
 80020de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020e0:	4b29      	ldr	r3, [pc, #164]	; (8002188 <MX_TIM3_Init+0xe4>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80020e6:	4b28      	ldr	r3, [pc, #160]	; (8002188 <MX_TIM3_Init+0xe4>)
 80020e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ee:	4b26      	ldr	r3, [pc, #152]	; (8002188 <MX_TIM3_Init+0xe4>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020f4:	4b24      	ldr	r3, [pc, #144]	; (8002188 <MX_TIM3_Init+0xe4>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020fa:	4823      	ldr	r0, [pc, #140]	; (8002188 <MX_TIM3_Init+0xe4>)
 80020fc:	f003 f9a2 	bl	8005444 <HAL_TIM_Base_Init>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002106:	f000 f905 	bl	8002314 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800210a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800210e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002110:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002114:	4619      	mov	r1, r3
 8002116:	481c      	ldr	r0, [pc, #112]	; (8002188 <MX_TIM3_Init+0xe4>)
 8002118:	f003 ff0a 	bl	8005f30 <HAL_TIM_ConfigClockSource>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002122:	f000 f8f7 	bl	8002314 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002126:	4818      	ldr	r0, [pc, #96]	; (8002188 <MX_TIM3_Init+0xe4>)
 8002128:	f003 fa36 	bl	8005598 <HAL_TIM_PWM_Init>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002132:	f000 f8ef 	bl	8002314 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002136:	2300      	movs	r3, #0
 8002138:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800213a:	2300      	movs	r3, #0
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800213e:	f107 0320 	add.w	r3, r7, #32
 8002142:	4619      	mov	r1, r3
 8002144:	4810      	ldr	r0, [pc, #64]	; (8002188 <MX_TIM3_Init+0xe4>)
 8002146:	f004 fc1d 	bl	8006984 <HAL_TIMEx_MasterConfigSynchronization>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002150:	f000 f8e0 	bl	8002314 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002154:	2360      	movs	r3, #96	; 0x60
 8002156:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002158:	2300      	movs	r3, #0
 800215a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800215c:	2300      	movs	r3, #0
 800215e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002164:	1d3b      	adds	r3, r7, #4
 8002166:	2200      	movs	r2, #0
 8002168:	4619      	mov	r1, r3
 800216a:	4807      	ldr	r0, [pc, #28]	; (8002188 <MX_TIM3_Init+0xe4>)
 800216c:	f003 fe1e 	bl	8005dac <HAL_TIM_PWM_ConfigChannel>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002176:	f000 f8cd 	bl	8002314 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800217a:	4803      	ldr	r0, [pc, #12]	; (8002188 <MX_TIM3_Init+0xe4>)
 800217c:	f000 fa18 	bl	80025b0 <HAL_TIM_MspPostInit>

}
 8002180:	bf00      	nop
 8002182:	3738      	adds	r7, #56	; 0x38
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	200001bc 	.word	0x200001bc
 800218c:	40000400 	.word	0x40000400

08002190 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002194:	4b0e      	ldr	r3, [pc, #56]	; (80021d0 <MX_TIM11_Init+0x40>)
 8002196:	4a0f      	ldr	r2, [pc, #60]	; (80021d4 <MX_TIM11_Init+0x44>)
 8002198:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100-1;
 800219a:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <MX_TIM11_Init+0x40>)
 800219c:	2263      	movs	r2, #99	; 0x63
 800219e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a0:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <MX_TIM11_Init+0x40>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80021a6:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <MX_TIM11_Init+0x40>)
 80021a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021ac:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ae:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <MX_TIM11_Init+0x40>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021b4:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <MX_TIM11_Init+0x40>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80021ba:	4805      	ldr	r0, [pc, #20]	; (80021d0 <MX_TIM11_Init+0x40>)
 80021bc:	f003 f942 	bl	8005444 <HAL_TIM_Base_Init>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80021c6:	f000 f8a5 	bl	8002314 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20000204 	.word	0x20000204
 80021d4:	40014800 	.word	0x40014800

080021d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021dc:	4b11      	ldr	r3, [pc, #68]	; (8002224 <MX_USART2_UART_Init+0x4c>)
 80021de:	4a12      	ldr	r2, [pc, #72]	; (8002228 <MX_USART2_UART_Init+0x50>)
 80021e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021e2:	4b10      	ldr	r3, [pc, #64]	; (8002224 <MX_USART2_UART_Init+0x4c>)
 80021e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021ea:	4b0e      	ldr	r3, [pc, #56]	; (8002224 <MX_USART2_UART_Init+0x4c>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021f0:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <MX_USART2_UART_Init+0x4c>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021f6:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <MX_USART2_UART_Init+0x4c>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021fc:	4b09      	ldr	r3, [pc, #36]	; (8002224 <MX_USART2_UART_Init+0x4c>)
 80021fe:	220c      	movs	r2, #12
 8002200:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002202:	4b08      	ldr	r3, [pc, #32]	; (8002224 <MX_USART2_UART_Init+0x4c>)
 8002204:	2200      	movs	r2, #0
 8002206:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002208:	4b06      	ldr	r3, [pc, #24]	; (8002224 <MX_USART2_UART_Init+0x4c>)
 800220a:	2200      	movs	r2, #0
 800220c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800220e:	4805      	ldr	r0, [pc, #20]	; (8002224 <MX_USART2_UART_Init+0x4c>)
 8002210:	f004 fc3a 	bl	8006a88 <HAL_UART_Init>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800221a:	f000 f87b 	bl	8002314 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	2000024c 	.word	0x2000024c
 8002228:	40004400 	.word	0x40004400

0800222c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b088      	sub	sp, #32
 8002230:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002232:	f107 030c 	add.w	r3, r7, #12
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	605a      	str	r2, [r3, #4]
 800223c:	609a      	str	r2, [r3, #8]
 800223e:	60da      	str	r2, [r3, #12]
 8002240:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	60bb      	str	r3, [r7, #8]
 8002246:	4b30      	ldr	r3, [pc, #192]	; (8002308 <MX_GPIO_Init+0xdc>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	4a2f      	ldr	r2, [pc, #188]	; (8002308 <MX_GPIO_Init+0xdc>)
 800224c:	f043 0304 	orr.w	r3, r3, #4
 8002250:	6313      	str	r3, [r2, #48]	; 0x30
 8002252:	4b2d      	ldr	r3, [pc, #180]	; (8002308 <MX_GPIO_Init+0xdc>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	f003 0304 	and.w	r3, r3, #4
 800225a:	60bb      	str	r3, [r7, #8]
 800225c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	607b      	str	r3, [r7, #4]
 8002262:	4b29      	ldr	r3, [pc, #164]	; (8002308 <MX_GPIO_Init+0xdc>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	4a28      	ldr	r2, [pc, #160]	; (8002308 <MX_GPIO_Init+0xdc>)
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	6313      	str	r3, [r2, #48]	; 0x30
 800226e:	4b26      	ldr	r3, [pc, #152]	; (8002308 <MX_GPIO_Init+0xdc>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	607b      	str	r3, [r7, #4]
 8002278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	603b      	str	r3, [r7, #0]
 800227e:	4b22      	ldr	r3, [pc, #136]	; (8002308 <MX_GPIO_Init+0xdc>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	4a21      	ldr	r2, [pc, #132]	; (8002308 <MX_GPIO_Init+0xdc>)
 8002284:	f043 0302 	orr.w	r3, r3, #2
 8002288:	6313      	str	r3, [r2, #48]	; 0x30
 800228a:	4b1f      	ldr	r3, [pc, #124]	; (8002308 <MX_GPIO_Init+0xdc>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	603b      	str	r3, [r7, #0]
 8002294:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, esc_A_Pin|esc_B_Pin, GPIO_PIN_RESET);
 8002296:	2200      	movs	r2, #0
 8002298:	2103      	movs	r1, #3
 800229a:	481c      	ldr	r0, [pc, #112]	; (800230c <MX_GPIO_Init+0xe0>)
 800229c:	f000 ffbc 	bl	8003218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, trigger_Pin|trigger2_Pin, GPIO_PIN_RESET);
 80022a0:	2200      	movs	r2, #0
 80022a2:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 80022a6:	481a      	ldr	r0, [pc, #104]	; (8002310 <MX_GPIO_Init+0xe4>)
 80022a8:	f000 ffb6 	bl	8003218 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : esc_A_Pin esc_B_Pin */
  GPIO_InitStruct.Pin = esc_A_Pin|esc_B_Pin;
 80022ac:	2303      	movs	r3, #3
 80022ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b0:	2301      	movs	r3, #1
 80022b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b8:	2300      	movs	r3, #0
 80022ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022bc:	f107 030c 	add.w	r3, r7, #12
 80022c0:	4619      	mov	r1, r3
 80022c2:	4812      	ldr	r0, [pc, #72]	; (800230c <MX_GPIO_Init+0xe0>)
 80022c4:	f000 fe0c 	bl	8002ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : trigger_Pin trigger2_Pin */
  GPIO_InitStruct.Pin = trigger_Pin|trigger2_Pin;
 80022c8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80022cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ce:	2301      	movs	r3, #1
 80022d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d6:	2300      	movs	r3, #0
 80022d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022da:	f107 030c 	add.w	r3, r7, #12
 80022de:	4619      	mov	r1, r3
 80022e0:	480b      	ldr	r0, [pc, #44]	; (8002310 <MX_GPIO_Init+0xe4>)
 80022e2:	f000 fdfd 	bl	8002ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : slow_Pin fast_Pin */
  GPIO_InitStruct.Pin = slow_Pin|fast_Pin;
 80022e6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80022ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022ec:	2300      	movs	r3, #0
 80022ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022f0:	2301      	movs	r3, #1
 80022f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022f4:	f107 030c 	add.w	r3, r7, #12
 80022f8:	4619      	mov	r1, r3
 80022fa:	4804      	ldr	r0, [pc, #16]	; (800230c <MX_GPIO_Init+0xe0>)
 80022fc:	f000 fdf0 	bl	8002ee0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002300:	bf00      	nop
 8002302:	3720      	adds	r7, #32
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40023800 	.word	0x40023800
 800230c:	40020800 	.word	0x40020800
 8002310:	40020000 	.word	0x40020000

08002314 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002318:	b672      	cpsid	i
}
 800231a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800231c:	e7fe      	b.n	800231c <Error_Handler+0x8>
	...

08002320 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	607b      	str	r3, [r7, #4]
 800232a:	4b10      	ldr	r3, [pc, #64]	; (800236c <HAL_MspInit+0x4c>)
 800232c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232e:	4a0f      	ldr	r2, [pc, #60]	; (800236c <HAL_MspInit+0x4c>)
 8002330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002334:	6453      	str	r3, [r2, #68]	; 0x44
 8002336:	4b0d      	ldr	r3, [pc, #52]	; (800236c <HAL_MspInit+0x4c>)
 8002338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800233e:	607b      	str	r3, [r7, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	603b      	str	r3, [r7, #0]
 8002346:	4b09      	ldr	r3, [pc, #36]	; (800236c <HAL_MspInit+0x4c>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	4a08      	ldr	r2, [pc, #32]	; (800236c <HAL_MspInit+0x4c>)
 800234c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002350:	6413      	str	r3, [r2, #64]	; 0x40
 8002352:	4b06      	ldr	r3, [pc, #24]	; (800236c <HAL_MspInit+0x4c>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235a:	603b      	str	r3, [r7, #0]
 800235c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	40023800 	.word	0x40023800

08002370 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b08c      	sub	sp, #48	; 0x30
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002378:	f107 031c 	add.w	r3, r7, #28
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	60da      	str	r2, [r3, #12]
 8002386:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a3a      	ldr	r2, [pc, #232]	; (8002478 <HAL_I2C_MspInit+0x108>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d12c      	bne.n	80023ec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	61bb      	str	r3, [r7, #24]
 8002396:	4b39      	ldr	r3, [pc, #228]	; (800247c <HAL_I2C_MspInit+0x10c>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	4a38      	ldr	r2, [pc, #224]	; (800247c <HAL_I2C_MspInit+0x10c>)
 800239c:	f043 0302 	orr.w	r3, r3, #2
 80023a0:	6313      	str	r3, [r2, #48]	; 0x30
 80023a2:	4b36      	ldr	r3, [pc, #216]	; (800247c <HAL_I2C_MspInit+0x10c>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	61bb      	str	r3, [r7, #24]
 80023ac:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023ae:	23c0      	movs	r3, #192	; 0xc0
 80023b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023b2:	2312      	movs	r3, #18
 80023b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023b6:	2301      	movs	r3, #1
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ba:	2303      	movs	r3, #3
 80023bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023be:	2304      	movs	r3, #4
 80023c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c2:	f107 031c 	add.w	r3, r7, #28
 80023c6:	4619      	mov	r1, r3
 80023c8:	482d      	ldr	r0, [pc, #180]	; (8002480 <HAL_I2C_MspInit+0x110>)
 80023ca:	f000 fd89 	bl	8002ee0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]
 80023d2:	4b2a      	ldr	r3, [pc, #168]	; (800247c <HAL_I2C_MspInit+0x10c>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	4a29      	ldr	r2, [pc, #164]	; (800247c <HAL_I2C_MspInit+0x10c>)
 80023d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023dc:	6413      	str	r3, [r2, #64]	; 0x40
 80023de:	4b27      	ldr	r3, [pc, #156]	; (800247c <HAL_I2C_MspInit+0x10c>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023e6:	617b      	str	r3, [r7, #20]
 80023e8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80023ea:	e041      	b.n	8002470 <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a24      	ldr	r2, [pc, #144]	; (8002484 <HAL_I2C_MspInit+0x114>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d13c      	bne.n	8002470 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	613b      	str	r3, [r7, #16]
 80023fa:	4b20      	ldr	r3, [pc, #128]	; (800247c <HAL_I2C_MspInit+0x10c>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	4a1f      	ldr	r2, [pc, #124]	; (800247c <HAL_I2C_MspInit+0x10c>)
 8002400:	f043 0302 	orr.w	r3, r3, #2
 8002404:	6313      	str	r3, [r2, #48]	; 0x30
 8002406:	4b1d      	ldr	r3, [pc, #116]	; (800247c <HAL_I2C_MspInit+0x10c>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	613b      	str	r3, [r7, #16]
 8002410:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002418:	2312      	movs	r3, #18
 800241a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800241c:	2301      	movs	r3, #1
 800241e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002420:	2303      	movs	r3, #3
 8002422:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002424:	2304      	movs	r3, #4
 8002426:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002428:	f107 031c 	add.w	r3, r7, #28
 800242c:	4619      	mov	r1, r3
 800242e:	4814      	ldr	r0, [pc, #80]	; (8002480 <HAL_I2C_MspInit+0x110>)
 8002430:	f000 fd56 	bl	8002ee0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002434:	2308      	movs	r3, #8
 8002436:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002438:	2312      	movs	r3, #18
 800243a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800243c:	2301      	movs	r3, #1
 800243e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002440:	2303      	movs	r3, #3
 8002442:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002444:	2309      	movs	r3, #9
 8002446:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002448:	f107 031c 	add.w	r3, r7, #28
 800244c:	4619      	mov	r1, r3
 800244e:	480c      	ldr	r0, [pc, #48]	; (8002480 <HAL_I2C_MspInit+0x110>)
 8002450:	f000 fd46 	bl	8002ee0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	4b08      	ldr	r3, [pc, #32]	; (800247c <HAL_I2C_MspInit+0x10c>)
 800245a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245c:	4a07      	ldr	r2, [pc, #28]	; (800247c <HAL_I2C_MspInit+0x10c>)
 800245e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002462:	6413      	str	r3, [r2, #64]	; 0x40
 8002464:	4b05      	ldr	r3, [pc, #20]	; (800247c <HAL_I2C_MspInit+0x10c>)
 8002466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002468:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	68fb      	ldr	r3, [r7, #12]
}
 8002470:	bf00      	nop
 8002472:	3730      	adds	r7, #48	; 0x30
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40005400 	.word	0x40005400
 800247c:	40023800 	.word	0x40023800
 8002480:	40020400 	.word	0x40020400
 8002484:	40005800 	.word	0x40005800

08002488 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08c      	sub	sp, #48	; 0x30
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002490:	f107 031c 	add.w	r3, r7, #28
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	609a      	str	r2, [r3, #8]
 800249c:	60da      	str	r2, [r3, #12]
 800249e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a3d      	ldr	r2, [pc, #244]	; (800259c <HAL_TIM_Base_MspInit+0x114>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d13d      	bne.n	8002526 <HAL_TIM_Base_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	61bb      	str	r3, [r7, #24]
 80024ae:	4b3c      	ldr	r3, [pc, #240]	; (80025a0 <HAL_TIM_Base_MspInit+0x118>)
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	4a3b      	ldr	r2, [pc, #236]	; (80025a0 <HAL_TIM_Base_MspInit+0x118>)
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	6453      	str	r3, [r2, #68]	; 0x44
 80024ba:	4b39      	ldr	r3, [pc, #228]	; (80025a0 <HAL_TIM_Base_MspInit+0x118>)
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	61bb      	str	r3, [r7, #24]
 80024c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	617b      	str	r3, [r7, #20]
 80024ca:	4b35      	ldr	r3, [pc, #212]	; (80025a0 <HAL_TIM_Base_MspInit+0x118>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	4a34      	ldr	r2, [pc, #208]	; (80025a0 <HAL_TIM_Base_MspInit+0x118>)
 80024d0:	f043 0301 	orr.w	r3, r3, #1
 80024d4:	6313      	str	r3, [r2, #48]	; 0x30
 80024d6:	4b32      	ldr	r3, [pc, #200]	; (80025a0 <HAL_TIM_Base_MspInit+0x118>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	617b      	str	r3, [r7, #20]
 80024e0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = echo_Pin|echo2_Pin;
 80024e2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80024e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e8:	2302      	movs	r3, #2
 80024ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f0:	2300      	movs	r3, #0
 80024f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024f4:	2301      	movs	r3, #1
 80024f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f8:	f107 031c 	add.w	r3, r7, #28
 80024fc:	4619      	mov	r1, r3
 80024fe:	4829      	ldr	r0, [pc, #164]	; (80025a4 <HAL_TIM_Base_MspInit+0x11c>)
 8002500:	f000 fcee 	bl	8002ee0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002504:	2200      	movs	r2, #0
 8002506:	2100      	movs	r1, #0
 8002508:	201a      	movs	r0, #26
 800250a:	f000 fc20 	bl	8002d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800250e:	201a      	movs	r0, #26
 8002510:	f000 fc39 	bl	8002d86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002514:	2200      	movs	r2, #0
 8002516:	2100      	movs	r1, #0
 8002518:	201b      	movs	r0, #27
 800251a:	f000 fc18 	bl	8002d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800251e:	201b      	movs	r0, #27
 8002520:	f000 fc31 	bl	8002d86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002524:	e036      	b.n	8002594 <HAL_TIM_Base_MspInit+0x10c>
  else if(htim_base->Instance==TIM3)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a1f      	ldr	r2, [pc, #124]	; (80025a8 <HAL_TIM_Base_MspInit+0x120>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d116      	bne.n	800255e <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002530:	2300      	movs	r3, #0
 8002532:	613b      	str	r3, [r7, #16]
 8002534:	4b1a      	ldr	r3, [pc, #104]	; (80025a0 <HAL_TIM_Base_MspInit+0x118>)
 8002536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002538:	4a19      	ldr	r2, [pc, #100]	; (80025a0 <HAL_TIM_Base_MspInit+0x118>)
 800253a:	f043 0302 	orr.w	r3, r3, #2
 800253e:	6413      	str	r3, [r2, #64]	; 0x40
 8002540:	4b17      	ldr	r3, [pc, #92]	; (80025a0 <HAL_TIM_Base_MspInit+0x118>)
 8002542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800254c:	2200      	movs	r2, #0
 800254e:	2100      	movs	r1, #0
 8002550:	201d      	movs	r0, #29
 8002552:	f000 fbfc 	bl	8002d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002556:	201d      	movs	r0, #29
 8002558:	f000 fc15 	bl	8002d86 <HAL_NVIC_EnableIRQ>
}
 800255c:	e01a      	b.n	8002594 <HAL_TIM_Base_MspInit+0x10c>
  else if(htim_base->Instance==TIM11)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a12      	ldr	r2, [pc, #72]	; (80025ac <HAL_TIM_Base_MspInit+0x124>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d115      	bne.n	8002594 <HAL_TIM_Base_MspInit+0x10c>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002568:	2300      	movs	r3, #0
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	4b0c      	ldr	r3, [pc, #48]	; (80025a0 <HAL_TIM_Base_MspInit+0x118>)
 800256e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002570:	4a0b      	ldr	r2, [pc, #44]	; (80025a0 <HAL_TIM_Base_MspInit+0x118>)
 8002572:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002576:	6453      	str	r3, [r2, #68]	; 0x44
 8002578:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <HAL_TIM_Base_MspInit+0x118>)
 800257a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002584:	2200      	movs	r2, #0
 8002586:	2100      	movs	r1, #0
 8002588:	201a      	movs	r0, #26
 800258a:	f000 fbe0 	bl	8002d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800258e:	201a      	movs	r0, #26
 8002590:	f000 fbf9 	bl	8002d86 <HAL_NVIC_EnableIRQ>
}
 8002594:	bf00      	nop
 8002596:	3730      	adds	r7, #48	; 0x30
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40010000 	.word	0x40010000
 80025a0:	40023800 	.word	0x40023800
 80025a4:	40020000 	.word	0x40020000
 80025a8:	40000400 	.word	0x40000400
 80025ac:	40014800 	.word	0x40014800

080025b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b088      	sub	sp, #32
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b8:	f107 030c 	add.w	r3, r7, #12
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	60da      	str	r2, [r3, #12]
 80025c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a12      	ldr	r2, [pc, #72]	; (8002618 <HAL_TIM_MspPostInit+0x68>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d11d      	bne.n	800260e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	60bb      	str	r3, [r7, #8]
 80025d6:	4b11      	ldr	r3, [pc, #68]	; (800261c <HAL_TIM_MspPostInit+0x6c>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	4a10      	ldr	r2, [pc, #64]	; (800261c <HAL_TIM_MspPostInit+0x6c>)
 80025dc:	f043 0301 	orr.w	r3, r3, #1
 80025e0:	6313      	str	r3, [r2, #48]	; 0x30
 80025e2:	4b0e      	ldr	r3, [pc, #56]	; (800261c <HAL_TIM_MspPostInit+0x6c>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	60bb      	str	r3, [r7, #8]
 80025ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = esc_Pin;
 80025ee:	2340      	movs	r3, #64	; 0x40
 80025f0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f2:	2302      	movs	r3, #2
 80025f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f6:	2300      	movs	r3, #0
 80025f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025fe:	2302      	movs	r3, #2
 8002600:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(esc_GPIO_Port, &GPIO_InitStruct);
 8002602:	f107 030c 	add.w	r3, r7, #12
 8002606:	4619      	mov	r1, r3
 8002608:	4805      	ldr	r0, [pc, #20]	; (8002620 <HAL_TIM_MspPostInit+0x70>)
 800260a:	f000 fc69 	bl	8002ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800260e:	bf00      	nop
 8002610:	3720      	adds	r7, #32
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40000400 	.word	0x40000400
 800261c:	40023800 	.word	0x40023800
 8002620:	40020000 	.word	0x40020000

08002624 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08a      	sub	sp, #40	; 0x28
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262c:	f107 0314 	add.w	r3, r7, #20
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a1d      	ldr	r2, [pc, #116]	; (80026b8 <HAL_UART_MspInit+0x94>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d133      	bne.n	80026ae <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	4b1c      	ldr	r3, [pc, #112]	; (80026bc <HAL_UART_MspInit+0x98>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	4a1b      	ldr	r2, [pc, #108]	; (80026bc <HAL_UART_MspInit+0x98>)
 8002650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002654:	6413      	str	r3, [r2, #64]	; 0x40
 8002656:	4b19      	ldr	r3, [pc, #100]	; (80026bc <HAL_UART_MspInit+0x98>)
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	4b15      	ldr	r3, [pc, #84]	; (80026bc <HAL_UART_MspInit+0x98>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	4a14      	ldr	r2, [pc, #80]	; (80026bc <HAL_UART_MspInit+0x98>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	6313      	str	r3, [r2, #48]	; 0x30
 8002672:	4b12      	ldr	r3, [pc, #72]	; (80026bc <HAL_UART_MspInit+0x98>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800267e:	230c      	movs	r3, #12
 8002680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002682:	2302      	movs	r3, #2
 8002684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002686:	2300      	movs	r3, #0
 8002688:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800268a:	2303      	movs	r3, #3
 800268c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800268e:	2307      	movs	r3, #7
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002692:	f107 0314 	add.w	r3, r7, #20
 8002696:	4619      	mov	r1, r3
 8002698:	4809      	ldr	r0, [pc, #36]	; (80026c0 <HAL_UART_MspInit+0x9c>)
 800269a:	f000 fc21 	bl	8002ee0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800269e:	2200      	movs	r2, #0
 80026a0:	2100      	movs	r1, #0
 80026a2:	2026      	movs	r0, #38	; 0x26
 80026a4:	f000 fb53 	bl	8002d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80026a8:	2026      	movs	r0, #38	; 0x26
 80026aa:	f000 fb6c 	bl	8002d86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026ae:	bf00      	nop
 80026b0:	3728      	adds	r7, #40	; 0x28
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40004400 	.word	0x40004400
 80026bc:	40023800 	.word	0x40023800
 80026c0:	40020000 	.word	0x40020000

080026c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026c8:	e7fe      	b.n	80026c8 <NMI_Handler+0x4>

080026ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026ca:	b480      	push	{r7}
 80026cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026ce:	e7fe      	b.n	80026ce <HardFault_Handler+0x4>

080026d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026d4:	e7fe      	b.n	80026d4 <MemManage_Handler+0x4>

080026d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026d6:	b480      	push	{r7}
 80026d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026da:	e7fe      	b.n	80026da <BusFault_Handler+0x4>

080026dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026e0:	e7fe      	b.n	80026e0 <UsageFault_Handler+0x4>

080026e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026e2:	b480      	push	{r7}
 80026e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026e6:	bf00      	nop
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026f4:	bf00      	nop
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026fe:	b480      	push	{r7}
 8002700:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002702:	bf00      	nop
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	SysTickcallback();
 8002710:	f7fe fb22 	bl	8000d58 <SysTickcallback>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002714:	f000 f9fc 	bl	8002b10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002718:	bf00      	nop
 800271a:	bd80      	pop	{r7, pc}

0800271c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002720:	4803      	ldr	r0, [pc, #12]	; (8002730 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8002722:	f003 f9b7 	bl	8005a94 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8002726:	4803      	ldr	r0, [pc, #12]	; (8002734 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002728:	f003 f9b4 	bl	8005a94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800272c:	bf00      	nop
 800272e:	bd80      	pop	{r7, pc}
 8002730:	20000174 	.word	0x20000174
 8002734:	20000204 	.word	0x20000204

08002738 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800273c:	4802      	ldr	r0, [pc, #8]	; (8002748 <TIM1_CC_IRQHandler+0x10>)
 800273e:	f003 f9a9 	bl	8005a94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20000174 	.word	0x20000174

0800274c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002750:	4802      	ldr	r0, [pc, #8]	; (800275c <TIM3_IRQHandler+0x10>)
 8002752:	f003 f99f 	bl	8005a94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	200001bc 	.word	0x200001bc

08002760 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002764:	4802      	ldr	r0, [pc, #8]	; (8002770 <USART2_IRQHandler+0x10>)
 8002766:	f004 fa8f 	bl	8006c88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	2000024c 	.word	0x2000024c

08002774 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]
 8002784:	e00a      	b.n	800279c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002786:	f3af 8000 	nop.w
 800278a:	4601      	mov	r1, r0
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	1c5a      	adds	r2, r3, #1
 8002790:	60ba      	str	r2, [r7, #8]
 8002792:	b2ca      	uxtb	r2, r1
 8002794:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	3301      	adds	r3, #1
 800279a:	617b      	str	r3, [r7, #20]
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	dbf0      	blt.n	8002786 <_read+0x12>
  }

  return len;
 80027a4:	687b      	ldr	r3, [r7, #4]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <_close>:
  }
  return len;
}

int _close(int file)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027d6:	605a      	str	r2, [r3, #4]
  return 0;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <_isatty>:

int _isatty(int file)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027ee:	2301      	movs	r3, #1
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3714      	adds	r7, #20
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
	...

08002818 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002820:	4a14      	ldr	r2, [pc, #80]	; (8002874 <_sbrk+0x5c>)
 8002822:	4b15      	ldr	r3, [pc, #84]	; (8002878 <_sbrk+0x60>)
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800282c:	4b13      	ldr	r3, [pc, #76]	; (800287c <_sbrk+0x64>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d102      	bne.n	800283a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002834:	4b11      	ldr	r3, [pc, #68]	; (800287c <_sbrk+0x64>)
 8002836:	4a12      	ldr	r2, [pc, #72]	; (8002880 <_sbrk+0x68>)
 8002838:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800283a:	4b10      	ldr	r3, [pc, #64]	; (800287c <_sbrk+0x64>)
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4413      	add	r3, r2
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	429a      	cmp	r2, r3
 8002846:	d207      	bcs.n	8002858 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002848:	f005 fc04 	bl	8008054 <__errno>
 800284c:	4603      	mov	r3, r0
 800284e:	220c      	movs	r2, #12
 8002850:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002852:	f04f 33ff 	mov.w	r3, #4294967295
 8002856:	e009      	b.n	800286c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002858:	4b08      	ldr	r3, [pc, #32]	; (800287c <_sbrk+0x64>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800285e:	4b07      	ldr	r3, [pc, #28]	; (800287c <_sbrk+0x64>)
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4413      	add	r3, r2
 8002866:	4a05      	ldr	r2, [pc, #20]	; (800287c <_sbrk+0x64>)
 8002868:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800286a:	68fb      	ldr	r3, [r7, #12]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	20020000 	.word	0x20020000
 8002878:	00000400 	.word	0x00000400
 800287c:	20000294 	.word	0x20000294
 8002880:	20000560 	.word	0x20000560

08002884 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002888:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <SystemInit+0x20>)
 800288a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288e:	4a05      	ldr	r2, [pc, #20]	; (80028a4 <SystemInit+0x20>)
 8002890:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002894:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002898:	bf00      	nop
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	e000ed00 	.word	0xe000ed00

080028a8 <initUart>:
uint8_t rxBuffer[rxBufferMax];
uint8_t rxChar;
UART_HandleTypeDef *myHuart;

//init device
void initUart(UART_HandleTypeDef *inHuart){
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
	myHuart = inHuart;
 80028b0:	4a06      	ldr	r2, [pc, #24]	; (80028cc <initUart+0x24>)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(myHuart, &rxChar, 1);
 80028b6:	4b05      	ldr	r3, [pc, #20]	; (80028cc <initUart+0x24>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2201      	movs	r2, #1
 80028bc:	4904      	ldr	r1, [pc, #16]	; (80028d0 <initUart+0x28>)
 80028be:	4618      	mov	r0, r3
 80028c0:	f004 f9bd 	bl	8006c3e <HAL_UART_Receive_IT>
}
 80028c4:	bf00      	nop
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	200003a0 	.word	0x200003a0
 80028d0:	2000039f 	.word	0x2000039f

080028d4 <HAL_UART_RxCpltCallback>:

//process received charactor
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
	rxBuffer[rxBufferPp++] = rxChar;
 80028dc:	4b11      	ldr	r3, [pc, #68]	; (8002924 <HAL_UART_RxCpltCallback+0x50>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	4910      	ldr	r1, [pc, #64]	; (8002924 <HAL_UART_RxCpltCallback+0x50>)
 80028e4:	600a      	str	r2, [r1, #0]
 80028e6:	4a10      	ldr	r2, [pc, #64]	; (8002928 <HAL_UART_RxCpltCallback+0x54>)
 80028e8:	7811      	ldrb	r1, [r2, #0]
 80028ea:	4a10      	ldr	r2, [pc, #64]	; (800292c <HAL_UART_RxCpltCallback+0x58>)
 80028ec:	54d1      	strb	r1, [r2, r3]
	rxBufferPp %= rxBufferMax;
 80028ee:	4b0d      	ldr	r3, [pc, #52]	; (8002924 <HAL_UART_RxCpltCallback+0x50>)
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	4b0f      	ldr	r3, [pc, #60]	; (8002930 <HAL_UART_RxCpltCallback+0x5c>)
 80028f4:	fb83 1302 	smull	r1, r3, r3, r2
 80028f8:	4413      	add	r3, r2
 80028fa:	11d9      	asrs	r1, r3, #7
 80028fc:	17d3      	asrs	r3, r2, #31
 80028fe:	1ac9      	subs	r1, r1, r3
 8002900:	460b      	mov	r3, r1
 8002902:	021b      	lsls	r3, r3, #8
 8002904:	1a5b      	subs	r3, r3, r1
 8002906:	1ad1      	subs	r1, r2, r3
 8002908:	4b06      	ldr	r3, [pc, #24]	; (8002924 <HAL_UART_RxCpltCallback+0x50>)
 800290a:	6019      	str	r1, [r3, #0]
	HAL_UART_Receive_IT(myHuart, &rxChar, 1);
 800290c:	4b09      	ldr	r3, [pc, #36]	; (8002934 <HAL_UART_RxCpltCallback+0x60>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2201      	movs	r2, #1
 8002912:	4905      	ldr	r1, [pc, #20]	; (8002928 <HAL_UART_RxCpltCallback+0x54>)
 8002914:	4618      	mov	r0, r3
 8002916:	f004 f992 	bl	8006c3e <HAL_UART_Receive_IT>
}
 800291a:	bf00      	nop
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	2000029c 	.word	0x2000029c
 8002928:	2000039f 	.word	0x2000039f
 800292c:	200002a0 	.word	0x200002a0
 8002930:	80808081 	.word	0x80808081
 8002934:	200003a0 	.word	0x200003a0

08002938 <getChar>:

//get charactor from buffer
uint8_t getChar(){
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
	uint8_t result;
	if(rxBufferGp == rxBufferPp) return 0;
 800293e:	4b13      	ldr	r3, [pc, #76]	; (800298c <getChar+0x54>)
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	4b13      	ldr	r3, [pc, #76]	; (8002990 <getChar+0x58>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	429a      	cmp	r2, r3
 8002948:	d101      	bne.n	800294e <getChar+0x16>
 800294a:	2300      	movs	r3, #0
 800294c:	e017      	b.n	800297e <getChar+0x46>
	result = rxBuffer[rxBufferGp++];
 800294e:	4b0f      	ldr	r3, [pc, #60]	; (800298c <getChar+0x54>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	1c5a      	adds	r2, r3, #1
 8002954:	490d      	ldr	r1, [pc, #52]	; (800298c <getChar+0x54>)
 8002956:	600a      	str	r2, [r1, #0]
 8002958:	4a0e      	ldr	r2, [pc, #56]	; (8002994 <getChar+0x5c>)
 800295a:	5cd3      	ldrb	r3, [r2, r3]
 800295c:	71fb      	strb	r3, [r7, #7]
	rxBufferGp %= rxBufferMax;
 800295e:	4b0b      	ldr	r3, [pc, #44]	; (800298c <getChar+0x54>)
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	4b0d      	ldr	r3, [pc, #52]	; (8002998 <getChar+0x60>)
 8002964:	fb83 1302 	smull	r1, r3, r3, r2
 8002968:	4413      	add	r3, r2
 800296a:	11d9      	asrs	r1, r3, #7
 800296c:	17d3      	asrs	r3, r2, #31
 800296e:	1ac9      	subs	r1, r1, r3
 8002970:	460b      	mov	r3, r1
 8002972:	021b      	lsls	r3, r3, #8
 8002974:	1a5b      	subs	r3, r3, r1
 8002976:	1ad1      	subs	r1, r2, r3
 8002978:	4b04      	ldr	r3, [pc, #16]	; (800298c <getChar+0x54>)
 800297a:	6019      	str	r1, [r3, #0]
	return result;
 800297c:	79fb      	ldrb	r3, [r7, #7]
}
 800297e:	4618      	mov	r0, r3
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	20000298 	.word	0x20000298
 8002990:	2000029c 	.word	0x2000029c
 8002994:	200002a0 	.word	0x200002a0
 8002998:	80808081 	.word	0x80808081

0800299c <getMessage>:

char *getMessage(){
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
	static char msgBuffer[100];
	static int pos = 0;
	char ch = getChar();
 80029a2:	f7ff ffc9 	bl	8002938 <getChar>
 80029a6:	4603      	mov	r3, r0
 80029a8:	71fb      	strb	r3, [r7, #7]
	if(ch != 0){
 80029aa:	79fb      	ldrb	r3, [r7, #7]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d014      	beq.n	80029da <getMessage+0x3e>
		switch(ch){
 80029b0:	79fb      	ldrb	r3, [r7, #7]
 80029b2:	2b0a      	cmp	r3, #10
 80029b4:	d108      	bne.n	80029c8 <getMessage+0x2c>
			case '\n':
				memset(msgBuffer,0,100);
 80029b6:	2264      	movs	r2, #100	; 0x64
 80029b8:	2100      	movs	r1, #0
 80029ba:	480a      	ldr	r0, [pc, #40]	; (80029e4 <getMessage+0x48>)
 80029bc:	f005 faea 	bl	8007f94 <memset>
				pos = 0;
 80029c0:	4b09      	ldr	r3, [pc, #36]	; (80029e8 <getMessage+0x4c>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	601a      	str	r2, [r3, #0]
				break;
 80029c6:	e008      	b.n	80029da <getMessage+0x3e>
			default:
				msgBuffer[pos++] = ch;
 80029c8:	4b07      	ldr	r3, [pc, #28]	; (80029e8 <getMessage+0x4c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	4906      	ldr	r1, [pc, #24]	; (80029e8 <getMessage+0x4c>)
 80029d0:	600a      	str	r2, [r1, #0]
 80029d2:	4904      	ldr	r1, [pc, #16]	; (80029e4 <getMessage+0x48>)
 80029d4:	79fa      	ldrb	r2, [r7, #7]
 80029d6:	54ca      	strb	r2, [r1, r3]
				break;
 80029d8:	bf00      	nop
		}
	}
	return msgBuffer;
 80029da:	4b02      	ldr	r3, [pc, #8]	; (80029e4 <getMessage+0x48>)
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	200003a4 	.word	0x200003a4
 80029e8:	20000408 	.word	0x20000408

080029ec <_write>:

int _write(int file, char *p, int len) {
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(myHuart, p, len, 10);
 80029f8:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <_write+0x28>)
 80029fa:	6818      	ldr	r0, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	230a      	movs	r3, #10
 8002a02:	68b9      	ldr	r1, [r7, #8]
 8002a04:	f004 f890 	bl	8006b28 <HAL_UART_Transmit>
	return len;
 8002a08:	687b      	ldr	r3, [r7, #4]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	200003a0 	.word	0x200003a0

08002a18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a50 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a1c:	f7ff ff32 	bl	8002884 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a20:	480c      	ldr	r0, [pc, #48]	; (8002a54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a22:	490d      	ldr	r1, [pc, #52]	; (8002a58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a24:	4a0d      	ldr	r2, [pc, #52]	; (8002a5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a28:	e002      	b.n	8002a30 <LoopCopyDataInit>

08002a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a2e:	3304      	adds	r3, #4

08002a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a34:	d3f9      	bcc.n	8002a2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a36:	4a0a      	ldr	r2, [pc, #40]	; (8002a60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a38:	4c0a      	ldr	r4, [pc, #40]	; (8002a64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a3c:	e001      	b.n	8002a42 <LoopFillZerobss>

08002a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a40:	3204      	adds	r2, #4

08002a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a44:	d3fb      	bcc.n	8002a3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a46:	f005 fb0b 	bl	8008060 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a4a:	f7ff f991 	bl	8001d70 <main>
  bx  lr    
 8002a4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a58:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002a5c:	08009038 	.word	0x08009038
  ldr r2, =_sbss
 8002a60:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002a64:	2000055c 	.word	0x2000055c

08002a68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a68:	e7fe      	b.n	8002a68 <ADC_IRQHandler>
	...

08002a6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a70:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <HAL_Init+0x40>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a0d      	ldr	r2, [pc, #52]	; (8002aac <HAL_Init+0x40>)
 8002a76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <HAL_Init+0x40>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a0a      	ldr	r2, [pc, #40]	; (8002aac <HAL_Init+0x40>)
 8002a82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a88:	4b08      	ldr	r3, [pc, #32]	; (8002aac <HAL_Init+0x40>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a07      	ldr	r2, [pc, #28]	; (8002aac <HAL_Init+0x40>)
 8002a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a94:	2003      	movs	r0, #3
 8002a96:	f000 f94f 	bl	8002d38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a9a:	200f      	movs	r0, #15
 8002a9c:	f000 f808 	bl	8002ab0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002aa0:	f7ff fc3e 	bl	8002320 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40023c00 	.word	0x40023c00

08002ab0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ab8:	4b12      	ldr	r3, [pc, #72]	; (8002b04 <HAL_InitTick+0x54>)
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	4b12      	ldr	r3, [pc, #72]	; (8002b08 <HAL_InitTick+0x58>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ac6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 f967 	bl	8002da2 <HAL_SYSTICK_Config>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e00e      	b.n	8002afc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2b0f      	cmp	r3, #15
 8002ae2:	d80a      	bhi.n	8002afa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8002aec:	f000 f92f 	bl	8002d4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002af0:	4a06      	ldr	r2, [pc, #24]	; (8002b0c <HAL_InitTick+0x5c>)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
 8002af8:	e000      	b.n	8002afc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	20000004 	.word	0x20000004
 8002b08:	2000000c 	.word	0x2000000c
 8002b0c:	20000008 	.word	0x20000008

08002b10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b14:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <HAL_IncTick+0x20>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	461a      	mov	r2, r3
 8002b1a:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <HAL_IncTick+0x24>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4413      	add	r3, r2
 8002b20:	4a04      	ldr	r2, [pc, #16]	; (8002b34 <HAL_IncTick+0x24>)
 8002b22:	6013      	str	r3, [r2, #0]
}
 8002b24:	bf00      	nop
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	2000000c 	.word	0x2000000c
 8002b34:	2000040c 	.word	0x2000040c

08002b38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b3c:	4b03      	ldr	r3, [pc, #12]	; (8002b4c <HAL_GetTick+0x14>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	2000040c 	.word	0x2000040c

08002b50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b58:	f7ff ffee 	bl	8002b38 <HAL_GetTick>
 8002b5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b68:	d005      	beq.n	8002b76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b6a:	4b0a      	ldr	r3, [pc, #40]	; (8002b94 <HAL_Delay+0x44>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4413      	add	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b76:	bf00      	nop
 8002b78:	f7ff ffde 	bl	8002b38 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d8f7      	bhi.n	8002b78 <HAL_Delay+0x28>
  {
  }
}
 8002b88:	bf00      	nop
 8002b8a:	bf00      	nop
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	2000000c 	.word	0x2000000c

08002b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ba8:	4b0c      	ldr	r3, [pc, #48]	; (8002bdc <__NVIC_SetPriorityGrouping+0x44>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bca:	4a04      	ldr	r2, [pc, #16]	; (8002bdc <__NVIC_SetPriorityGrouping+0x44>)
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	60d3      	str	r3, [r2, #12]
}
 8002bd0:	bf00      	nop
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	e000ed00 	.word	0xe000ed00

08002be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002be4:	4b04      	ldr	r3, [pc, #16]	; (8002bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	0a1b      	lsrs	r3, r3, #8
 8002bea:	f003 0307 	and.w	r3, r3, #7
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	e000ed00 	.word	0xe000ed00

08002bfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	4603      	mov	r3, r0
 8002c04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	db0b      	blt.n	8002c26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c0e:	79fb      	ldrb	r3, [r7, #7]
 8002c10:	f003 021f 	and.w	r2, r3, #31
 8002c14:	4907      	ldr	r1, [pc, #28]	; (8002c34 <__NVIC_EnableIRQ+0x38>)
 8002c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1a:	095b      	lsrs	r3, r3, #5
 8002c1c:	2001      	movs	r0, #1
 8002c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	e000e100 	.word	0xe000e100

08002c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	6039      	str	r1, [r7, #0]
 8002c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	db0a      	blt.n	8002c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	b2da      	uxtb	r2, r3
 8002c50:	490c      	ldr	r1, [pc, #48]	; (8002c84 <__NVIC_SetPriority+0x4c>)
 8002c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c56:	0112      	lsls	r2, r2, #4
 8002c58:	b2d2      	uxtb	r2, r2
 8002c5a:	440b      	add	r3, r1
 8002c5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c60:	e00a      	b.n	8002c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	4908      	ldr	r1, [pc, #32]	; (8002c88 <__NVIC_SetPriority+0x50>)
 8002c68:	79fb      	ldrb	r3, [r7, #7]
 8002c6a:	f003 030f 	and.w	r3, r3, #15
 8002c6e:	3b04      	subs	r3, #4
 8002c70:	0112      	lsls	r2, r2, #4
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	440b      	add	r3, r1
 8002c76:	761a      	strb	r2, [r3, #24]
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	e000e100 	.word	0xe000e100
 8002c88:	e000ed00 	.word	0xe000ed00

08002c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b089      	sub	sp, #36	; 0x24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	f1c3 0307 	rsb	r3, r3, #7
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	bf28      	it	cs
 8002caa:	2304      	movcs	r3, #4
 8002cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	3304      	adds	r3, #4
 8002cb2:	2b06      	cmp	r3, #6
 8002cb4:	d902      	bls.n	8002cbc <NVIC_EncodePriority+0x30>
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	3b03      	subs	r3, #3
 8002cba:	e000      	b.n	8002cbe <NVIC_EncodePriority+0x32>
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	43da      	mvns	r2, r3
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	401a      	ands	r2, r3
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	fa01 f303 	lsl.w	r3, r1, r3
 8002cde:	43d9      	mvns	r1, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce4:	4313      	orrs	r3, r2
         );
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3724      	adds	r7, #36	; 0x24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
	...

08002cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d04:	d301      	bcc.n	8002d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d06:	2301      	movs	r3, #1
 8002d08:	e00f      	b.n	8002d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d0a:	4a0a      	ldr	r2, [pc, #40]	; (8002d34 <SysTick_Config+0x40>)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d12:	210f      	movs	r1, #15
 8002d14:	f04f 30ff 	mov.w	r0, #4294967295
 8002d18:	f7ff ff8e 	bl	8002c38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d1c:	4b05      	ldr	r3, [pc, #20]	; (8002d34 <SysTick_Config+0x40>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d22:	4b04      	ldr	r3, [pc, #16]	; (8002d34 <SysTick_Config+0x40>)
 8002d24:	2207      	movs	r2, #7
 8002d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	e000e010 	.word	0xe000e010

08002d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f7ff ff29 	bl	8002b98 <__NVIC_SetPriorityGrouping>
}
 8002d46:	bf00      	nop
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b086      	sub	sp, #24
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	4603      	mov	r3, r0
 8002d56:	60b9      	str	r1, [r7, #8]
 8002d58:	607a      	str	r2, [r7, #4]
 8002d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d60:	f7ff ff3e 	bl	8002be0 <__NVIC_GetPriorityGrouping>
 8002d64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	68b9      	ldr	r1, [r7, #8]
 8002d6a:	6978      	ldr	r0, [r7, #20]
 8002d6c:	f7ff ff8e 	bl	8002c8c <NVIC_EncodePriority>
 8002d70:	4602      	mov	r2, r0
 8002d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d76:	4611      	mov	r1, r2
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff ff5d 	bl	8002c38 <__NVIC_SetPriority>
}
 8002d7e:	bf00      	nop
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b082      	sub	sp, #8
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff ff31 	bl	8002bfc <__NVIC_EnableIRQ>
}
 8002d9a:	bf00      	nop
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b082      	sub	sp, #8
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7ff ffa2 	bl	8002cf4 <SysTick_Config>
 8002db0:	4603      	mov	r3, r0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b084      	sub	sp, #16
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002dc8:	f7ff feb6 	bl	8002b38 <HAL_GetTick>
 8002dcc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d008      	beq.n	8002dec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2280      	movs	r2, #128	; 0x80
 8002dde:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e052      	b.n	8002e92 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0216 	bic.w	r2, r2, #22
 8002dfa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	695a      	ldr	r2, [r3, #20]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e0a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d103      	bne.n	8002e1c <HAL_DMA_Abort+0x62>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d007      	beq.n	8002e2c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0208 	bic.w	r2, r2, #8
 8002e2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 0201 	bic.w	r2, r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e3c:	e013      	b.n	8002e66 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e3e:	f7ff fe7b 	bl	8002b38 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b05      	cmp	r3, #5
 8002e4a:	d90c      	bls.n	8002e66 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2203      	movs	r2, #3
 8002e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e015      	b.n	8002e92 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1e4      	bne.n	8002e3e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e78:	223f      	movs	r2, #63	; 0x3f
 8002e7a:	409a      	lsls	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b083      	sub	sp, #12
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d004      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2280      	movs	r2, #128	; 0x80
 8002eb2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e00c      	b.n	8002ed2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2205      	movs	r2, #5
 8002ebc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0201 	bic.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
	...

08002ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b089      	sub	sp, #36	; 0x24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61fb      	str	r3, [r7, #28]
 8002efa:	e159      	b.n	80031b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002efc:	2201      	movs	r2, #1
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	f040 8148 	bne.w	80031aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d005      	beq.n	8002f32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d130      	bne.n	8002f94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	2203      	movs	r2, #3
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	43db      	mvns	r3, r3
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	4013      	ands	r3, r2
 8002f48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f68:	2201      	movs	r2, #1
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	43db      	mvns	r3, r3
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	4013      	ands	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	091b      	lsrs	r3, r3, #4
 8002f7e:	f003 0201 	and.w	r2, r3, #1
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 0303 	and.w	r3, r3, #3
 8002f9c:	2b03      	cmp	r3, #3
 8002f9e:	d017      	beq.n	8002fd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	2203      	movs	r2, #3
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d123      	bne.n	8003024 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	08da      	lsrs	r2, r3, #3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3208      	adds	r2, #8
 8002fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	220f      	movs	r2, #15
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	691a      	ldr	r2, [r3, #16]
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4313      	orrs	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	08da      	lsrs	r2, r3, #3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	3208      	adds	r2, #8
 800301e:	69b9      	ldr	r1, [r7, #24]
 8003020:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	2203      	movs	r2, #3
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	43db      	mvns	r3, r3
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	4013      	ands	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f003 0203 	and.w	r2, r3, #3
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4313      	orrs	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 80a2 	beq.w	80031aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003066:	2300      	movs	r3, #0
 8003068:	60fb      	str	r3, [r7, #12]
 800306a:	4b57      	ldr	r3, [pc, #348]	; (80031c8 <HAL_GPIO_Init+0x2e8>)
 800306c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306e:	4a56      	ldr	r2, [pc, #344]	; (80031c8 <HAL_GPIO_Init+0x2e8>)
 8003070:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003074:	6453      	str	r3, [r2, #68]	; 0x44
 8003076:	4b54      	ldr	r3, [pc, #336]	; (80031c8 <HAL_GPIO_Init+0x2e8>)
 8003078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003082:	4a52      	ldr	r2, [pc, #328]	; (80031cc <HAL_GPIO_Init+0x2ec>)
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	089b      	lsrs	r3, r3, #2
 8003088:	3302      	adds	r3, #2
 800308a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800308e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	f003 0303 	and.w	r3, r3, #3
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	220f      	movs	r2, #15
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	43db      	mvns	r3, r3
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	4013      	ands	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a49      	ldr	r2, [pc, #292]	; (80031d0 <HAL_GPIO_Init+0x2f0>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d019      	beq.n	80030e2 <HAL_GPIO_Init+0x202>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a48      	ldr	r2, [pc, #288]	; (80031d4 <HAL_GPIO_Init+0x2f4>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d013      	beq.n	80030de <HAL_GPIO_Init+0x1fe>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a47      	ldr	r2, [pc, #284]	; (80031d8 <HAL_GPIO_Init+0x2f8>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d00d      	beq.n	80030da <HAL_GPIO_Init+0x1fa>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a46      	ldr	r2, [pc, #280]	; (80031dc <HAL_GPIO_Init+0x2fc>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d007      	beq.n	80030d6 <HAL_GPIO_Init+0x1f6>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a45      	ldr	r2, [pc, #276]	; (80031e0 <HAL_GPIO_Init+0x300>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d101      	bne.n	80030d2 <HAL_GPIO_Init+0x1f2>
 80030ce:	2304      	movs	r3, #4
 80030d0:	e008      	b.n	80030e4 <HAL_GPIO_Init+0x204>
 80030d2:	2307      	movs	r3, #7
 80030d4:	e006      	b.n	80030e4 <HAL_GPIO_Init+0x204>
 80030d6:	2303      	movs	r3, #3
 80030d8:	e004      	b.n	80030e4 <HAL_GPIO_Init+0x204>
 80030da:	2302      	movs	r3, #2
 80030dc:	e002      	b.n	80030e4 <HAL_GPIO_Init+0x204>
 80030de:	2301      	movs	r3, #1
 80030e0:	e000      	b.n	80030e4 <HAL_GPIO_Init+0x204>
 80030e2:	2300      	movs	r3, #0
 80030e4:	69fa      	ldr	r2, [r7, #28]
 80030e6:	f002 0203 	and.w	r2, r2, #3
 80030ea:	0092      	lsls	r2, r2, #2
 80030ec:	4093      	lsls	r3, r2
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030f4:	4935      	ldr	r1, [pc, #212]	; (80031cc <HAL_GPIO_Init+0x2ec>)
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	089b      	lsrs	r3, r3, #2
 80030fa:	3302      	adds	r3, #2
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003102:	4b38      	ldr	r3, [pc, #224]	; (80031e4 <HAL_GPIO_Init+0x304>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	43db      	mvns	r3, r3
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	4013      	ands	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	4313      	orrs	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003126:	4a2f      	ldr	r2, [pc, #188]	; (80031e4 <HAL_GPIO_Init+0x304>)
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800312c:	4b2d      	ldr	r3, [pc, #180]	; (80031e4 <HAL_GPIO_Init+0x304>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	43db      	mvns	r3, r3
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	4013      	ands	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d003      	beq.n	8003150 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	4313      	orrs	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003150:	4a24      	ldr	r2, [pc, #144]	; (80031e4 <HAL_GPIO_Init+0x304>)
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003156:	4b23      	ldr	r3, [pc, #140]	; (80031e4 <HAL_GPIO_Init+0x304>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	43db      	mvns	r3, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4013      	ands	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	4313      	orrs	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800317a:	4a1a      	ldr	r2, [pc, #104]	; (80031e4 <HAL_GPIO_Init+0x304>)
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003180:	4b18      	ldr	r3, [pc, #96]	; (80031e4 <HAL_GPIO_Init+0x304>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	43db      	mvns	r3, r3
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	4013      	ands	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031a4:	4a0f      	ldr	r2, [pc, #60]	; (80031e4 <HAL_GPIO_Init+0x304>)
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	3301      	adds	r3, #1
 80031ae:	61fb      	str	r3, [r7, #28]
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	2b0f      	cmp	r3, #15
 80031b4:	f67f aea2 	bls.w	8002efc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031b8:	bf00      	nop
 80031ba:	bf00      	nop
 80031bc:	3724      	adds	r7, #36	; 0x24
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	40023800 	.word	0x40023800
 80031cc:	40013800 	.word	0x40013800
 80031d0:	40020000 	.word	0x40020000
 80031d4:	40020400 	.word	0x40020400
 80031d8:	40020800 	.word	0x40020800
 80031dc:	40020c00 	.word	0x40020c00
 80031e0:	40021000 	.word	0x40021000
 80031e4:	40013c00 	.word	0x40013c00

080031e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	460b      	mov	r3, r1
 80031f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691a      	ldr	r2, [r3, #16]
 80031f8:	887b      	ldrh	r3, [r7, #2]
 80031fa:	4013      	ands	r3, r2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d002      	beq.n	8003206 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003200:	2301      	movs	r3, #1
 8003202:	73fb      	strb	r3, [r7, #15]
 8003204:	e001      	b.n	800320a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003206:	2300      	movs	r3, #0
 8003208:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800320a:	7bfb      	ldrb	r3, [r7, #15]
}
 800320c:	4618      	mov	r0, r3
 800320e:	3714      	adds	r7, #20
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	460b      	mov	r3, r1
 8003222:	807b      	strh	r3, [r7, #2]
 8003224:	4613      	mov	r3, r2
 8003226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003228:	787b      	ldrb	r3, [r7, #1]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800322e:	887a      	ldrh	r2, [r7, #2]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003234:	e003      	b.n	800323e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003236:	887b      	ldrh	r3, [r7, #2]
 8003238:	041a      	lsls	r2, r3, #16
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	619a      	str	r2, [r3, #24]
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
	...

0800324c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e12b      	b.n	80034b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d106      	bne.n	8003278 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7ff f87c 	bl	8002370 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2224      	movs	r2, #36	; 0x24
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0201 	bic.w	r2, r2, #1
 800328e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800329e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032b0:	f002 f8a0 	bl	80053f4 <HAL_RCC_GetPCLK1Freq>
 80032b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	4a81      	ldr	r2, [pc, #516]	; (80034c0 <HAL_I2C_Init+0x274>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d807      	bhi.n	80032d0 <HAL_I2C_Init+0x84>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4a80      	ldr	r2, [pc, #512]	; (80034c4 <HAL_I2C_Init+0x278>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	bf94      	ite	ls
 80032c8:	2301      	movls	r3, #1
 80032ca:	2300      	movhi	r3, #0
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	e006      	b.n	80032de <HAL_I2C_Init+0x92>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4a7d      	ldr	r2, [pc, #500]	; (80034c8 <HAL_I2C_Init+0x27c>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	bf94      	ite	ls
 80032d8:	2301      	movls	r3, #1
 80032da:	2300      	movhi	r3, #0
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e0e7      	b.n	80034b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	4a78      	ldr	r2, [pc, #480]	; (80034cc <HAL_I2C_Init+0x280>)
 80032ea:	fba2 2303 	umull	r2, r3, r2, r3
 80032ee:	0c9b      	lsrs	r3, r3, #18
 80032f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	430a      	orrs	r2, r1
 8003304:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	4a6a      	ldr	r2, [pc, #424]	; (80034c0 <HAL_I2C_Init+0x274>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d802      	bhi.n	8003320 <HAL_I2C_Init+0xd4>
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	3301      	adds	r3, #1
 800331e:	e009      	b.n	8003334 <HAL_I2C_Init+0xe8>
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003326:	fb02 f303 	mul.w	r3, r2, r3
 800332a:	4a69      	ldr	r2, [pc, #420]	; (80034d0 <HAL_I2C_Init+0x284>)
 800332c:	fba2 2303 	umull	r2, r3, r2, r3
 8003330:	099b      	lsrs	r3, r3, #6
 8003332:	3301      	adds	r3, #1
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6812      	ldr	r2, [r2, #0]
 8003338:	430b      	orrs	r3, r1
 800333a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003346:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	495c      	ldr	r1, [pc, #368]	; (80034c0 <HAL_I2C_Init+0x274>)
 8003350:	428b      	cmp	r3, r1
 8003352:	d819      	bhi.n	8003388 <HAL_I2C_Init+0x13c>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	1e59      	subs	r1, r3, #1
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003362:	1c59      	adds	r1, r3, #1
 8003364:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003368:	400b      	ands	r3, r1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00a      	beq.n	8003384 <HAL_I2C_Init+0x138>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	1e59      	subs	r1, r3, #1
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	fbb1 f3f3 	udiv	r3, r1, r3
 800337c:	3301      	adds	r3, #1
 800337e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003382:	e051      	b.n	8003428 <HAL_I2C_Init+0x1dc>
 8003384:	2304      	movs	r3, #4
 8003386:	e04f      	b.n	8003428 <HAL_I2C_Init+0x1dc>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d111      	bne.n	80033b4 <HAL_I2C_Init+0x168>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	1e58      	subs	r0, r3, #1
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6859      	ldr	r1, [r3, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	440b      	add	r3, r1
 800339e:	fbb0 f3f3 	udiv	r3, r0, r3
 80033a2:	3301      	adds	r3, #1
 80033a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	bf0c      	ite	eq
 80033ac:	2301      	moveq	r3, #1
 80033ae:	2300      	movne	r3, #0
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	e012      	b.n	80033da <HAL_I2C_Init+0x18e>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	1e58      	subs	r0, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6859      	ldr	r1, [r3, #4]
 80033bc:	460b      	mov	r3, r1
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	0099      	lsls	r1, r3, #2
 80033c4:	440b      	add	r3, r1
 80033c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ca:	3301      	adds	r3, #1
 80033cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	bf0c      	ite	eq
 80033d4:	2301      	moveq	r3, #1
 80033d6:	2300      	movne	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <HAL_I2C_Init+0x196>
 80033de:	2301      	movs	r3, #1
 80033e0:	e022      	b.n	8003428 <HAL_I2C_Init+0x1dc>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10e      	bne.n	8003408 <HAL_I2C_Init+0x1bc>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	1e58      	subs	r0, r3, #1
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6859      	ldr	r1, [r3, #4]
 80033f2:	460b      	mov	r3, r1
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	440b      	add	r3, r1
 80033f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80033fc:	3301      	adds	r3, #1
 80033fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003406:	e00f      	b.n	8003428 <HAL_I2C_Init+0x1dc>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	1e58      	subs	r0, r3, #1
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6859      	ldr	r1, [r3, #4]
 8003410:	460b      	mov	r3, r1
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	0099      	lsls	r1, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	fbb0 f3f3 	udiv	r3, r0, r3
 800341e:	3301      	adds	r3, #1
 8003420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003424:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	6809      	ldr	r1, [r1, #0]
 800342c:	4313      	orrs	r3, r2
 800342e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69da      	ldr	r2, [r3, #28]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003456:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6911      	ldr	r1, [r2, #16]
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	68d2      	ldr	r2, [r2, #12]
 8003462:	4311      	orrs	r1, r2
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6812      	ldr	r2, [r2, #0]
 8003468:	430b      	orrs	r3, r1
 800346a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	695a      	ldr	r2, [r3, #20]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0201 	orr.w	r2, r2, #1
 8003496:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2220      	movs	r2, #32
 80034a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	000186a0 	.word	0x000186a0
 80034c4:	001e847f 	.word	0x001e847f
 80034c8:	003d08ff 	.word	0x003d08ff
 80034cc:	431bde83 	.word	0x431bde83
 80034d0:	10624dd3 	.word	0x10624dd3

080034d4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af02      	add	r7, sp, #8
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	607a      	str	r2, [r7, #4]
 80034de:	461a      	mov	r2, r3
 80034e0:	460b      	mov	r3, r1
 80034e2:	817b      	strh	r3, [r7, #10]
 80034e4:	4613      	mov	r3, r2
 80034e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034e8:	f7ff fb26 	bl	8002b38 <HAL_GetTick>
 80034ec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b20      	cmp	r3, #32
 80034f8:	f040 80e0 	bne.w	80036bc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	2319      	movs	r3, #25
 8003502:	2201      	movs	r2, #1
 8003504:	4970      	ldr	r1, [pc, #448]	; (80036c8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f001 f90e 	bl	8004728 <I2C_WaitOnFlagUntilTimeout>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003512:	2302      	movs	r3, #2
 8003514:	e0d3      	b.n	80036be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800351c:	2b01      	cmp	r3, #1
 800351e:	d101      	bne.n	8003524 <HAL_I2C_Master_Transmit+0x50>
 8003520:	2302      	movs	r3, #2
 8003522:	e0cc      	b.n	80036be <HAL_I2C_Master_Transmit+0x1ea>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b01      	cmp	r3, #1
 8003538:	d007      	beq.n	800354a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f042 0201 	orr.w	r2, r2, #1
 8003548:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003558:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2221      	movs	r2, #33	; 0x21
 800355e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2210      	movs	r2, #16
 8003566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	893a      	ldrh	r2, [r7, #8]
 800357a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003580:	b29a      	uxth	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	4a50      	ldr	r2, [pc, #320]	; (80036cc <HAL_I2C_Master_Transmit+0x1f8>)
 800358a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800358c:	8979      	ldrh	r1, [r7, #10]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	6a3a      	ldr	r2, [r7, #32]
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 fdfa 	bl	800418c <I2C_MasterRequestWrite>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e08d      	b.n	80036be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a2:	2300      	movs	r3, #0
 80035a4:	613b      	str	r3, [r7, #16]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	613b      	str	r3, [r7, #16]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80035b8:	e066      	b.n	8003688 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	6a39      	ldr	r1, [r7, #32]
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f001 f9cc 	bl	800495c <I2C_WaitOnTXEFlagUntilTimeout>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00d      	beq.n	80035e6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d107      	bne.n	80035e2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e06b      	b.n	80036be <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ea:	781a      	ldrb	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	1c5a      	adds	r2, r3, #1
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003600:	b29b      	uxth	r3, r3
 8003602:	3b01      	subs	r3, #1
 8003604:	b29a      	uxth	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360e:	3b01      	subs	r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b04      	cmp	r3, #4
 8003622:	d11b      	bne.n	800365c <HAL_I2C_Master_Transmit+0x188>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003628:	2b00      	cmp	r3, #0
 800362a:	d017      	beq.n	800365c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	781a      	ldrb	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	1c5a      	adds	r2, r3, #1
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003646:	b29b      	uxth	r3, r3
 8003648:	3b01      	subs	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003654:	3b01      	subs	r3, #1
 8003656:	b29a      	uxth	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	6a39      	ldr	r1, [r7, #32]
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f001 f9c3 	bl	80049ec <I2C_WaitOnBTFFlagUntilTimeout>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00d      	beq.n	8003688 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003670:	2b04      	cmp	r3, #4
 8003672:	d107      	bne.n	8003684 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003682:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e01a      	b.n	80036be <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800368c:	2b00      	cmp	r3, #0
 800368e:	d194      	bne.n	80035ba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800369e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036b8:	2300      	movs	r3, #0
 80036ba:	e000      	b.n	80036be <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80036bc:	2302      	movs	r3, #2
  }
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3718      	adds	r7, #24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	00100002 	.word	0x00100002
 80036cc:	ffff0000 	.word	0xffff0000

080036d0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08c      	sub	sp, #48	; 0x30
 80036d4:	af02      	add	r7, sp, #8
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	607a      	str	r2, [r7, #4]
 80036da:	461a      	mov	r2, r3
 80036dc:	460b      	mov	r3, r1
 80036de:	817b      	strh	r3, [r7, #10]
 80036e0:	4613      	mov	r3, r2
 80036e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036e4:	f7ff fa28 	bl	8002b38 <HAL_GetTick>
 80036e8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b20      	cmp	r3, #32
 80036f4:	f040 8217 	bne.w	8003b26 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	2319      	movs	r3, #25
 80036fe:	2201      	movs	r2, #1
 8003700:	497c      	ldr	r1, [pc, #496]	; (80038f4 <HAL_I2C_Master_Receive+0x224>)
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f001 f810 	bl	8004728 <I2C_WaitOnFlagUntilTimeout>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800370e:	2302      	movs	r3, #2
 8003710:	e20a      	b.n	8003b28 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003718:	2b01      	cmp	r3, #1
 800371a:	d101      	bne.n	8003720 <HAL_I2C_Master_Receive+0x50>
 800371c:	2302      	movs	r3, #2
 800371e:	e203      	b.n	8003b28 <HAL_I2C_Master_Receive+0x458>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b01      	cmp	r3, #1
 8003734:	d007      	beq.n	8003746 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f042 0201 	orr.w	r2, r2, #1
 8003744:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003754:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2222      	movs	r2, #34	; 0x22
 800375a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2210      	movs	r2, #16
 8003762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	893a      	ldrh	r2, [r7, #8]
 8003776:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377c:	b29a      	uxth	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	4a5c      	ldr	r2, [pc, #368]	; (80038f8 <HAL_I2C_Master_Receive+0x228>)
 8003786:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003788:	8979      	ldrh	r1, [r7, #10]
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 fd7e 	bl	8004290 <I2C_MasterRequestRead>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e1c4      	b.n	8003b28 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d113      	bne.n	80037ce <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037a6:	2300      	movs	r3, #0
 80037a8:	623b      	str	r3, [r7, #32]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	623b      	str	r3, [r7, #32]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	623b      	str	r3, [r7, #32]
 80037ba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	e198      	b.n	8003b00 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d11b      	bne.n	800380e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037e6:	2300      	movs	r3, #0
 80037e8:	61fb      	str	r3, [r7, #28]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	61fb      	str	r3, [r7, #28]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	61fb      	str	r3, [r7, #28]
 80037fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	e178      	b.n	8003b00 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003812:	2b02      	cmp	r3, #2
 8003814:	d11b      	bne.n	800384e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003824:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003834:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003836:	2300      	movs	r3, #0
 8003838:	61bb      	str	r3, [r7, #24]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	61bb      	str	r3, [r7, #24]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	61bb      	str	r3, [r7, #24]
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	e158      	b.n	8003b00 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800385c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800385e:	2300      	movs	r3, #0
 8003860:	617b      	str	r3, [r7, #20]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	617b      	str	r3, [r7, #20]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	617b      	str	r3, [r7, #20]
 8003872:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003874:	e144      	b.n	8003b00 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800387a:	2b03      	cmp	r3, #3
 800387c:	f200 80f1 	bhi.w	8003a62 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003884:	2b01      	cmp	r3, #1
 8003886:	d123      	bne.n	80038d0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800388a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f001 f8f5 	bl	8004a7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e145      	b.n	8003b28 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	691a      	ldr	r2, [r3, #16]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	1c5a      	adds	r2, r3, #1
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b8:	3b01      	subs	r3, #1
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	3b01      	subs	r3, #1
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038ce:	e117      	b.n	8003b00 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d14e      	bne.n	8003976 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038de:	2200      	movs	r2, #0
 80038e0:	4906      	ldr	r1, [pc, #24]	; (80038fc <HAL_I2C_Master_Receive+0x22c>)
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 ff20 	bl	8004728 <I2C_WaitOnFlagUntilTimeout>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d008      	beq.n	8003900 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e11a      	b.n	8003b28 <HAL_I2C_Master_Receive+0x458>
 80038f2:	bf00      	nop
 80038f4:	00100002 	.word	0x00100002
 80038f8:	ffff0000 	.word	0xffff0000
 80038fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800390e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691a      	ldr	r2, [r3, #16]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003938:	b29b      	uxth	r3, r3
 800393a:	3b01      	subs	r3, #1
 800393c:	b29a      	uxth	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	691a      	ldr	r2, [r3, #16]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	b2d2      	uxtb	r2, r2
 800394e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	1c5a      	adds	r2, r3, #1
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395e:	3b01      	subs	r3, #1
 8003960:	b29a      	uxth	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396a:	b29b      	uxth	r3, r3
 800396c:	3b01      	subs	r3, #1
 800396e:	b29a      	uxth	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003974:	e0c4      	b.n	8003b00 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397c:	2200      	movs	r2, #0
 800397e:	496c      	ldr	r1, [pc, #432]	; (8003b30 <HAL_I2C_Master_Receive+0x460>)
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 fed1 	bl	8004728 <I2C_WaitOnFlagUntilTimeout>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e0cb      	b.n	8003b28 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800399e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	691a      	ldr	r2, [r3, #16]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	b2d2      	uxtb	r2, r2
 80039ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	1c5a      	adds	r2, r3, #1
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	3b01      	subs	r3, #1
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d8:	2200      	movs	r2, #0
 80039da:	4955      	ldr	r1, [pc, #340]	; (8003b30 <HAL_I2C_Master_Receive+0x460>)
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 fea3 	bl	8004728 <I2C_WaitOnFlagUntilTimeout>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e09d      	b.n	8003b28 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	691a      	ldr	r2, [r3, #16]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0e:	1c5a      	adds	r2, r3, #1
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	3b01      	subs	r3, #1
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	691a      	ldr	r2, [r3, #16]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	b2d2      	uxtb	r2, r2
 8003a3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	1c5a      	adds	r2, r3, #1
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a60:	e04e      	b.n	8003b00 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f001 f808 	bl	8004a7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e058      	b.n	8003b28 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	691a      	ldr	r2, [r3, #16]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	b2d2      	uxtb	r2, r2
 8003a82:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	1c5a      	adds	r2, r3, #1
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a92:	3b01      	subs	r3, #1
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	f003 0304 	and.w	r3, r3, #4
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	d124      	bne.n	8003b00 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aba:	2b03      	cmp	r3, #3
 8003abc:	d107      	bne.n	8003ace <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003acc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	691a      	ldr	r2, [r3, #16]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	b2d2      	uxtb	r2, r2
 8003ada:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	1c5a      	adds	r2, r3, #1
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aea:	3b01      	subs	r3, #1
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	3b01      	subs	r3, #1
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f47f aeb6 	bne.w	8003876 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b22:	2300      	movs	r3, #0
 8003b24:	e000      	b.n	8003b28 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003b26:	2302      	movs	r3, #2
  }
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3728      	adds	r7, #40	; 0x28
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	00010004 	.word	0x00010004

08003b34 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b088      	sub	sp, #32
 8003b38:	af02      	add	r7, sp, #8
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	4608      	mov	r0, r1
 8003b3e:	4611      	mov	r1, r2
 8003b40:	461a      	mov	r2, r3
 8003b42:	4603      	mov	r3, r0
 8003b44:	817b      	strh	r3, [r7, #10]
 8003b46:	460b      	mov	r3, r1
 8003b48:	813b      	strh	r3, [r7, #8]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b4e:	f7fe fff3 	bl	8002b38 <HAL_GetTick>
 8003b52:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b20      	cmp	r3, #32
 8003b5e:	f040 80d9 	bne.w	8003d14 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	2319      	movs	r3, #25
 8003b68:	2201      	movs	r2, #1
 8003b6a:	496d      	ldr	r1, [pc, #436]	; (8003d20 <HAL_I2C_Mem_Write+0x1ec>)
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 fddb 	bl	8004728 <I2C_WaitOnFlagUntilTimeout>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e0cc      	b.n	8003d16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d101      	bne.n	8003b8a <HAL_I2C_Mem_Write+0x56>
 8003b86:	2302      	movs	r3, #2
 8003b88:	e0c5      	b.n	8003d16 <HAL_I2C_Mem_Write+0x1e2>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d007      	beq.n	8003bb0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 0201 	orr.w	r2, r2, #1
 8003bae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bbe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2221      	movs	r2, #33	; 0x21
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2240      	movs	r2, #64	; 0x40
 8003bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6a3a      	ldr	r2, [r7, #32]
 8003bda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003be0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4a4d      	ldr	r2, [pc, #308]	; (8003d24 <HAL_I2C_Mem_Write+0x1f0>)
 8003bf0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bf2:	88f8      	ldrh	r0, [r7, #6]
 8003bf4:	893a      	ldrh	r2, [r7, #8]
 8003bf6:	8979      	ldrh	r1, [r7, #10]
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	9301      	str	r3, [sp, #4]
 8003bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	4603      	mov	r3, r0
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 fc12 	bl	800442c <I2C_RequestMemoryWrite>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d052      	beq.n	8003cb4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e081      	b.n	8003d16 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f000 fea0 	bl	800495c <I2C_WaitOnTXEFlagUntilTimeout>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00d      	beq.n	8003c3e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d107      	bne.n	8003c3a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e06b      	b.n	8003d16 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	781a      	ldrb	r2, [r3, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4e:	1c5a      	adds	r2, r3, #1
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	3b01      	subs	r3, #1
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	f003 0304 	and.w	r3, r3, #4
 8003c78:	2b04      	cmp	r3, #4
 8003c7a:	d11b      	bne.n	8003cb4 <HAL_I2C_Mem_Write+0x180>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d017      	beq.n	8003cb4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c88:	781a      	ldrb	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c94:	1c5a      	adds	r2, r3, #1
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	3b01      	subs	r3, #1
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1aa      	bne.n	8003c12 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 fe93 	bl	80049ec <I2C_WaitOnBTFFlagUntilTimeout>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00d      	beq.n	8003ce8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd0:	2b04      	cmp	r3, #4
 8003cd2:	d107      	bne.n	8003ce4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e016      	b.n	8003d16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d10:	2300      	movs	r3, #0
 8003d12:	e000      	b.n	8003d16 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003d14:	2302      	movs	r3, #2
  }
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3718      	adds	r7, #24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	00100002 	.word	0x00100002
 8003d24:	ffff0000 	.word	0xffff0000

08003d28 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b08c      	sub	sp, #48	; 0x30
 8003d2c:	af02      	add	r7, sp, #8
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	4608      	mov	r0, r1
 8003d32:	4611      	mov	r1, r2
 8003d34:	461a      	mov	r2, r3
 8003d36:	4603      	mov	r3, r0
 8003d38:	817b      	strh	r3, [r7, #10]
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	813b      	strh	r3, [r7, #8]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d42:	f7fe fef9 	bl	8002b38 <HAL_GetTick>
 8003d46:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b20      	cmp	r3, #32
 8003d52:	f040 8214 	bne.w	800417e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	2319      	movs	r3, #25
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	497b      	ldr	r1, [pc, #492]	; (8003f4c <HAL_I2C_Mem_Read+0x224>)
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f000 fce1 	bl	8004728 <I2C_WaitOnFlagUntilTimeout>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d001      	beq.n	8003d70 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e207      	b.n	8004180 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d101      	bne.n	8003d7e <HAL_I2C_Mem_Read+0x56>
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	e200      	b.n	8004180 <HAL_I2C_Mem_Read+0x458>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d007      	beq.n	8003da4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f042 0201 	orr.w	r2, r2, #1
 8003da2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003db2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2222      	movs	r2, #34	; 0x22
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2240      	movs	r2, #64	; 0x40
 8003dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003dd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4a5b      	ldr	r2, [pc, #364]	; (8003f50 <HAL_I2C_Mem_Read+0x228>)
 8003de4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003de6:	88f8      	ldrh	r0, [r7, #6]
 8003de8:	893a      	ldrh	r2, [r7, #8]
 8003dea:	8979      	ldrh	r1, [r7, #10]
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	9301      	str	r3, [sp, #4]
 8003df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	4603      	mov	r3, r0
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 fbae 	bl	8004558 <I2C_RequestMemoryRead>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e1bc      	b.n	8004180 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d113      	bne.n	8003e36 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e0e:	2300      	movs	r3, #0
 8003e10:	623b      	str	r3, [r7, #32]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	623b      	str	r3, [r7, #32]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	623b      	str	r3, [r7, #32]
 8003e22:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	e190      	b.n	8004158 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d11b      	bne.n	8003e76 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e4e:	2300      	movs	r3, #0
 8003e50:	61fb      	str	r3, [r7, #28]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	61fb      	str	r3, [r7, #28]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	61fb      	str	r3, [r7, #28]
 8003e62:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	e170      	b.n	8004158 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d11b      	bne.n	8003eb6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e8c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	61bb      	str	r3, [r7, #24]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	61bb      	str	r3, [r7, #24]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	61bb      	str	r3, [r7, #24]
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	e150      	b.n	8004158 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	617b      	str	r3, [r7, #20]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	617b      	str	r3, [r7, #20]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	617b      	str	r3, [r7, #20]
 8003eca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003ecc:	e144      	b.n	8004158 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed2:	2b03      	cmp	r3, #3
 8003ed4:	f200 80f1 	bhi.w	80040ba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d123      	bne.n	8003f28 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ee2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f000 fdc9 	bl	8004a7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e145      	b.n	8004180 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	691a      	ldr	r2, [r3, #16]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	b2d2      	uxtb	r2, r2
 8003f00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	1c5a      	adds	r2, r3, #1
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f10:	3b01      	subs	r3, #1
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f26:	e117      	b.n	8004158 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d14e      	bne.n	8003fce <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f36:	2200      	movs	r2, #0
 8003f38:	4906      	ldr	r1, [pc, #24]	; (8003f54 <HAL_I2C_Mem_Read+0x22c>)
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f000 fbf4 	bl	8004728 <I2C_WaitOnFlagUntilTimeout>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d008      	beq.n	8003f58 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e11a      	b.n	8004180 <HAL_I2C_Mem_Read+0x458>
 8003f4a:	bf00      	nop
 8003f4c:	00100002 	.word	0x00100002
 8003f50:	ffff0000 	.word	0xffff0000
 8003f54:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	691a      	ldr	r2, [r3, #16]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	b2d2      	uxtb	r2, r2
 8003f74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	1c5a      	adds	r2, r3, #1
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f84:	3b01      	subs	r3, #1
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	3b01      	subs	r3, #1
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	691a      	ldr	r2, [r3, #16]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa4:	b2d2      	uxtb	r2, r2
 8003fa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	1c5a      	adds	r2, r3, #1
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fcc:	e0c4      	b.n	8004158 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	496c      	ldr	r1, [pc, #432]	; (8004188 <HAL_I2C_Mem_Read+0x460>)
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 fba5 	bl	8004728 <I2C_WaitOnFlagUntilTimeout>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e0cb      	b.n	8004180 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ff6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	691a      	ldr	r2, [r3, #16]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	b2d2      	uxtb	r2, r2
 8004004:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	1c5a      	adds	r2, r3, #1
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004014:	3b01      	subs	r3, #1
 8004016:	b29a      	uxth	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004020:	b29b      	uxth	r3, r3
 8004022:	3b01      	subs	r3, #1
 8004024:	b29a      	uxth	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004030:	2200      	movs	r2, #0
 8004032:	4955      	ldr	r1, [pc, #340]	; (8004188 <HAL_I2C_Mem_Read+0x460>)
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 fb77 	bl	8004728 <I2C_WaitOnFlagUntilTimeout>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e09d      	b.n	8004180 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004052:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	691a      	ldr	r2, [r3, #16]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405e:	b2d2      	uxtb	r2, r2
 8004060:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004066:	1c5a      	adds	r2, r3, #1
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004070:	3b01      	subs	r3, #1
 8004072:	b29a      	uxth	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800407c:	b29b      	uxth	r3, r3
 800407e:	3b01      	subs	r3, #1
 8004080:	b29a      	uxth	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	691a      	ldr	r2, [r3, #16]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	b2d2      	uxtb	r2, r2
 8004092:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004098:	1c5a      	adds	r2, r3, #1
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a2:	3b01      	subs	r3, #1
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	3b01      	subs	r3, #1
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040b8:	e04e      	b.n	8004158 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f000 fcdc 	bl	8004a7c <I2C_WaitOnRXNEFlagUntilTimeout>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e058      	b.n	8004180 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	691a      	ldr	r2, [r3, #16]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	b2d2      	uxtb	r2, r2
 80040da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	1c5a      	adds	r2, r3, #1
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ea:	3b01      	subs	r3, #1
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	3b01      	subs	r3, #1
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	f003 0304 	and.w	r3, r3, #4
 800410a:	2b04      	cmp	r3, #4
 800410c:	d124      	bne.n	8004158 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004112:	2b03      	cmp	r3, #3
 8004114:	d107      	bne.n	8004126 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004124:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	691a      	ldr	r2, [r3, #16]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	b2d2      	uxtb	r2, r2
 8004132:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	1c5a      	adds	r2, r3, #1
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004142:	3b01      	subs	r3, #1
 8004144:	b29a      	uxth	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414e:	b29b      	uxth	r3, r3
 8004150:	3b01      	subs	r3, #1
 8004152:	b29a      	uxth	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800415c:	2b00      	cmp	r3, #0
 800415e:	f47f aeb6 	bne.w	8003ece <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2220      	movs	r2, #32
 8004166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	e000      	b.n	8004180 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800417e:	2302      	movs	r3, #2
  }
}
 8004180:	4618      	mov	r0, r3
 8004182:	3728      	adds	r7, #40	; 0x28
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	00010004 	.word	0x00010004

0800418c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b088      	sub	sp, #32
 8004190:	af02      	add	r7, sp, #8
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	607a      	str	r2, [r7, #4]
 8004196:	603b      	str	r3, [r7, #0]
 8004198:	460b      	mov	r3, r1
 800419a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	d006      	beq.n	80041b6 <I2C_MasterRequestWrite+0x2a>
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d003      	beq.n	80041b6 <I2C_MasterRequestWrite+0x2a>
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041b4:	d108      	bne.n	80041c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	e00b      	b.n	80041e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041cc:	2b12      	cmp	r3, #18
 80041ce:	d107      	bne.n	80041e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 fa9b 	bl	8004728 <I2C_WaitOnFlagUntilTimeout>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00d      	beq.n	8004214 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004206:	d103      	bne.n	8004210 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800420e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e035      	b.n	8004280 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800421c:	d108      	bne.n	8004230 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800421e:	897b      	ldrh	r3, [r7, #10]
 8004220:	b2db      	uxtb	r3, r3
 8004222:	461a      	mov	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800422c:	611a      	str	r2, [r3, #16]
 800422e:	e01b      	b.n	8004268 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004230:	897b      	ldrh	r3, [r7, #10]
 8004232:	11db      	asrs	r3, r3, #7
 8004234:	b2db      	uxtb	r3, r3
 8004236:	f003 0306 	and.w	r3, r3, #6
 800423a:	b2db      	uxtb	r3, r3
 800423c:	f063 030f 	orn	r3, r3, #15
 8004240:	b2da      	uxtb	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	490e      	ldr	r1, [pc, #56]	; (8004288 <I2C_MasterRequestWrite+0xfc>)
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 fae4 	bl	800481c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e010      	b.n	8004280 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800425e:	897b      	ldrh	r3, [r7, #10]
 8004260:	b2da      	uxtb	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	4907      	ldr	r1, [pc, #28]	; (800428c <I2C_MasterRequestWrite+0x100>)
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 fad4 	bl	800481c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e000      	b.n	8004280 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3718      	adds	r7, #24
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	00010008 	.word	0x00010008
 800428c:	00010002 	.word	0x00010002

08004290 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b088      	sub	sp, #32
 8004294:	af02      	add	r7, sp, #8
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	607a      	str	r2, [r7, #4]
 800429a:	603b      	str	r3, [r7, #0]
 800429c:	460b      	mov	r3, r1
 800429e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042b4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	d006      	beq.n	80042ca <I2C_MasterRequestRead+0x3a>
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d003      	beq.n	80042ca <I2C_MasterRequestRead+0x3a>
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042c8:	d108      	bne.n	80042dc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	e00b      	b.n	80042f4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e0:	2b11      	cmp	r3, #17
 80042e2:	d107      	bne.n	80042f4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f000 fa11 	bl	8004728 <I2C_WaitOnFlagUntilTimeout>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00d      	beq.n	8004328 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004316:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800431a:	d103      	bne.n	8004324 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004322:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e079      	b.n	800441c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004330:	d108      	bne.n	8004344 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004332:	897b      	ldrh	r3, [r7, #10]
 8004334:	b2db      	uxtb	r3, r3
 8004336:	f043 0301 	orr.w	r3, r3, #1
 800433a:	b2da      	uxtb	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	611a      	str	r2, [r3, #16]
 8004342:	e05f      	b.n	8004404 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004344:	897b      	ldrh	r3, [r7, #10]
 8004346:	11db      	asrs	r3, r3, #7
 8004348:	b2db      	uxtb	r3, r3
 800434a:	f003 0306 	and.w	r3, r3, #6
 800434e:	b2db      	uxtb	r3, r3
 8004350:	f063 030f 	orn	r3, r3, #15
 8004354:	b2da      	uxtb	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	4930      	ldr	r1, [pc, #192]	; (8004424 <I2C_MasterRequestRead+0x194>)
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f000 fa5a 	bl	800481c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e054      	b.n	800441c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004372:	897b      	ldrh	r3, [r7, #10]
 8004374:	b2da      	uxtb	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	4929      	ldr	r1, [pc, #164]	; (8004428 <I2C_MasterRequestRead+0x198>)
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 fa4a 	bl	800481c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e044      	b.n	800441c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004392:	2300      	movs	r3, #0
 8004394:	613b      	str	r3, [r7, #16]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	613b      	str	r3, [r7, #16]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	613b      	str	r3, [r7, #16]
 80043a6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043b6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	9300      	str	r3, [sp, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f000 f9af 	bl	8004728 <I2C_WaitOnFlagUntilTimeout>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00d      	beq.n	80043ec <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043de:	d103      	bne.n	80043e8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043e6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e017      	b.n	800441c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80043ec:	897b      	ldrh	r3, [r7, #10]
 80043ee:	11db      	asrs	r3, r3, #7
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	f003 0306 	and.w	r3, r3, #6
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	f063 030e 	orn	r3, r3, #14
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	4907      	ldr	r1, [pc, #28]	; (8004428 <I2C_MasterRequestRead+0x198>)
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 fa06 	bl	800481c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3718      	adds	r7, #24
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	00010008 	.word	0x00010008
 8004428:	00010002 	.word	0x00010002

0800442c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b088      	sub	sp, #32
 8004430:	af02      	add	r7, sp, #8
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	4608      	mov	r0, r1
 8004436:	4611      	mov	r1, r2
 8004438:	461a      	mov	r2, r3
 800443a:	4603      	mov	r3, r0
 800443c:	817b      	strh	r3, [r7, #10]
 800443e:	460b      	mov	r3, r1
 8004440:	813b      	strh	r3, [r7, #8]
 8004442:	4613      	mov	r3, r2
 8004444:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004454:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	6a3b      	ldr	r3, [r7, #32]
 800445c:	2200      	movs	r2, #0
 800445e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f000 f960 	bl	8004728 <I2C_WaitOnFlagUntilTimeout>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00d      	beq.n	800448a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800447c:	d103      	bne.n	8004486 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004484:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e05f      	b.n	800454a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800448a:	897b      	ldrh	r3, [r7, #10]
 800448c:	b2db      	uxtb	r3, r3
 800448e:	461a      	mov	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004498:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	6a3a      	ldr	r2, [r7, #32]
 800449e:	492d      	ldr	r1, [pc, #180]	; (8004554 <I2C_RequestMemoryWrite+0x128>)
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 f9bb 	bl	800481c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e04c      	b.n	800454a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044b0:	2300      	movs	r3, #0
 80044b2:	617b      	str	r3, [r7, #20]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	617b      	str	r3, [r7, #20]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	617b      	str	r3, [r7, #20]
 80044c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c8:	6a39      	ldr	r1, [r7, #32]
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f000 fa46 	bl	800495c <I2C_WaitOnTXEFlagUntilTimeout>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00d      	beq.n	80044f2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	2b04      	cmp	r3, #4
 80044dc:	d107      	bne.n	80044ee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e02b      	b.n	800454a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044f2:	88fb      	ldrh	r3, [r7, #6]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d105      	bne.n	8004504 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044f8:	893b      	ldrh	r3, [r7, #8]
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	611a      	str	r2, [r3, #16]
 8004502:	e021      	b.n	8004548 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004504:	893b      	ldrh	r3, [r7, #8]
 8004506:	0a1b      	lsrs	r3, r3, #8
 8004508:	b29b      	uxth	r3, r3
 800450a:	b2da      	uxtb	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004514:	6a39      	ldr	r1, [r7, #32]
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f000 fa20 	bl	800495c <I2C_WaitOnTXEFlagUntilTimeout>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00d      	beq.n	800453e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	2b04      	cmp	r3, #4
 8004528:	d107      	bne.n	800453a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004538:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e005      	b.n	800454a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800453e:	893b      	ldrh	r3, [r7, #8]
 8004540:	b2da      	uxtb	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3718      	adds	r7, #24
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	00010002 	.word	0x00010002

08004558 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b088      	sub	sp, #32
 800455c:	af02      	add	r7, sp, #8
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	4608      	mov	r0, r1
 8004562:	4611      	mov	r1, r2
 8004564:	461a      	mov	r2, r3
 8004566:	4603      	mov	r3, r0
 8004568:	817b      	strh	r3, [r7, #10]
 800456a:	460b      	mov	r3, r1
 800456c:	813b      	strh	r3, [r7, #8]
 800456e:	4613      	mov	r3, r2
 8004570:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004580:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004590:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	6a3b      	ldr	r3, [r7, #32]
 8004598:	2200      	movs	r2, #0
 800459a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f000 f8c2 	bl	8004728 <I2C_WaitOnFlagUntilTimeout>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00d      	beq.n	80045c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045b8:	d103      	bne.n	80045c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e0aa      	b.n	800471c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045c6:	897b      	ldrh	r3, [r7, #10]
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	461a      	mov	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	6a3a      	ldr	r2, [r7, #32]
 80045da:	4952      	ldr	r1, [pc, #328]	; (8004724 <I2C_RequestMemoryRead+0x1cc>)
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f000 f91d 	bl	800481c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e097      	b.n	800471c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ec:	2300      	movs	r3, #0
 80045ee:	617b      	str	r3, [r7, #20]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	617b      	str	r3, [r7, #20]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	617b      	str	r3, [r7, #20]
 8004600:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004604:	6a39      	ldr	r1, [r7, #32]
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 f9a8 	bl	800495c <I2C_WaitOnTXEFlagUntilTimeout>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00d      	beq.n	800462e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	2b04      	cmp	r3, #4
 8004618:	d107      	bne.n	800462a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004628:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e076      	b.n	800471c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800462e:	88fb      	ldrh	r3, [r7, #6]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d105      	bne.n	8004640 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004634:	893b      	ldrh	r3, [r7, #8]
 8004636:	b2da      	uxtb	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	611a      	str	r2, [r3, #16]
 800463e:	e021      	b.n	8004684 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004640:	893b      	ldrh	r3, [r7, #8]
 8004642:	0a1b      	lsrs	r3, r3, #8
 8004644:	b29b      	uxth	r3, r3
 8004646:	b2da      	uxtb	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800464e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004650:	6a39      	ldr	r1, [r7, #32]
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f000 f982 	bl	800495c <I2C_WaitOnTXEFlagUntilTimeout>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00d      	beq.n	800467a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	2b04      	cmp	r3, #4
 8004664:	d107      	bne.n	8004676 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004674:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e050      	b.n	800471c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800467a:	893b      	ldrh	r3, [r7, #8]
 800467c:	b2da      	uxtb	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004686:	6a39      	ldr	r1, [r7, #32]
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f000 f967 	bl	800495c <I2C_WaitOnTXEFlagUntilTimeout>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00d      	beq.n	80046b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004698:	2b04      	cmp	r3, #4
 800469a:	d107      	bne.n	80046ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e035      	b.n	800471c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	6a3b      	ldr	r3, [r7, #32]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f000 f82b 	bl	8004728 <I2C_WaitOnFlagUntilTimeout>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00d      	beq.n	80046f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046e6:	d103      	bne.n	80046f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e013      	b.n	800471c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80046f4:	897b      	ldrh	r3, [r7, #10]
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	f043 0301 	orr.w	r3, r3, #1
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	6a3a      	ldr	r2, [r7, #32]
 8004708:	4906      	ldr	r1, [pc, #24]	; (8004724 <I2C_RequestMemoryRead+0x1cc>)
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f000 f886 	bl	800481c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d001      	beq.n	800471a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e000      	b.n	800471c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3718      	adds	r7, #24
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	00010002 	.word	0x00010002

08004728 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	603b      	str	r3, [r7, #0]
 8004734:	4613      	mov	r3, r2
 8004736:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004738:	e048      	b.n	80047cc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004740:	d044      	beq.n	80047cc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004742:	f7fe f9f9 	bl	8002b38 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	429a      	cmp	r2, r3
 8004750:	d302      	bcc.n	8004758 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d139      	bne.n	80047cc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	0c1b      	lsrs	r3, r3, #16
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b01      	cmp	r3, #1
 8004760:	d10d      	bne.n	800477e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	43da      	mvns	r2, r3
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	4013      	ands	r3, r2
 800476e:	b29b      	uxth	r3, r3
 8004770:	2b00      	cmp	r3, #0
 8004772:	bf0c      	ite	eq
 8004774:	2301      	moveq	r3, #1
 8004776:	2300      	movne	r3, #0
 8004778:	b2db      	uxtb	r3, r3
 800477a:	461a      	mov	r2, r3
 800477c:	e00c      	b.n	8004798 <I2C_WaitOnFlagUntilTimeout+0x70>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	43da      	mvns	r2, r3
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	4013      	ands	r3, r2
 800478a:	b29b      	uxth	r3, r3
 800478c:	2b00      	cmp	r3, #0
 800478e:	bf0c      	ite	eq
 8004790:	2301      	moveq	r3, #1
 8004792:	2300      	movne	r3, #0
 8004794:	b2db      	uxtb	r3, r3
 8004796:	461a      	mov	r2, r3
 8004798:	79fb      	ldrb	r3, [r7, #7]
 800479a:	429a      	cmp	r2, r3
 800479c:	d116      	bne.n	80047cc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2220      	movs	r2, #32
 80047a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b8:	f043 0220 	orr.w	r2, r3, #32
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e023      	b.n	8004814 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	0c1b      	lsrs	r3, r3, #16
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d10d      	bne.n	80047f2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	43da      	mvns	r2, r3
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	4013      	ands	r3, r2
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	bf0c      	ite	eq
 80047e8:	2301      	moveq	r3, #1
 80047ea:	2300      	movne	r3, #0
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	461a      	mov	r2, r3
 80047f0:	e00c      	b.n	800480c <I2C_WaitOnFlagUntilTimeout+0xe4>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	43da      	mvns	r2, r3
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	4013      	ands	r3, r2
 80047fe:	b29b      	uxth	r3, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	bf0c      	ite	eq
 8004804:	2301      	moveq	r3, #1
 8004806:	2300      	movne	r3, #0
 8004808:	b2db      	uxtb	r3, r3
 800480a:	461a      	mov	r2, r3
 800480c:	79fb      	ldrb	r3, [r7, #7]
 800480e:	429a      	cmp	r2, r3
 8004810:	d093      	beq.n	800473a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
 8004828:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800482a:	e071      	b.n	8004910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800483a:	d123      	bne.n	8004884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800484a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004854:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2220      	movs	r2, #32
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004870:	f043 0204 	orr.w	r2, r3, #4
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e067      	b.n	8004954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488a:	d041      	beq.n	8004910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800488c:	f7fe f954 	bl	8002b38 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	429a      	cmp	r2, r3
 800489a:	d302      	bcc.n	80048a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d136      	bne.n	8004910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	0c1b      	lsrs	r3, r3, #16
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d10c      	bne.n	80048c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	43da      	mvns	r2, r3
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	4013      	ands	r3, r2
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	bf14      	ite	ne
 80048be:	2301      	movne	r3, #1
 80048c0:	2300      	moveq	r3, #0
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	e00b      	b.n	80048de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	43da      	mvns	r2, r3
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	4013      	ands	r3, r2
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	bf14      	ite	ne
 80048d8:	2301      	movne	r3, #1
 80048da:	2300      	moveq	r3, #0
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d016      	beq.n	8004910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2220      	movs	r2, #32
 80048ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fc:	f043 0220 	orr.w	r2, r3, #32
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e021      	b.n	8004954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	0c1b      	lsrs	r3, r3, #16
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b01      	cmp	r3, #1
 8004918:	d10c      	bne.n	8004934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	43da      	mvns	r2, r3
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	4013      	ands	r3, r2
 8004926:	b29b      	uxth	r3, r3
 8004928:	2b00      	cmp	r3, #0
 800492a:	bf14      	ite	ne
 800492c:	2301      	movne	r3, #1
 800492e:	2300      	moveq	r3, #0
 8004930:	b2db      	uxtb	r3, r3
 8004932:	e00b      	b.n	800494c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	43da      	mvns	r2, r3
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	4013      	ands	r3, r2
 8004940:	b29b      	uxth	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	bf14      	ite	ne
 8004946:	2301      	movne	r3, #1
 8004948:	2300      	moveq	r3, #0
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b00      	cmp	r3, #0
 800494e:	f47f af6d 	bne.w	800482c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004968:	e034      	b.n	80049d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f000 f8e3 	bl	8004b36 <I2C_IsAcknowledgeFailed>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d001      	beq.n	800497a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e034      	b.n	80049e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004980:	d028      	beq.n	80049d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004982:	f7fe f8d9 	bl	8002b38 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	429a      	cmp	r2, r3
 8004990:	d302      	bcc.n	8004998 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d11d      	bne.n	80049d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a2:	2b80      	cmp	r3, #128	; 0x80
 80049a4:	d016      	beq.n	80049d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2220      	movs	r2, #32
 80049b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c0:	f043 0220 	orr.w	r2, r3, #32
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e007      	b.n	80049e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049de:	2b80      	cmp	r3, #128	; 0x80
 80049e0:	d1c3      	bne.n	800496a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049f8:	e034      	b.n	8004a64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f000 f89b 	bl	8004b36 <I2C_IsAcknowledgeFailed>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e034      	b.n	8004a74 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a10:	d028      	beq.n	8004a64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a12:	f7fe f891 	bl	8002b38 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d302      	bcc.n	8004a28 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d11d      	bne.n	8004a64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	f003 0304 	and.w	r3, r3, #4
 8004a32:	2b04      	cmp	r3, #4
 8004a34:	d016      	beq.n	8004a64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a50:	f043 0220 	orr.w	r2, r3, #32
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e007      	b.n	8004a74 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	f003 0304 	and.w	r3, r3, #4
 8004a6e:	2b04      	cmp	r3, #4
 8004a70:	d1c3      	bne.n	80049fa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a88:	e049      	b.n	8004b1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	f003 0310 	and.w	r3, r3, #16
 8004a94:	2b10      	cmp	r3, #16
 8004a96:	d119      	bne.n	8004acc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f06f 0210 	mvn.w	r2, #16
 8004aa0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e030      	b.n	8004b2e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004acc:	f7fe f834 	bl	8002b38 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d302      	bcc.n	8004ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d11d      	bne.n	8004b1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aec:	2b40      	cmp	r3, #64	; 0x40
 8004aee:	d016      	beq.n	8004b1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2220      	movs	r2, #32
 8004afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	f043 0220 	orr.w	r2, r3, #32
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e007      	b.n	8004b2e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b28:	2b40      	cmp	r3, #64	; 0x40
 8004b2a:	d1ae      	bne.n	8004a8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b4c:	d11b      	bne.n	8004b86 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b56:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2220      	movs	r2, #32
 8004b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	f043 0204 	orr.w	r2, r3, #4
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e000      	b.n	8004b88 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e267      	b.n	8005076 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d075      	beq.n	8004c9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bb2:	4b88      	ldr	r3, [pc, #544]	; (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f003 030c 	and.w	r3, r3, #12
 8004bba:	2b04      	cmp	r3, #4
 8004bbc:	d00c      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bbe:	4b85      	ldr	r3, [pc, #532]	; (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bc6:	2b08      	cmp	r3, #8
 8004bc8:	d112      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bca:	4b82      	ldr	r3, [pc, #520]	; (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bd6:	d10b      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bd8:	4b7e      	ldr	r3, [pc, #504]	; (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d05b      	beq.n	8004c9c <HAL_RCC_OscConfig+0x108>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d157      	bne.n	8004c9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e242      	b.n	8005076 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bf8:	d106      	bne.n	8004c08 <HAL_RCC_OscConfig+0x74>
 8004bfa:	4b76      	ldr	r3, [pc, #472]	; (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a75      	ldr	r2, [pc, #468]	; (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c04:	6013      	str	r3, [r2, #0]
 8004c06:	e01d      	b.n	8004c44 <HAL_RCC_OscConfig+0xb0>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c10:	d10c      	bne.n	8004c2c <HAL_RCC_OscConfig+0x98>
 8004c12:	4b70      	ldr	r3, [pc, #448]	; (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a6f      	ldr	r2, [pc, #444]	; (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c1c:	6013      	str	r3, [r2, #0]
 8004c1e:	4b6d      	ldr	r3, [pc, #436]	; (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a6c      	ldr	r2, [pc, #432]	; (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	e00b      	b.n	8004c44 <HAL_RCC_OscConfig+0xb0>
 8004c2c:	4b69      	ldr	r3, [pc, #420]	; (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a68      	ldr	r2, [pc, #416]	; (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c36:	6013      	str	r3, [r2, #0]
 8004c38:	4b66      	ldr	r3, [pc, #408]	; (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a65      	ldr	r2, [pc, #404]	; (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d013      	beq.n	8004c74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c4c:	f7fd ff74 	bl	8002b38 <HAL_GetTick>
 8004c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c52:	e008      	b.n	8004c66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c54:	f7fd ff70 	bl	8002b38 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b64      	cmp	r3, #100	; 0x64
 8004c60:	d901      	bls.n	8004c66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e207      	b.n	8005076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c66:	4b5b      	ldr	r3, [pc, #364]	; (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d0f0      	beq.n	8004c54 <HAL_RCC_OscConfig+0xc0>
 8004c72:	e014      	b.n	8004c9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c74:	f7fd ff60 	bl	8002b38 <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c7c:	f7fd ff5c 	bl	8002b38 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b64      	cmp	r3, #100	; 0x64
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e1f3      	b.n	8005076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c8e:	4b51      	ldr	r3, [pc, #324]	; (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1f0      	bne.n	8004c7c <HAL_RCC_OscConfig+0xe8>
 8004c9a:	e000      	b.n	8004c9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d063      	beq.n	8004d72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004caa:	4b4a      	ldr	r3, [pc, #296]	; (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 030c 	and.w	r3, r3, #12
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00b      	beq.n	8004cce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cb6:	4b47      	ldr	r3, [pc, #284]	; (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cbe:	2b08      	cmp	r3, #8
 8004cc0:	d11c      	bne.n	8004cfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cc2:	4b44      	ldr	r3, [pc, #272]	; (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d116      	bne.n	8004cfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cce:	4b41      	ldr	r3, [pc, #260]	; (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d005      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x152>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d001      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e1c7      	b.n	8005076 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ce6:	4b3b      	ldr	r3, [pc, #236]	; (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	00db      	lsls	r3, r3, #3
 8004cf4:	4937      	ldr	r1, [pc, #220]	; (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cfa:	e03a      	b.n	8004d72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d020      	beq.n	8004d46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d04:	4b34      	ldr	r3, [pc, #208]	; (8004dd8 <HAL_RCC_OscConfig+0x244>)
 8004d06:	2201      	movs	r2, #1
 8004d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d0a:	f7fd ff15 	bl	8002b38 <HAL_GetTick>
 8004d0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d10:	e008      	b.n	8004d24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d12:	f7fd ff11 	bl	8002b38 <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d901      	bls.n	8004d24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e1a8      	b.n	8005076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d24:	4b2b      	ldr	r3, [pc, #172]	; (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d0f0      	beq.n	8004d12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d30:	4b28      	ldr	r3, [pc, #160]	; (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	00db      	lsls	r3, r3, #3
 8004d3e:	4925      	ldr	r1, [pc, #148]	; (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	600b      	str	r3, [r1, #0]
 8004d44:	e015      	b.n	8004d72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d46:	4b24      	ldr	r3, [pc, #144]	; (8004dd8 <HAL_RCC_OscConfig+0x244>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d4c:	f7fd fef4 	bl	8002b38 <HAL_GetTick>
 8004d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d52:	e008      	b.n	8004d66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d54:	f7fd fef0 	bl	8002b38 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e187      	b.n	8005076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d66:	4b1b      	ldr	r3, [pc, #108]	; (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1f0      	bne.n	8004d54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0308 	and.w	r3, r3, #8
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d036      	beq.n	8004dec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d016      	beq.n	8004db4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d86:	4b15      	ldr	r3, [pc, #84]	; (8004ddc <HAL_RCC_OscConfig+0x248>)
 8004d88:	2201      	movs	r2, #1
 8004d8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d8c:	f7fd fed4 	bl	8002b38 <HAL_GetTick>
 8004d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d94:	f7fd fed0 	bl	8002b38 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e167      	b.n	8005076 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004da6:	4b0b      	ldr	r3, [pc, #44]	; (8004dd4 <HAL_RCC_OscConfig+0x240>)
 8004da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d0f0      	beq.n	8004d94 <HAL_RCC_OscConfig+0x200>
 8004db2:	e01b      	b.n	8004dec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004db4:	4b09      	ldr	r3, [pc, #36]	; (8004ddc <HAL_RCC_OscConfig+0x248>)
 8004db6:	2200      	movs	r2, #0
 8004db8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dba:	f7fd febd 	bl	8002b38 <HAL_GetTick>
 8004dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dc0:	e00e      	b.n	8004de0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dc2:	f7fd feb9 	bl	8002b38 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d907      	bls.n	8004de0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e150      	b.n	8005076 <HAL_RCC_OscConfig+0x4e2>
 8004dd4:	40023800 	.word	0x40023800
 8004dd8:	42470000 	.word	0x42470000
 8004ddc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004de0:	4b88      	ldr	r3, [pc, #544]	; (8005004 <HAL_RCC_OscConfig+0x470>)
 8004de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1ea      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0304 	and.w	r3, r3, #4
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 8097 	beq.w	8004f28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dfe:	4b81      	ldr	r3, [pc, #516]	; (8005004 <HAL_RCC_OscConfig+0x470>)
 8004e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d10f      	bne.n	8004e2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	60bb      	str	r3, [r7, #8]
 8004e0e:	4b7d      	ldr	r3, [pc, #500]	; (8005004 <HAL_RCC_OscConfig+0x470>)
 8004e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e12:	4a7c      	ldr	r2, [pc, #496]	; (8005004 <HAL_RCC_OscConfig+0x470>)
 8004e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e18:	6413      	str	r3, [r2, #64]	; 0x40
 8004e1a:	4b7a      	ldr	r3, [pc, #488]	; (8005004 <HAL_RCC_OscConfig+0x470>)
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e22:	60bb      	str	r3, [r7, #8]
 8004e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e26:	2301      	movs	r3, #1
 8004e28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e2a:	4b77      	ldr	r3, [pc, #476]	; (8005008 <HAL_RCC_OscConfig+0x474>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d118      	bne.n	8004e68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e36:	4b74      	ldr	r3, [pc, #464]	; (8005008 <HAL_RCC_OscConfig+0x474>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a73      	ldr	r2, [pc, #460]	; (8005008 <HAL_RCC_OscConfig+0x474>)
 8004e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e42:	f7fd fe79 	bl	8002b38 <HAL_GetTick>
 8004e46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e48:	e008      	b.n	8004e5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e4a:	f7fd fe75 	bl	8002b38 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d901      	bls.n	8004e5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e10c      	b.n	8005076 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e5c:	4b6a      	ldr	r3, [pc, #424]	; (8005008 <HAL_RCC_OscConfig+0x474>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0f0      	beq.n	8004e4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d106      	bne.n	8004e7e <HAL_RCC_OscConfig+0x2ea>
 8004e70:	4b64      	ldr	r3, [pc, #400]	; (8005004 <HAL_RCC_OscConfig+0x470>)
 8004e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e74:	4a63      	ldr	r2, [pc, #396]	; (8005004 <HAL_RCC_OscConfig+0x470>)
 8004e76:	f043 0301 	orr.w	r3, r3, #1
 8004e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e7c:	e01c      	b.n	8004eb8 <HAL_RCC_OscConfig+0x324>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	2b05      	cmp	r3, #5
 8004e84:	d10c      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x30c>
 8004e86:	4b5f      	ldr	r3, [pc, #380]	; (8005004 <HAL_RCC_OscConfig+0x470>)
 8004e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8a:	4a5e      	ldr	r2, [pc, #376]	; (8005004 <HAL_RCC_OscConfig+0x470>)
 8004e8c:	f043 0304 	orr.w	r3, r3, #4
 8004e90:	6713      	str	r3, [r2, #112]	; 0x70
 8004e92:	4b5c      	ldr	r3, [pc, #368]	; (8005004 <HAL_RCC_OscConfig+0x470>)
 8004e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e96:	4a5b      	ldr	r2, [pc, #364]	; (8005004 <HAL_RCC_OscConfig+0x470>)
 8004e98:	f043 0301 	orr.w	r3, r3, #1
 8004e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e9e:	e00b      	b.n	8004eb8 <HAL_RCC_OscConfig+0x324>
 8004ea0:	4b58      	ldr	r3, [pc, #352]	; (8005004 <HAL_RCC_OscConfig+0x470>)
 8004ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea4:	4a57      	ldr	r2, [pc, #348]	; (8005004 <HAL_RCC_OscConfig+0x470>)
 8004ea6:	f023 0301 	bic.w	r3, r3, #1
 8004eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8004eac:	4b55      	ldr	r3, [pc, #340]	; (8005004 <HAL_RCC_OscConfig+0x470>)
 8004eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb0:	4a54      	ldr	r2, [pc, #336]	; (8005004 <HAL_RCC_OscConfig+0x470>)
 8004eb2:	f023 0304 	bic.w	r3, r3, #4
 8004eb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d015      	beq.n	8004eec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec0:	f7fd fe3a 	bl	8002b38 <HAL_GetTick>
 8004ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ec6:	e00a      	b.n	8004ede <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ec8:	f7fd fe36 	bl	8002b38 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e0cb      	b.n	8005076 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ede:	4b49      	ldr	r3, [pc, #292]	; (8005004 <HAL_RCC_OscConfig+0x470>)
 8004ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d0ee      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x334>
 8004eea:	e014      	b.n	8004f16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eec:	f7fd fe24 	bl	8002b38 <HAL_GetTick>
 8004ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ef2:	e00a      	b.n	8004f0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ef4:	f7fd fe20 	bl	8002b38 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e0b5      	b.n	8005076 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f0a:	4b3e      	ldr	r3, [pc, #248]	; (8005004 <HAL_RCC_OscConfig+0x470>)
 8004f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0e:	f003 0302 	and.w	r3, r3, #2
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1ee      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f16:	7dfb      	ldrb	r3, [r7, #23]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d105      	bne.n	8004f28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f1c:	4b39      	ldr	r3, [pc, #228]	; (8005004 <HAL_RCC_OscConfig+0x470>)
 8004f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f20:	4a38      	ldr	r2, [pc, #224]	; (8005004 <HAL_RCC_OscConfig+0x470>)
 8004f22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f000 80a1 	beq.w	8005074 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f32:	4b34      	ldr	r3, [pc, #208]	; (8005004 <HAL_RCC_OscConfig+0x470>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f003 030c 	and.w	r3, r3, #12
 8004f3a:	2b08      	cmp	r3, #8
 8004f3c:	d05c      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d141      	bne.n	8004fca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f46:	4b31      	ldr	r3, [pc, #196]	; (800500c <HAL_RCC_OscConfig+0x478>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f4c:	f7fd fdf4 	bl	8002b38 <HAL_GetTick>
 8004f50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f52:	e008      	b.n	8004f66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f54:	f7fd fdf0 	bl	8002b38 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e087      	b.n	8005076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f66:	4b27      	ldr	r3, [pc, #156]	; (8005004 <HAL_RCC_OscConfig+0x470>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1f0      	bne.n	8004f54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	69da      	ldr	r2, [r3, #28]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f80:	019b      	lsls	r3, r3, #6
 8004f82:	431a      	orrs	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f88:	085b      	lsrs	r3, r3, #1
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	041b      	lsls	r3, r3, #16
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f94:	061b      	lsls	r3, r3, #24
 8004f96:	491b      	ldr	r1, [pc, #108]	; (8005004 <HAL_RCC_OscConfig+0x470>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f9c:	4b1b      	ldr	r3, [pc, #108]	; (800500c <HAL_RCC_OscConfig+0x478>)
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa2:	f7fd fdc9 	bl	8002b38 <HAL_GetTick>
 8004fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fa8:	e008      	b.n	8004fbc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004faa:	f7fd fdc5 	bl	8002b38 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d901      	bls.n	8004fbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e05c      	b.n	8005076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fbc:	4b11      	ldr	r3, [pc, #68]	; (8005004 <HAL_RCC_OscConfig+0x470>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d0f0      	beq.n	8004faa <HAL_RCC_OscConfig+0x416>
 8004fc8:	e054      	b.n	8005074 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fca:	4b10      	ldr	r3, [pc, #64]	; (800500c <HAL_RCC_OscConfig+0x478>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fd0:	f7fd fdb2 	bl	8002b38 <HAL_GetTick>
 8004fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fd6:	e008      	b.n	8004fea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fd8:	f7fd fdae 	bl	8002b38 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e045      	b.n	8005076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fea:	4b06      	ldr	r3, [pc, #24]	; (8005004 <HAL_RCC_OscConfig+0x470>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1f0      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x444>
 8004ff6:	e03d      	b.n	8005074 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d107      	bne.n	8005010 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e038      	b.n	8005076 <HAL_RCC_OscConfig+0x4e2>
 8005004:	40023800 	.word	0x40023800
 8005008:	40007000 	.word	0x40007000
 800500c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005010:	4b1b      	ldr	r3, [pc, #108]	; (8005080 <HAL_RCC_OscConfig+0x4ec>)
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	2b01      	cmp	r3, #1
 800501c:	d028      	beq.n	8005070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005028:	429a      	cmp	r2, r3
 800502a:	d121      	bne.n	8005070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005036:	429a      	cmp	r2, r3
 8005038:	d11a      	bne.n	8005070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005040:	4013      	ands	r3, r2
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005046:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005048:	4293      	cmp	r3, r2
 800504a:	d111      	bne.n	8005070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005056:	085b      	lsrs	r3, r3, #1
 8005058:	3b01      	subs	r3, #1
 800505a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800505c:	429a      	cmp	r2, r3
 800505e:	d107      	bne.n	8005070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800506a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800506c:	429a      	cmp	r2, r3
 800506e:	d001      	beq.n	8005074 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e000      	b.n	8005076 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3718      	adds	r7, #24
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	40023800 	.word	0x40023800

08005084 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e0cc      	b.n	8005232 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005098:	4b68      	ldr	r3, [pc, #416]	; (800523c <HAL_RCC_ClockConfig+0x1b8>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0307 	and.w	r3, r3, #7
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d90c      	bls.n	80050c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050a6:	4b65      	ldr	r3, [pc, #404]	; (800523c <HAL_RCC_ClockConfig+0x1b8>)
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	b2d2      	uxtb	r2, r2
 80050ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ae:	4b63      	ldr	r3, [pc, #396]	; (800523c <HAL_RCC_ClockConfig+0x1b8>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0307 	and.w	r3, r3, #7
 80050b6:	683a      	ldr	r2, [r7, #0]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d001      	beq.n	80050c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e0b8      	b.n	8005232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0302 	and.w	r3, r3, #2
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d020      	beq.n	800510e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0304 	and.w	r3, r3, #4
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d005      	beq.n	80050e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050d8:	4b59      	ldr	r3, [pc, #356]	; (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	4a58      	ldr	r2, [pc, #352]	; (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 80050de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0308 	and.w	r3, r3, #8
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d005      	beq.n	80050fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050f0:	4b53      	ldr	r3, [pc, #332]	; (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	4a52      	ldr	r2, [pc, #328]	; (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 80050f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80050fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050fc:	4b50      	ldr	r3, [pc, #320]	; (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	494d      	ldr	r1, [pc, #308]	; (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 800510a:	4313      	orrs	r3, r2
 800510c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	2b00      	cmp	r3, #0
 8005118:	d044      	beq.n	80051a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d107      	bne.n	8005132 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005122:	4b47      	ldr	r3, [pc, #284]	; (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d119      	bne.n	8005162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e07f      	b.n	8005232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	2b02      	cmp	r3, #2
 8005138:	d003      	beq.n	8005142 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800513e:	2b03      	cmp	r3, #3
 8005140:	d107      	bne.n	8005152 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005142:	4b3f      	ldr	r3, [pc, #252]	; (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d109      	bne.n	8005162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e06f      	b.n	8005232 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005152:	4b3b      	ldr	r3, [pc, #236]	; (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e067      	b.n	8005232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005162:	4b37      	ldr	r3, [pc, #220]	; (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f023 0203 	bic.w	r2, r3, #3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	4934      	ldr	r1, [pc, #208]	; (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 8005170:	4313      	orrs	r3, r2
 8005172:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005174:	f7fd fce0 	bl	8002b38 <HAL_GetTick>
 8005178:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800517a:	e00a      	b.n	8005192 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800517c:	f7fd fcdc 	bl	8002b38 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	f241 3288 	movw	r2, #5000	; 0x1388
 800518a:	4293      	cmp	r3, r2
 800518c:	d901      	bls.n	8005192 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e04f      	b.n	8005232 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005192:	4b2b      	ldr	r3, [pc, #172]	; (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f003 020c 	and.w	r2, r3, #12
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d1eb      	bne.n	800517c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051a4:	4b25      	ldr	r3, [pc, #148]	; (800523c <HAL_RCC_ClockConfig+0x1b8>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0307 	and.w	r3, r3, #7
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d20c      	bcs.n	80051cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051b2:	4b22      	ldr	r3, [pc, #136]	; (800523c <HAL_RCC_ClockConfig+0x1b8>)
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	b2d2      	uxtb	r2, r2
 80051b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ba:	4b20      	ldr	r3, [pc, #128]	; (800523c <HAL_RCC_ClockConfig+0x1b8>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0307 	and.w	r3, r3, #7
 80051c2:	683a      	ldr	r2, [r7, #0]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d001      	beq.n	80051cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e032      	b.n	8005232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d008      	beq.n	80051ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051d8:	4b19      	ldr	r3, [pc, #100]	; (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	4916      	ldr	r1, [pc, #88]	; (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0308 	and.w	r3, r3, #8
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d009      	beq.n	800520a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051f6:	4b12      	ldr	r3, [pc, #72]	; (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	00db      	lsls	r3, r3, #3
 8005204:	490e      	ldr	r1, [pc, #56]	; (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 8005206:	4313      	orrs	r3, r2
 8005208:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800520a:	f000 f821 	bl	8005250 <HAL_RCC_GetSysClockFreq>
 800520e:	4602      	mov	r2, r0
 8005210:	4b0b      	ldr	r3, [pc, #44]	; (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	091b      	lsrs	r3, r3, #4
 8005216:	f003 030f 	and.w	r3, r3, #15
 800521a:	490a      	ldr	r1, [pc, #40]	; (8005244 <HAL_RCC_ClockConfig+0x1c0>)
 800521c:	5ccb      	ldrb	r3, [r1, r3]
 800521e:	fa22 f303 	lsr.w	r3, r2, r3
 8005222:	4a09      	ldr	r2, [pc, #36]	; (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 8005224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005226:	4b09      	ldr	r3, [pc, #36]	; (800524c <HAL_RCC_ClockConfig+0x1c8>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4618      	mov	r0, r3
 800522c:	f7fd fc40 	bl	8002ab0 <HAL_InitTick>

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	40023c00 	.word	0x40023c00
 8005240:	40023800 	.word	0x40023800
 8005244:	08008fdc 	.word	0x08008fdc
 8005248:	20000004 	.word	0x20000004
 800524c:	20000008 	.word	0x20000008

08005250 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005254:	b090      	sub	sp, #64	; 0x40
 8005256:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005258:	2300      	movs	r3, #0
 800525a:	637b      	str	r3, [r7, #52]	; 0x34
 800525c:	2300      	movs	r3, #0
 800525e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005260:	2300      	movs	r3, #0
 8005262:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005264:	2300      	movs	r3, #0
 8005266:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005268:	4b59      	ldr	r3, [pc, #356]	; (80053d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f003 030c 	and.w	r3, r3, #12
 8005270:	2b08      	cmp	r3, #8
 8005272:	d00d      	beq.n	8005290 <HAL_RCC_GetSysClockFreq+0x40>
 8005274:	2b08      	cmp	r3, #8
 8005276:	f200 80a1 	bhi.w	80053bc <HAL_RCC_GetSysClockFreq+0x16c>
 800527a:	2b00      	cmp	r3, #0
 800527c:	d002      	beq.n	8005284 <HAL_RCC_GetSysClockFreq+0x34>
 800527e:	2b04      	cmp	r3, #4
 8005280:	d003      	beq.n	800528a <HAL_RCC_GetSysClockFreq+0x3a>
 8005282:	e09b      	b.n	80053bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005284:	4b53      	ldr	r3, [pc, #332]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8005286:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005288:	e09b      	b.n	80053c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800528a:	4b53      	ldr	r3, [pc, #332]	; (80053d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800528c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800528e:	e098      	b.n	80053c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005290:	4b4f      	ldr	r3, [pc, #316]	; (80053d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005298:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800529a:	4b4d      	ldr	r3, [pc, #308]	; (80053d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d028      	beq.n	80052f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052a6:	4b4a      	ldr	r3, [pc, #296]	; (80053d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	099b      	lsrs	r3, r3, #6
 80052ac:	2200      	movs	r2, #0
 80052ae:	623b      	str	r3, [r7, #32]
 80052b0:	627a      	str	r2, [r7, #36]	; 0x24
 80052b2:	6a3b      	ldr	r3, [r7, #32]
 80052b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80052b8:	2100      	movs	r1, #0
 80052ba:	4b47      	ldr	r3, [pc, #284]	; (80053d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80052bc:	fb03 f201 	mul.w	r2, r3, r1
 80052c0:	2300      	movs	r3, #0
 80052c2:	fb00 f303 	mul.w	r3, r0, r3
 80052c6:	4413      	add	r3, r2
 80052c8:	4a43      	ldr	r2, [pc, #268]	; (80053d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80052ca:	fba0 1202 	umull	r1, r2, r0, r2
 80052ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052d0:	460a      	mov	r2, r1
 80052d2:	62ba      	str	r2, [r7, #40]	; 0x28
 80052d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052d6:	4413      	add	r3, r2
 80052d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052dc:	2200      	movs	r2, #0
 80052de:	61bb      	str	r3, [r7, #24]
 80052e0:	61fa      	str	r2, [r7, #28]
 80052e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80052ea:	f7fb fbb7 	bl	8000a5c <__aeabi_uldivmod>
 80052ee:	4602      	mov	r2, r0
 80052f0:	460b      	mov	r3, r1
 80052f2:	4613      	mov	r3, r2
 80052f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052f6:	e053      	b.n	80053a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052f8:	4b35      	ldr	r3, [pc, #212]	; (80053d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	099b      	lsrs	r3, r3, #6
 80052fe:	2200      	movs	r2, #0
 8005300:	613b      	str	r3, [r7, #16]
 8005302:	617a      	str	r2, [r7, #20]
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800530a:	f04f 0b00 	mov.w	fp, #0
 800530e:	4652      	mov	r2, sl
 8005310:	465b      	mov	r3, fp
 8005312:	f04f 0000 	mov.w	r0, #0
 8005316:	f04f 0100 	mov.w	r1, #0
 800531a:	0159      	lsls	r1, r3, #5
 800531c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005320:	0150      	lsls	r0, r2, #5
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	ebb2 080a 	subs.w	r8, r2, sl
 800532a:	eb63 090b 	sbc.w	r9, r3, fp
 800532e:	f04f 0200 	mov.w	r2, #0
 8005332:	f04f 0300 	mov.w	r3, #0
 8005336:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800533a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800533e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005342:	ebb2 0408 	subs.w	r4, r2, r8
 8005346:	eb63 0509 	sbc.w	r5, r3, r9
 800534a:	f04f 0200 	mov.w	r2, #0
 800534e:	f04f 0300 	mov.w	r3, #0
 8005352:	00eb      	lsls	r3, r5, #3
 8005354:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005358:	00e2      	lsls	r2, r4, #3
 800535a:	4614      	mov	r4, r2
 800535c:	461d      	mov	r5, r3
 800535e:	eb14 030a 	adds.w	r3, r4, sl
 8005362:	603b      	str	r3, [r7, #0]
 8005364:	eb45 030b 	adc.w	r3, r5, fp
 8005368:	607b      	str	r3, [r7, #4]
 800536a:	f04f 0200 	mov.w	r2, #0
 800536e:	f04f 0300 	mov.w	r3, #0
 8005372:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005376:	4629      	mov	r1, r5
 8005378:	028b      	lsls	r3, r1, #10
 800537a:	4621      	mov	r1, r4
 800537c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005380:	4621      	mov	r1, r4
 8005382:	028a      	lsls	r2, r1, #10
 8005384:	4610      	mov	r0, r2
 8005386:	4619      	mov	r1, r3
 8005388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800538a:	2200      	movs	r2, #0
 800538c:	60bb      	str	r3, [r7, #8]
 800538e:	60fa      	str	r2, [r7, #12]
 8005390:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005394:	f7fb fb62 	bl	8000a5c <__aeabi_uldivmod>
 8005398:	4602      	mov	r2, r0
 800539a:	460b      	mov	r3, r1
 800539c:	4613      	mov	r3, r2
 800539e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80053a0:	4b0b      	ldr	r3, [pc, #44]	; (80053d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	0c1b      	lsrs	r3, r3, #16
 80053a6:	f003 0303 	and.w	r3, r3, #3
 80053aa:	3301      	adds	r3, #1
 80053ac:	005b      	lsls	r3, r3, #1
 80053ae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80053b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80053b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80053ba:	e002      	b.n	80053c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053bc:	4b05      	ldr	r3, [pc, #20]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80053be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80053c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3740      	adds	r7, #64	; 0x40
 80053c8:	46bd      	mov	sp, r7
 80053ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053ce:	bf00      	nop
 80053d0:	40023800 	.word	0x40023800
 80053d4:	00f42400 	.word	0x00f42400
 80053d8:	017d7840 	.word	0x017d7840

080053dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053dc:	b480      	push	{r7}
 80053de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053e0:	4b03      	ldr	r3, [pc, #12]	; (80053f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80053e2:	681b      	ldr	r3, [r3, #0]
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	20000004 	.word	0x20000004

080053f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80053f8:	f7ff fff0 	bl	80053dc <HAL_RCC_GetHCLKFreq>
 80053fc:	4602      	mov	r2, r0
 80053fe:	4b05      	ldr	r3, [pc, #20]	; (8005414 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	0a9b      	lsrs	r3, r3, #10
 8005404:	f003 0307 	and.w	r3, r3, #7
 8005408:	4903      	ldr	r1, [pc, #12]	; (8005418 <HAL_RCC_GetPCLK1Freq+0x24>)
 800540a:	5ccb      	ldrb	r3, [r1, r3]
 800540c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005410:	4618      	mov	r0, r3
 8005412:	bd80      	pop	{r7, pc}
 8005414:	40023800 	.word	0x40023800
 8005418:	08008fec 	.word	0x08008fec

0800541c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005420:	f7ff ffdc 	bl	80053dc <HAL_RCC_GetHCLKFreq>
 8005424:	4602      	mov	r2, r0
 8005426:	4b05      	ldr	r3, [pc, #20]	; (800543c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	0b5b      	lsrs	r3, r3, #13
 800542c:	f003 0307 	and.w	r3, r3, #7
 8005430:	4903      	ldr	r1, [pc, #12]	; (8005440 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005432:	5ccb      	ldrb	r3, [r1, r3]
 8005434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005438:	4618      	mov	r0, r3
 800543a:	bd80      	pop	{r7, pc}
 800543c:	40023800 	.word	0x40023800
 8005440:	08008fec 	.word	0x08008fec

08005444 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e041      	b.n	80054da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b00      	cmp	r3, #0
 8005460:	d106      	bne.n	8005470 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f7fd f80c 	bl	8002488 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2202      	movs	r2, #2
 8005474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	3304      	adds	r3, #4
 8005480:	4619      	mov	r1, r3
 8005482:	4610      	mov	r0, r2
 8005484:	f000 fe88 	bl	8006198 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3708      	adds	r7, #8
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
	...

080054e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d001      	beq.n	80054fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e03c      	b.n	8005576 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2202      	movs	r2, #2
 8005500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a1e      	ldr	r2, [pc, #120]	; (8005584 <HAL_TIM_Base_Start+0xa0>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d018      	beq.n	8005540 <HAL_TIM_Base_Start+0x5c>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005516:	d013      	beq.n	8005540 <HAL_TIM_Base_Start+0x5c>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a1a      	ldr	r2, [pc, #104]	; (8005588 <HAL_TIM_Base_Start+0xa4>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d00e      	beq.n	8005540 <HAL_TIM_Base_Start+0x5c>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a19      	ldr	r2, [pc, #100]	; (800558c <HAL_TIM_Base_Start+0xa8>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d009      	beq.n	8005540 <HAL_TIM_Base_Start+0x5c>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a17      	ldr	r2, [pc, #92]	; (8005590 <HAL_TIM_Base_Start+0xac>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d004      	beq.n	8005540 <HAL_TIM_Base_Start+0x5c>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a16      	ldr	r2, [pc, #88]	; (8005594 <HAL_TIM_Base_Start+0xb0>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d111      	bne.n	8005564 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f003 0307 	and.w	r3, r3, #7
 800554a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2b06      	cmp	r3, #6
 8005550:	d010      	beq.n	8005574 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f042 0201 	orr.w	r2, r2, #1
 8005560:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005562:	e007      	b.n	8005574 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f042 0201 	orr.w	r2, r2, #1
 8005572:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	40010000 	.word	0x40010000
 8005588:	40000400 	.word	0x40000400
 800558c:	40000800 	.word	0x40000800
 8005590:	40000c00 	.word	0x40000c00
 8005594:	40014000 	.word	0x40014000

08005598 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d101      	bne.n	80055aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e041      	b.n	800562e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d106      	bne.n	80055c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f839 	bl	8005636 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2202      	movs	r2, #2
 80055c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	3304      	adds	r3, #4
 80055d4:	4619      	mov	r1, r3
 80055d6:	4610      	mov	r0, r2
 80055d8:	f000 fdde 	bl	8006198 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3708      	adds	r7, #8
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005636:	b480      	push	{r7}
 8005638:	b083      	sub	sp, #12
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800563e:	bf00      	nop
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
	...

0800564c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d109      	bne.n	8005670 <HAL_TIM_PWM_Start+0x24>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b01      	cmp	r3, #1
 8005666:	bf14      	ite	ne
 8005668:	2301      	movne	r3, #1
 800566a:	2300      	moveq	r3, #0
 800566c:	b2db      	uxtb	r3, r3
 800566e:	e022      	b.n	80056b6 <HAL_TIM_PWM_Start+0x6a>
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	2b04      	cmp	r3, #4
 8005674:	d109      	bne.n	800568a <HAL_TIM_PWM_Start+0x3e>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b01      	cmp	r3, #1
 8005680:	bf14      	ite	ne
 8005682:	2301      	movne	r3, #1
 8005684:	2300      	moveq	r3, #0
 8005686:	b2db      	uxtb	r3, r3
 8005688:	e015      	b.n	80056b6 <HAL_TIM_PWM_Start+0x6a>
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	2b08      	cmp	r3, #8
 800568e:	d109      	bne.n	80056a4 <HAL_TIM_PWM_Start+0x58>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005696:	b2db      	uxtb	r3, r3
 8005698:	2b01      	cmp	r3, #1
 800569a:	bf14      	ite	ne
 800569c:	2301      	movne	r3, #1
 800569e:	2300      	moveq	r3, #0
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	e008      	b.n	80056b6 <HAL_TIM_PWM_Start+0x6a>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	bf14      	ite	ne
 80056b0:	2301      	movne	r3, #1
 80056b2:	2300      	moveq	r3, #0
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e068      	b.n	8005790 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d104      	bne.n	80056ce <HAL_TIM_PWM_Start+0x82>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2202      	movs	r2, #2
 80056c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056cc:	e013      	b.n	80056f6 <HAL_TIM_PWM_Start+0xaa>
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	2b04      	cmp	r3, #4
 80056d2:	d104      	bne.n	80056de <HAL_TIM_PWM_Start+0x92>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2202      	movs	r2, #2
 80056d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056dc:	e00b      	b.n	80056f6 <HAL_TIM_PWM_Start+0xaa>
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	2b08      	cmp	r3, #8
 80056e2:	d104      	bne.n	80056ee <HAL_TIM_PWM_Start+0xa2>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2202      	movs	r2, #2
 80056e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056ec:	e003      	b.n	80056f6 <HAL_TIM_PWM_Start+0xaa>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2202      	movs	r2, #2
 80056f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2201      	movs	r2, #1
 80056fc:	6839      	ldr	r1, [r7, #0]
 80056fe:	4618      	mov	r0, r3
 8005700:	f001 f91a 	bl	8006938 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a23      	ldr	r2, [pc, #140]	; (8005798 <HAL_TIM_PWM_Start+0x14c>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d107      	bne.n	800571e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800571c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a1d      	ldr	r2, [pc, #116]	; (8005798 <HAL_TIM_PWM_Start+0x14c>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d018      	beq.n	800575a <HAL_TIM_PWM_Start+0x10e>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005730:	d013      	beq.n	800575a <HAL_TIM_PWM_Start+0x10e>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a19      	ldr	r2, [pc, #100]	; (800579c <HAL_TIM_PWM_Start+0x150>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d00e      	beq.n	800575a <HAL_TIM_PWM_Start+0x10e>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a17      	ldr	r2, [pc, #92]	; (80057a0 <HAL_TIM_PWM_Start+0x154>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d009      	beq.n	800575a <HAL_TIM_PWM_Start+0x10e>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a16      	ldr	r2, [pc, #88]	; (80057a4 <HAL_TIM_PWM_Start+0x158>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d004      	beq.n	800575a <HAL_TIM_PWM_Start+0x10e>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a14      	ldr	r2, [pc, #80]	; (80057a8 <HAL_TIM_PWM_Start+0x15c>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d111      	bne.n	800577e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f003 0307 	and.w	r3, r3, #7
 8005764:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2b06      	cmp	r3, #6
 800576a:	d010      	beq.n	800578e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f042 0201 	orr.w	r2, r2, #1
 800577a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800577c:	e007      	b.n	800578e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f042 0201 	orr.w	r2, r2, #1
 800578c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3710      	adds	r7, #16
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	40010000 	.word	0x40010000
 800579c:	40000400 	.word	0x40000400
 80057a0:	40000800 	.word	0x40000800
 80057a4:	40000c00 	.word	0x40000c00
 80057a8:	40014000 	.word	0x40014000

080057ac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d101      	bne.n	80057be <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e041      	b.n	8005842 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d106      	bne.n	80057d8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f839 	bl	800584a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2202      	movs	r2, #2
 80057dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	3304      	adds	r3, #4
 80057e8:	4619      	mov	r1, r3
 80057ea:	4610      	mov	r0, r2
 80057ec:	f000 fcd4 	bl	8006198 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3708      	adds	r7, #8
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800584a:	b480      	push	{r7}
 800584c:	b083      	sub	sp, #12
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005852:	bf00      	nop
 8005854:	370c      	adds	r7, #12
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
	...

08005860 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800586a:	2300      	movs	r3, #0
 800586c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d104      	bne.n	800587e <HAL_TIM_IC_Start_IT+0x1e>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800587a:	b2db      	uxtb	r3, r3
 800587c:	e013      	b.n	80058a6 <HAL_TIM_IC_Start_IT+0x46>
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	2b04      	cmp	r3, #4
 8005882:	d104      	bne.n	800588e <HAL_TIM_IC_Start_IT+0x2e>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800588a:	b2db      	uxtb	r3, r3
 800588c:	e00b      	b.n	80058a6 <HAL_TIM_IC_Start_IT+0x46>
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	2b08      	cmp	r3, #8
 8005892:	d104      	bne.n	800589e <HAL_TIM_IC_Start_IT+0x3e>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800589a:	b2db      	uxtb	r3, r3
 800589c:	e003      	b.n	80058a6 <HAL_TIM_IC_Start_IT+0x46>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d104      	bne.n	80058b8 <HAL_TIM_IC_Start_IT+0x58>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	e013      	b.n	80058e0 <HAL_TIM_IC_Start_IT+0x80>
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	2b04      	cmp	r3, #4
 80058bc:	d104      	bne.n	80058c8 <HAL_TIM_IC_Start_IT+0x68>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	e00b      	b.n	80058e0 <HAL_TIM_IC_Start_IT+0x80>
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	2b08      	cmp	r3, #8
 80058cc:	d104      	bne.n	80058d8 <HAL_TIM_IC_Start_IT+0x78>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	e003      	b.n	80058e0 <HAL_TIM_IC_Start_IT+0x80>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80058e2:	7bbb      	ldrb	r3, [r7, #14]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d102      	bne.n	80058ee <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80058e8:	7b7b      	ldrb	r3, [r7, #13]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d001      	beq.n	80058f2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e0c2      	b.n	8005a78 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d104      	bne.n	8005902 <HAL_TIM_IC_Start_IT+0xa2>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2202      	movs	r2, #2
 80058fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005900:	e013      	b.n	800592a <HAL_TIM_IC_Start_IT+0xca>
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2b04      	cmp	r3, #4
 8005906:	d104      	bne.n	8005912 <HAL_TIM_IC_Start_IT+0xb2>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2202      	movs	r2, #2
 800590c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005910:	e00b      	b.n	800592a <HAL_TIM_IC_Start_IT+0xca>
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b08      	cmp	r3, #8
 8005916:	d104      	bne.n	8005922 <HAL_TIM_IC_Start_IT+0xc2>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2202      	movs	r2, #2
 800591c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005920:	e003      	b.n	800592a <HAL_TIM_IC_Start_IT+0xca>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2202      	movs	r2, #2
 8005926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d104      	bne.n	800593a <HAL_TIM_IC_Start_IT+0xda>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2202      	movs	r2, #2
 8005934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005938:	e013      	b.n	8005962 <HAL_TIM_IC_Start_IT+0x102>
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	2b04      	cmp	r3, #4
 800593e:	d104      	bne.n	800594a <HAL_TIM_IC_Start_IT+0xea>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2202      	movs	r2, #2
 8005944:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005948:	e00b      	b.n	8005962 <HAL_TIM_IC_Start_IT+0x102>
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	2b08      	cmp	r3, #8
 800594e:	d104      	bne.n	800595a <HAL_TIM_IC_Start_IT+0xfa>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2202      	movs	r2, #2
 8005954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005958:	e003      	b.n	8005962 <HAL_TIM_IC_Start_IT+0x102>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2202      	movs	r2, #2
 800595e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	2b0c      	cmp	r3, #12
 8005966:	d841      	bhi.n	80059ec <HAL_TIM_IC_Start_IT+0x18c>
 8005968:	a201      	add	r2, pc, #4	; (adr r2, 8005970 <HAL_TIM_IC_Start_IT+0x110>)
 800596a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596e:	bf00      	nop
 8005970:	080059a5 	.word	0x080059a5
 8005974:	080059ed 	.word	0x080059ed
 8005978:	080059ed 	.word	0x080059ed
 800597c:	080059ed 	.word	0x080059ed
 8005980:	080059b7 	.word	0x080059b7
 8005984:	080059ed 	.word	0x080059ed
 8005988:	080059ed 	.word	0x080059ed
 800598c:	080059ed 	.word	0x080059ed
 8005990:	080059c9 	.word	0x080059c9
 8005994:	080059ed 	.word	0x080059ed
 8005998:	080059ed 	.word	0x080059ed
 800599c:	080059ed 	.word	0x080059ed
 80059a0:	080059db 	.word	0x080059db
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68da      	ldr	r2, [r3, #12]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f042 0202 	orr.w	r2, r2, #2
 80059b2:	60da      	str	r2, [r3, #12]
      break;
 80059b4:	e01d      	b.n	80059f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68da      	ldr	r2, [r3, #12]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f042 0204 	orr.w	r2, r2, #4
 80059c4:	60da      	str	r2, [r3, #12]
      break;
 80059c6:	e014      	b.n	80059f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68da      	ldr	r2, [r3, #12]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f042 0208 	orr.w	r2, r2, #8
 80059d6:	60da      	str	r2, [r3, #12]
      break;
 80059d8:	e00b      	b.n	80059f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68da      	ldr	r2, [r3, #12]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f042 0210 	orr.w	r2, r2, #16
 80059e8:	60da      	str	r2, [r3, #12]
      break;
 80059ea:	e002      	b.n	80059f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	73fb      	strb	r3, [r7, #15]
      break;
 80059f0:	bf00      	nop
  }

  if (status == HAL_OK)
 80059f2:	7bfb      	ldrb	r3, [r7, #15]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d13e      	bne.n	8005a76 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2201      	movs	r2, #1
 80059fe:	6839      	ldr	r1, [r7, #0]
 8005a00:	4618      	mov	r0, r3
 8005a02:	f000 ff99 	bl	8006938 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a1d      	ldr	r2, [pc, #116]	; (8005a80 <HAL_TIM_IC_Start_IT+0x220>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d018      	beq.n	8005a42 <HAL_TIM_IC_Start_IT+0x1e2>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a18:	d013      	beq.n	8005a42 <HAL_TIM_IC_Start_IT+0x1e2>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a19      	ldr	r2, [pc, #100]	; (8005a84 <HAL_TIM_IC_Start_IT+0x224>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d00e      	beq.n	8005a42 <HAL_TIM_IC_Start_IT+0x1e2>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a17      	ldr	r2, [pc, #92]	; (8005a88 <HAL_TIM_IC_Start_IT+0x228>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d009      	beq.n	8005a42 <HAL_TIM_IC_Start_IT+0x1e2>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a16      	ldr	r2, [pc, #88]	; (8005a8c <HAL_TIM_IC_Start_IT+0x22c>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d004      	beq.n	8005a42 <HAL_TIM_IC_Start_IT+0x1e2>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a14      	ldr	r2, [pc, #80]	; (8005a90 <HAL_TIM_IC_Start_IT+0x230>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d111      	bne.n	8005a66 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f003 0307 	and.w	r3, r3, #7
 8005a4c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	2b06      	cmp	r3, #6
 8005a52:	d010      	beq.n	8005a76 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0201 	orr.w	r2, r2, #1
 8005a62:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a64:	e007      	b.n	8005a76 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f042 0201 	orr.w	r2, r2, #1
 8005a74:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	40010000 	.word	0x40010000
 8005a84:	40000400 	.word	0x40000400
 8005a88:	40000800 	.word	0x40000800
 8005a8c:	40000c00 	.word	0x40000c00
 8005a90:	40014000 	.word	0x40014000

08005a94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	f003 0302 	and.w	r3, r3, #2
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d020      	beq.n	8005af8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f003 0302 	and.w	r3, r3, #2
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d01b      	beq.n	8005af8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f06f 0202 	mvn.w	r2, #2
 8005ac8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	f003 0303 	and.w	r3, r3, #3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f7fb ffca 	bl	8001a78 <HAL_TIM_IC_CaptureCallback>
 8005ae4:	e005      	b.n	8005af2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fb38 	bl	800615c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 fb3f 	bl	8006170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	f003 0304 	and.w	r3, r3, #4
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d020      	beq.n	8005b44 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f003 0304 	and.w	r3, r3, #4
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d01b      	beq.n	8005b44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f06f 0204 	mvn.w	r2, #4
 8005b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2202      	movs	r2, #2
 8005b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f7fb ffa4 	bl	8001a78 <HAL_TIM_IC_CaptureCallback>
 8005b30:	e005      	b.n	8005b3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 fb12 	bl	800615c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 fb19 	bl	8006170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	f003 0308 	and.w	r3, r3, #8
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d020      	beq.n	8005b90 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f003 0308 	and.w	r3, r3, #8
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d01b      	beq.n	8005b90 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f06f 0208 	mvn.w	r2, #8
 8005b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2204      	movs	r2, #4
 8005b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	69db      	ldr	r3, [r3, #28]
 8005b6e:	f003 0303 	and.w	r3, r3, #3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d003      	beq.n	8005b7e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7fb ff7e 	bl	8001a78 <HAL_TIM_IC_CaptureCallback>
 8005b7c:	e005      	b.n	8005b8a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 faec 	bl	800615c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 faf3 	bl	8006170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	f003 0310 	and.w	r3, r3, #16
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d020      	beq.n	8005bdc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f003 0310 	and.w	r3, r3, #16
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d01b      	beq.n	8005bdc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f06f 0210 	mvn.w	r2, #16
 8005bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2208      	movs	r2, #8
 8005bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	69db      	ldr	r3, [r3, #28]
 8005bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f7fb ff58 	bl	8001a78 <HAL_TIM_IC_CaptureCallback>
 8005bc8:	e005      	b.n	8005bd6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 fac6 	bl	800615c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 facd 	bl	8006170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00c      	beq.n	8005c00 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d007      	beq.n	8005c00 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f06f 0201 	mvn.w	r2, #1
 8005bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 faa4 	bl	8006148 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00c      	beq.n	8005c24 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d007      	beq.n	8005c24 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 ff28 	bl	8006a74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00c      	beq.n	8005c48 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d007      	beq.n	8005c48 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 fa9e 	bl	8006184 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	f003 0320 	and.w	r3, r3, #32
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00c      	beq.n	8005c6c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f003 0320 	and.w	r3, r3, #32
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d007      	beq.n	8005c6c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f06f 0220 	mvn.w	r2, #32
 8005c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 fefa 	bl	8006a60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c6c:	bf00      	nop
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b086      	sub	sp, #24
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c80:	2300      	movs	r3, #0
 8005c82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d101      	bne.n	8005c92 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005c8e:	2302      	movs	r3, #2
 8005c90:	e088      	b.n	8005da4 <HAL_TIM_IC_ConfigChannel+0x130>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d11b      	bne.n	8005cd8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005cb0:	f000 fc8a 	bl	80065c8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	699a      	ldr	r2, [r3, #24]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f022 020c 	bic.w	r2, r2, #12
 8005cc2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6999      	ldr	r1, [r3, #24]
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	689a      	ldr	r2, [r3, #8]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	619a      	str	r2, [r3, #24]
 8005cd6:	e060      	b.n	8005d9a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b04      	cmp	r3, #4
 8005cdc:	d11c      	bne.n	8005d18 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005cee:	f000 fd02 	bl	80066f6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	699a      	ldr	r2, [r3, #24]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005d00:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	6999      	ldr	r1, [r3, #24]
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	021a      	lsls	r2, r3, #8
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	430a      	orrs	r2, r1
 8005d14:	619a      	str	r2, [r3, #24]
 8005d16:	e040      	b.n	8005d9a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2b08      	cmp	r3, #8
 8005d1c:	d11b      	bne.n	8005d56 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005d2e:	f000 fd4f 	bl	80067d0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	69da      	ldr	r2, [r3, #28]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f022 020c 	bic.w	r2, r2, #12
 8005d40:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	69d9      	ldr	r1, [r3, #28]
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	689a      	ldr	r2, [r3, #8]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	430a      	orrs	r2, r1
 8005d52:	61da      	str	r2, [r3, #28]
 8005d54:	e021      	b.n	8005d9a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2b0c      	cmp	r3, #12
 8005d5a:	d11c      	bne.n	8005d96 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005d6c:	f000 fd6c 	bl	8006848 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	69da      	ldr	r2, [r3, #28]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005d7e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	69d9      	ldr	r1, [r3, #28]
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	021a      	lsls	r2, r3, #8
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	430a      	orrs	r2, r1
 8005d92:	61da      	str	r2, [r3, #28]
 8005d94:	e001      	b.n	8005d9a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3718      	adds	r7, #24
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b086      	sub	sp, #24
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005db8:	2300      	movs	r3, #0
 8005dba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d101      	bne.n	8005dca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005dc6:	2302      	movs	r3, #2
 8005dc8:	e0ae      	b.n	8005f28 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b0c      	cmp	r3, #12
 8005dd6:	f200 809f 	bhi.w	8005f18 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005dda:	a201      	add	r2, pc, #4	; (adr r2, 8005de0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de0:	08005e15 	.word	0x08005e15
 8005de4:	08005f19 	.word	0x08005f19
 8005de8:	08005f19 	.word	0x08005f19
 8005dec:	08005f19 	.word	0x08005f19
 8005df0:	08005e55 	.word	0x08005e55
 8005df4:	08005f19 	.word	0x08005f19
 8005df8:	08005f19 	.word	0x08005f19
 8005dfc:	08005f19 	.word	0x08005f19
 8005e00:	08005e97 	.word	0x08005e97
 8005e04:	08005f19 	.word	0x08005f19
 8005e08:	08005f19 	.word	0x08005f19
 8005e0c:	08005f19 	.word	0x08005f19
 8005e10:	08005ed7 	.word	0x08005ed7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68b9      	ldr	r1, [r7, #8]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f000 fa48 	bl	80062b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	699a      	ldr	r2, [r3, #24]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f042 0208 	orr.w	r2, r2, #8
 8005e2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	699a      	ldr	r2, [r3, #24]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f022 0204 	bic.w	r2, r2, #4
 8005e3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6999      	ldr	r1, [r3, #24]
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	691a      	ldr	r2, [r3, #16]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	430a      	orrs	r2, r1
 8005e50:	619a      	str	r2, [r3, #24]
      break;
 8005e52:	e064      	b.n	8005f1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68b9      	ldr	r1, [r7, #8]
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f000 fa8e 	bl	800637c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	699a      	ldr	r2, [r3, #24]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	699a      	ldr	r2, [r3, #24]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	6999      	ldr	r1, [r3, #24]
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	021a      	lsls	r2, r3, #8
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	430a      	orrs	r2, r1
 8005e92:	619a      	str	r2, [r3, #24]
      break;
 8005e94:	e043      	b.n	8005f1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68b9      	ldr	r1, [r7, #8]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f000 fad9 	bl	8006454 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	69da      	ldr	r2, [r3, #28]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f042 0208 	orr.w	r2, r2, #8
 8005eb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	69da      	ldr	r2, [r3, #28]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f022 0204 	bic.w	r2, r2, #4
 8005ec0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	69d9      	ldr	r1, [r3, #28]
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	691a      	ldr	r2, [r3, #16]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	430a      	orrs	r2, r1
 8005ed2:	61da      	str	r2, [r3, #28]
      break;
 8005ed4:	e023      	b.n	8005f1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68b9      	ldr	r1, [r7, #8]
 8005edc:	4618      	mov	r0, r3
 8005ede:	f000 fb23 	bl	8006528 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	69da      	ldr	r2, [r3, #28]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ef0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	69da      	ldr	r2, [r3, #28]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	69d9      	ldr	r1, [r3, #28]
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	021a      	lsls	r2, r3, #8
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	430a      	orrs	r2, r1
 8005f14:	61da      	str	r2, [r3, #28]
      break;
 8005f16:	e002      	b.n	8005f1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	75fb      	strb	r3, [r7, #23]
      break;
 8005f1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3718      	adds	r7, #24
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d101      	bne.n	8005f4c <HAL_TIM_ConfigClockSource+0x1c>
 8005f48:	2302      	movs	r3, #2
 8005f4a:	e0b4      	b.n	80060b6 <HAL_TIM_ConfigClockSource+0x186>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2202      	movs	r2, #2
 8005f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f84:	d03e      	beq.n	8006004 <HAL_TIM_ConfigClockSource+0xd4>
 8005f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f8a:	f200 8087 	bhi.w	800609c <HAL_TIM_ConfigClockSource+0x16c>
 8005f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f92:	f000 8086 	beq.w	80060a2 <HAL_TIM_ConfigClockSource+0x172>
 8005f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f9a:	d87f      	bhi.n	800609c <HAL_TIM_ConfigClockSource+0x16c>
 8005f9c:	2b70      	cmp	r3, #112	; 0x70
 8005f9e:	d01a      	beq.n	8005fd6 <HAL_TIM_ConfigClockSource+0xa6>
 8005fa0:	2b70      	cmp	r3, #112	; 0x70
 8005fa2:	d87b      	bhi.n	800609c <HAL_TIM_ConfigClockSource+0x16c>
 8005fa4:	2b60      	cmp	r3, #96	; 0x60
 8005fa6:	d050      	beq.n	800604a <HAL_TIM_ConfigClockSource+0x11a>
 8005fa8:	2b60      	cmp	r3, #96	; 0x60
 8005faa:	d877      	bhi.n	800609c <HAL_TIM_ConfigClockSource+0x16c>
 8005fac:	2b50      	cmp	r3, #80	; 0x50
 8005fae:	d03c      	beq.n	800602a <HAL_TIM_ConfigClockSource+0xfa>
 8005fb0:	2b50      	cmp	r3, #80	; 0x50
 8005fb2:	d873      	bhi.n	800609c <HAL_TIM_ConfigClockSource+0x16c>
 8005fb4:	2b40      	cmp	r3, #64	; 0x40
 8005fb6:	d058      	beq.n	800606a <HAL_TIM_ConfigClockSource+0x13a>
 8005fb8:	2b40      	cmp	r3, #64	; 0x40
 8005fba:	d86f      	bhi.n	800609c <HAL_TIM_ConfigClockSource+0x16c>
 8005fbc:	2b30      	cmp	r3, #48	; 0x30
 8005fbe:	d064      	beq.n	800608a <HAL_TIM_ConfigClockSource+0x15a>
 8005fc0:	2b30      	cmp	r3, #48	; 0x30
 8005fc2:	d86b      	bhi.n	800609c <HAL_TIM_ConfigClockSource+0x16c>
 8005fc4:	2b20      	cmp	r3, #32
 8005fc6:	d060      	beq.n	800608a <HAL_TIM_ConfigClockSource+0x15a>
 8005fc8:	2b20      	cmp	r3, #32
 8005fca:	d867      	bhi.n	800609c <HAL_TIM_ConfigClockSource+0x16c>
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d05c      	beq.n	800608a <HAL_TIM_ConfigClockSource+0x15a>
 8005fd0:	2b10      	cmp	r3, #16
 8005fd2:	d05a      	beq.n	800608a <HAL_TIM_ConfigClockSource+0x15a>
 8005fd4:	e062      	b.n	800609c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fe6:	f000 fc87 	bl	80068f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ff8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	609a      	str	r2, [r3, #8]
      break;
 8006002:	e04f      	b.n	80060a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006014:	f000 fc70 	bl	80068f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689a      	ldr	r2, [r3, #8]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006026:	609a      	str	r2, [r3, #8]
      break;
 8006028:	e03c      	b.n	80060a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006036:	461a      	mov	r2, r3
 8006038:	f000 fb2e 	bl	8006698 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2150      	movs	r1, #80	; 0x50
 8006042:	4618      	mov	r0, r3
 8006044:	f000 fc3d 	bl	80068c2 <TIM_ITRx_SetConfig>
      break;
 8006048:	e02c      	b.n	80060a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006056:	461a      	mov	r2, r3
 8006058:	f000 fb8a 	bl	8006770 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2160      	movs	r1, #96	; 0x60
 8006062:	4618      	mov	r0, r3
 8006064:	f000 fc2d 	bl	80068c2 <TIM_ITRx_SetConfig>
      break;
 8006068:	e01c      	b.n	80060a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006076:	461a      	mov	r2, r3
 8006078:	f000 fb0e 	bl	8006698 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2140      	movs	r1, #64	; 0x40
 8006082:	4618      	mov	r0, r3
 8006084:	f000 fc1d 	bl	80068c2 <TIM_ITRx_SetConfig>
      break;
 8006088:	e00c      	b.n	80060a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4619      	mov	r1, r3
 8006094:	4610      	mov	r0, r2
 8006096:	f000 fc14 	bl	80068c2 <TIM_ITRx_SetConfig>
      break;
 800609a:	e003      	b.n	80060a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	73fb      	strb	r3, [r7, #15]
      break;
 80060a0:	e000      	b.n	80060a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80060a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
	...

080060c0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80060ca:	2300      	movs	r3, #0
 80060cc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	2b0c      	cmp	r3, #12
 80060d2:	d831      	bhi.n	8006138 <HAL_TIM_ReadCapturedValue+0x78>
 80060d4:	a201      	add	r2, pc, #4	; (adr r2, 80060dc <HAL_TIM_ReadCapturedValue+0x1c>)
 80060d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060da:	bf00      	nop
 80060dc:	08006111 	.word	0x08006111
 80060e0:	08006139 	.word	0x08006139
 80060e4:	08006139 	.word	0x08006139
 80060e8:	08006139 	.word	0x08006139
 80060ec:	0800611b 	.word	0x0800611b
 80060f0:	08006139 	.word	0x08006139
 80060f4:	08006139 	.word	0x08006139
 80060f8:	08006139 	.word	0x08006139
 80060fc:	08006125 	.word	0x08006125
 8006100:	08006139 	.word	0x08006139
 8006104:	08006139 	.word	0x08006139
 8006108:	08006139 	.word	0x08006139
 800610c:	0800612f 	.word	0x0800612f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006116:	60fb      	str	r3, [r7, #12]

      break;
 8006118:	e00f      	b.n	800613a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006120:	60fb      	str	r3, [r7, #12]

      break;
 8006122:	e00a      	b.n	800613a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800612a:	60fb      	str	r3, [r7, #12]

      break;
 800612c:	e005      	b.n	800613a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006134:	60fb      	str	r3, [r7, #12]

      break;
 8006136:	e000      	b.n	800613a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006138:	bf00      	nop
  }

  return tmpreg;
 800613a:	68fb      	ldr	r3, [r7, #12]
}
 800613c:	4618      	mov	r0, r3
 800613e:	3714      	adds	r7, #20
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a3a      	ldr	r2, [pc, #232]	; (8006294 <TIM_Base_SetConfig+0xfc>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d00f      	beq.n	80061d0 <TIM_Base_SetConfig+0x38>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061b6:	d00b      	beq.n	80061d0 <TIM_Base_SetConfig+0x38>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a37      	ldr	r2, [pc, #220]	; (8006298 <TIM_Base_SetConfig+0x100>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d007      	beq.n	80061d0 <TIM_Base_SetConfig+0x38>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a36      	ldr	r2, [pc, #216]	; (800629c <TIM_Base_SetConfig+0x104>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d003      	beq.n	80061d0 <TIM_Base_SetConfig+0x38>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a35      	ldr	r2, [pc, #212]	; (80062a0 <TIM_Base_SetConfig+0x108>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d108      	bne.n	80061e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	4313      	orrs	r3, r2
 80061e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a2b      	ldr	r2, [pc, #172]	; (8006294 <TIM_Base_SetConfig+0xfc>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d01b      	beq.n	8006222 <TIM_Base_SetConfig+0x8a>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061f0:	d017      	beq.n	8006222 <TIM_Base_SetConfig+0x8a>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a28      	ldr	r2, [pc, #160]	; (8006298 <TIM_Base_SetConfig+0x100>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d013      	beq.n	8006222 <TIM_Base_SetConfig+0x8a>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a27      	ldr	r2, [pc, #156]	; (800629c <TIM_Base_SetConfig+0x104>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d00f      	beq.n	8006222 <TIM_Base_SetConfig+0x8a>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a26      	ldr	r2, [pc, #152]	; (80062a0 <TIM_Base_SetConfig+0x108>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d00b      	beq.n	8006222 <TIM_Base_SetConfig+0x8a>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a25      	ldr	r2, [pc, #148]	; (80062a4 <TIM_Base_SetConfig+0x10c>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d007      	beq.n	8006222 <TIM_Base_SetConfig+0x8a>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a24      	ldr	r2, [pc, #144]	; (80062a8 <TIM_Base_SetConfig+0x110>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d003      	beq.n	8006222 <TIM_Base_SetConfig+0x8a>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a23      	ldr	r2, [pc, #140]	; (80062ac <TIM_Base_SetConfig+0x114>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d108      	bne.n	8006234 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006228:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	4313      	orrs	r3, r2
 8006232:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	4313      	orrs	r3, r2
 8006240:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	689a      	ldr	r2, [r3, #8]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a0e      	ldr	r2, [pc, #56]	; (8006294 <TIM_Base_SetConfig+0xfc>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d103      	bne.n	8006268 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	691a      	ldr	r2, [r3, #16]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	f003 0301 	and.w	r3, r3, #1
 8006276:	2b01      	cmp	r3, #1
 8006278:	d105      	bne.n	8006286 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	f023 0201 	bic.w	r2, r3, #1
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	611a      	str	r2, [r3, #16]
  }
}
 8006286:	bf00      	nop
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	40010000 	.word	0x40010000
 8006298:	40000400 	.word	0x40000400
 800629c:	40000800 	.word	0x40000800
 80062a0:	40000c00 	.word	0x40000c00
 80062a4:	40014000 	.word	0x40014000
 80062a8:	40014400 	.word	0x40014400
 80062ac:	40014800 	.word	0x40014800

080062b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b087      	sub	sp, #28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a1b      	ldr	r3, [r3, #32]
 80062c4:	f023 0201 	bic.w	r2, r3, #1
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	699b      	ldr	r3, [r3, #24]
 80062d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f023 0303 	bic.w	r3, r3, #3
 80062e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f023 0302 	bic.w	r3, r3, #2
 80062f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	4313      	orrs	r3, r2
 8006302:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a1c      	ldr	r2, [pc, #112]	; (8006378 <TIM_OC1_SetConfig+0xc8>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d10c      	bne.n	8006326 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	f023 0308 	bic.w	r3, r3, #8
 8006312:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	697a      	ldr	r2, [r7, #20]
 800631a:	4313      	orrs	r3, r2
 800631c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	f023 0304 	bic.w	r3, r3, #4
 8006324:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a13      	ldr	r2, [pc, #76]	; (8006378 <TIM_OC1_SetConfig+0xc8>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d111      	bne.n	8006352 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006334:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800633c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	4313      	orrs	r3, r2
 8006346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	4313      	orrs	r3, r2
 8006350:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	693a      	ldr	r2, [r7, #16]
 8006356:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	685a      	ldr	r2, [r3, #4]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	621a      	str	r2, [r3, #32]
}
 800636c:	bf00      	nop
 800636e:	371c      	adds	r7, #28
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr
 8006378:	40010000 	.word	0x40010000

0800637c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800637c:	b480      	push	{r7}
 800637e:	b087      	sub	sp, #28
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a1b      	ldr	r3, [r3, #32]
 800638a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a1b      	ldr	r3, [r3, #32]
 8006390:	f023 0210 	bic.w	r2, r3, #16
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	699b      	ldr	r3, [r3, #24]
 80063a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	021b      	lsls	r3, r3, #8
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	4313      	orrs	r3, r2
 80063be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	f023 0320 	bic.w	r3, r3, #32
 80063c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	011b      	lsls	r3, r3, #4
 80063ce:	697a      	ldr	r2, [r7, #20]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a1e      	ldr	r2, [pc, #120]	; (8006450 <TIM_OC2_SetConfig+0xd4>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d10d      	bne.n	80063f8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	011b      	lsls	r3, r3, #4
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a15      	ldr	r2, [pc, #84]	; (8006450 <TIM_OC2_SetConfig+0xd4>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d113      	bne.n	8006428 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006406:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800640e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	695b      	ldr	r3, [r3, #20]
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	4313      	orrs	r3, r2
 800641a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	4313      	orrs	r3, r2
 8006426:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	685a      	ldr	r2, [r3, #4]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	621a      	str	r2, [r3, #32]
}
 8006442:	bf00      	nop
 8006444:	371c      	adds	r7, #28
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	40010000 	.word	0x40010000

08006454 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006454:	b480      	push	{r7}
 8006456:	b087      	sub	sp, #28
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a1b      	ldr	r3, [r3, #32]
 8006462:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a1b      	ldr	r3, [r3, #32]
 8006468:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	69db      	ldr	r3, [r3, #28]
 800647a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f023 0303 	bic.w	r3, r3, #3
 800648a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	4313      	orrs	r3, r2
 8006494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800649c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	021b      	lsls	r3, r3, #8
 80064a4:	697a      	ldr	r2, [r7, #20]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a1d      	ldr	r2, [pc, #116]	; (8006524 <TIM_OC3_SetConfig+0xd0>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d10d      	bne.n	80064ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	021b      	lsls	r3, r3, #8
 80064c0:	697a      	ldr	r2, [r7, #20]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a14      	ldr	r2, [pc, #80]	; (8006524 <TIM_OC3_SetConfig+0xd0>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d113      	bne.n	80064fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	695b      	ldr	r3, [r3, #20]
 80064ea:	011b      	lsls	r3, r3, #4
 80064ec:	693a      	ldr	r2, [r7, #16]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	011b      	lsls	r3, r3, #4
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	693a      	ldr	r2, [r7, #16]
 8006502:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	685a      	ldr	r2, [r3, #4]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	621a      	str	r2, [r3, #32]
}
 8006518:	bf00      	nop
 800651a:	371c      	adds	r7, #28
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr
 8006524:	40010000 	.word	0x40010000

08006528 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006528:	b480      	push	{r7}
 800652a:	b087      	sub	sp, #28
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a1b      	ldr	r3, [r3, #32]
 8006536:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a1b      	ldr	r3, [r3, #32]
 800653c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	69db      	ldr	r3, [r3, #28]
 800654e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800655e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	021b      	lsls	r3, r3, #8
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	4313      	orrs	r3, r2
 800656a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006572:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	031b      	lsls	r3, r3, #12
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	4313      	orrs	r3, r2
 800657e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a10      	ldr	r2, [pc, #64]	; (80065c4 <TIM_OC4_SetConfig+0x9c>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d109      	bne.n	800659c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800658e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	695b      	ldr	r3, [r3, #20]
 8006594:	019b      	lsls	r3, r3, #6
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	4313      	orrs	r3, r2
 800659a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	697a      	ldr	r2, [r7, #20]
 80065a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	685a      	ldr	r2, [r3, #4]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	693a      	ldr	r2, [r7, #16]
 80065b4:	621a      	str	r2, [r3, #32]
}
 80065b6:	bf00      	nop
 80065b8:	371c      	adds	r7, #28
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	40010000 	.word	0x40010000

080065c8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b087      	sub	sp, #28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
 80065d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6a1b      	ldr	r3, [r3, #32]
 80065e0:	f023 0201 	bic.w	r2, r3, #1
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	4a24      	ldr	r2, [pc, #144]	; (8006684 <TIM_TI1_SetConfig+0xbc>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d013      	beq.n	800661e <TIM_TI1_SetConfig+0x56>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065fc:	d00f      	beq.n	800661e <TIM_TI1_SetConfig+0x56>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	4a21      	ldr	r2, [pc, #132]	; (8006688 <TIM_TI1_SetConfig+0xc0>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d00b      	beq.n	800661e <TIM_TI1_SetConfig+0x56>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	4a20      	ldr	r2, [pc, #128]	; (800668c <TIM_TI1_SetConfig+0xc4>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d007      	beq.n	800661e <TIM_TI1_SetConfig+0x56>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	4a1f      	ldr	r2, [pc, #124]	; (8006690 <TIM_TI1_SetConfig+0xc8>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d003      	beq.n	800661e <TIM_TI1_SetConfig+0x56>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	4a1e      	ldr	r2, [pc, #120]	; (8006694 <TIM_TI1_SetConfig+0xcc>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d101      	bne.n	8006622 <TIM_TI1_SetConfig+0x5a>
 800661e:	2301      	movs	r3, #1
 8006620:	e000      	b.n	8006624 <TIM_TI1_SetConfig+0x5c>
 8006622:	2300      	movs	r3, #0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d008      	beq.n	800663a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	f023 0303 	bic.w	r3, r3, #3
 800662e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4313      	orrs	r3, r2
 8006636:	617b      	str	r3, [r7, #20]
 8006638:	e003      	b.n	8006642 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	f043 0301 	orr.w	r3, r3, #1
 8006640:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006648:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	011b      	lsls	r3, r3, #4
 800664e:	b2db      	uxtb	r3, r3
 8006650:	697a      	ldr	r2, [r7, #20]
 8006652:	4313      	orrs	r3, r2
 8006654:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	f023 030a 	bic.w	r3, r3, #10
 800665c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	f003 030a 	and.w	r3, r3, #10
 8006664:	693a      	ldr	r2, [r7, #16]
 8006666:	4313      	orrs	r3, r2
 8006668:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	697a      	ldr	r2, [r7, #20]
 800666e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	693a      	ldr	r2, [r7, #16]
 8006674:	621a      	str	r2, [r3, #32]
}
 8006676:	bf00      	nop
 8006678:	371c      	adds	r7, #28
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	40010000 	.word	0x40010000
 8006688:	40000400 	.word	0x40000400
 800668c:	40000800 	.word	0x40000800
 8006690:	40000c00 	.word	0x40000c00
 8006694:	40014000 	.word	0x40014000

08006698 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006698:	b480      	push	{r7}
 800669a:	b087      	sub	sp, #28
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6a1b      	ldr	r3, [r3, #32]
 80066a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	f023 0201 	bic.w	r2, r3, #1
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	011b      	lsls	r3, r3, #4
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	f023 030a 	bic.w	r3, r3, #10
 80066d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066d6:	697a      	ldr	r2, [r7, #20]
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	4313      	orrs	r3, r2
 80066dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	693a      	ldr	r2, [r7, #16]
 80066e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	621a      	str	r2, [r3, #32]
}
 80066ea:	bf00      	nop
 80066ec:	371c      	adds	r7, #28
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr

080066f6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80066f6:	b480      	push	{r7}
 80066f8:	b087      	sub	sp, #28
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	60f8      	str	r0, [r7, #12]
 80066fe:	60b9      	str	r1, [r7, #8]
 8006700:	607a      	str	r2, [r7, #4]
 8006702:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6a1b      	ldr	r3, [r3, #32]
 8006708:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	f023 0210 	bic.w	r2, r3, #16
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006722:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	021b      	lsls	r3, r3, #8
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	4313      	orrs	r3, r2
 800672c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006734:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	031b      	lsls	r3, r3, #12
 800673a:	b29b      	uxth	r3, r3
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	4313      	orrs	r3, r2
 8006740:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006748:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	011b      	lsls	r3, r3, #4
 800674e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	4313      	orrs	r3, r2
 8006756:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	621a      	str	r2, [r3, #32]
}
 8006764:	bf00      	nop
 8006766:	371c      	adds	r7, #28
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006770:	b480      	push	{r7}
 8006772:	b087      	sub	sp, #28
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6a1b      	ldr	r3, [r3, #32]
 8006780:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6a1b      	ldr	r3, [r3, #32]
 8006786:	f023 0210 	bic.w	r2, r3, #16
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800679a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	031b      	lsls	r3, r3, #12
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80067ac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	011b      	lsls	r3, r3, #4
 80067b2:	697a      	ldr	r2, [r7, #20]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	697a      	ldr	r2, [r7, #20]
 80067c2:	621a      	str	r2, [r3, #32]
}
 80067c4:	bf00      	nop
 80067c6:	371c      	adds	r7, #28
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b087      	sub	sp, #28
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
 80067dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6a1b      	ldr	r3, [r3, #32]
 80067e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	69db      	ldr	r3, [r3, #28]
 80067f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	f023 0303 	bic.w	r3, r3, #3
 80067fc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80067fe:	693a      	ldr	r2, [r7, #16]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4313      	orrs	r3, r2
 8006804:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800680c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	011b      	lsls	r3, r3, #4
 8006812:	b2db      	uxtb	r3, r3
 8006814:	693a      	ldr	r2, [r7, #16]
 8006816:	4313      	orrs	r3, r2
 8006818:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006820:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	021b      	lsls	r3, r3, #8
 8006826:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	4313      	orrs	r3, r2
 800682e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	693a      	ldr	r2, [r7, #16]
 8006834:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	697a      	ldr	r2, [r7, #20]
 800683a:	621a      	str	r2, [r3, #32]
}
 800683c:	bf00      	nop
 800683e:	371c      	adds	r7, #28
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006848:	b480      	push	{r7}
 800684a:	b087      	sub	sp, #28
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
 8006854:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6a1b      	ldr	r3, [r3, #32]
 800685a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6a1b      	ldr	r3, [r3, #32]
 8006860:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	69db      	ldr	r3, [r3, #28]
 800686c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006874:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	021b      	lsls	r3, r3, #8
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	4313      	orrs	r3, r2
 800687e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006886:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	031b      	lsls	r3, r3, #12
 800688c:	b29b      	uxth	r3, r3
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	4313      	orrs	r3, r2
 8006892:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800689a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	031b      	lsls	r3, r3, #12
 80068a0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80068a4:	697a      	ldr	r2, [r7, #20]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	693a      	ldr	r2, [r7, #16]
 80068ae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	621a      	str	r2, [r3, #32]
}
 80068b6:	bf00      	nop
 80068b8:	371c      	adds	r7, #28
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr

080068c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068c2:	b480      	push	{r7}
 80068c4:	b085      	sub	sp, #20
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
 80068ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068da:	683a      	ldr	r2, [r7, #0]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	4313      	orrs	r3, r2
 80068e0:	f043 0307 	orr.w	r3, r3, #7
 80068e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	609a      	str	r2, [r3, #8]
}
 80068ec:	bf00      	nop
 80068ee:	3714      	adds	r7, #20
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b087      	sub	sp, #28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
 8006904:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006912:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	021a      	lsls	r2, r3, #8
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	431a      	orrs	r2, r3
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	4313      	orrs	r3, r2
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	4313      	orrs	r3, r2
 8006924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	697a      	ldr	r2, [r7, #20]
 800692a:	609a      	str	r2, [r3, #8]
}
 800692c:	bf00      	nop
 800692e:	371c      	adds	r7, #28
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006938:	b480      	push	{r7}
 800693a:	b087      	sub	sp, #28
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	f003 031f 	and.w	r3, r3, #31
 800694a:	2201      	movs	r2, #1
 800694c:	fa02 f303 	lsl.w	r3, r2, r3
 8006950:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6a1a      	ldr	r2, [r3, #32]
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	43db      	mvns	r3, r3
 800695a:	401a      	ands	r2, r3
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6a1a      	ldr	r2, [r3, #32]
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	f003 031f 	and.w	r3, r3, #31
 800696a:	6879      	ldr	r1, [r7, #4]
 800696c:	fa01 f303 	lsl.w	r3, r1, r3
 8006970:	431a      	orrs	r2, r3
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	621a      	str	r2, [r3, #32]
}
 8006976:	bf00      	nop
 8006978:	371c      	adds	r7, #28
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
	...

08006984 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006994:	2b01      	cmp	r3, #1
 8006996:	d101      	bne.n	800699c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006998:	2302      	movs	r3, #2
 800699a:	e050      	b.n	8006a3e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2202      	movs	r2, #2
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a1c      	ldr	r2, [pc, #112]	; (8006a4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d018      	beq.n	8006a12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069e8:	d013      	beq.n	8006a12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a18      	ldr	r2, [pc, #96]	; (8006a50 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d00e      	beq.n	8006a12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a16      	ldr	r2, [pc, #88]	; (8006a54 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d009      	beq.n	8006a12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a15      	ldr	r2, [pc, #84]	; (8006a58 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d004      	beq.n	8006a12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a13      	ldr	r2, [pc, #76]	; (8006a5c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d10c      	bne.n	8006a2c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68ba      	ldr	r2, [r7, #8]
 8006a2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3714      	adds	r7, #20
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	40010000 	.word	0x40010000
 8006a50:	40000400 	.word	0x40000400
 8006a54:	40000800 	.word	0x40000800
 8006a58:	40000c00 	.word	0x40000c00
 8006a5c:	40014000 	.word	0x40014000

08006a60 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a68:	bf00      	nop
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a7c:	bf00      	nop
 8006a7e:	370c      	adds	r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d101      	bne.n	8006a9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e042      	b.n	8006b20 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d106      	bne.n	8006ab4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f7fb fdb8 	bl	8002624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2224      	movs	r2, #36	; 0x24
 8006ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68da      	ldr	r2, [r3, #12]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006aca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 fdbd 	bl	800764c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	691a      	ldr	r2, [r3, #16]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ae0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	695a      	ldr	r2, [r3, #20]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006af0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68da      	ldr	r2, [r3, #12]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2220      	movs	r2, #32
 8006b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3708      	adds	r7, #8
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b08a      	sub	sp, #40	; 0x28
 8006b2c:	af02      	add	r7, sp, #8
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	603b      	str	r3, [r7, #0]
 8006b34:	4613      	mov	r3, r2
 8006b36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	2b20      	cmp	r3, #32
 8006b46:	d175      	bne.n	8006c34 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d002      	beq.n	8006b54 <HAL_UART_Transmit+0x2c>
 8006b4e:	88fb      	ldrh	r3, [r7, #6]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d101      	bne.n	8006b58 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	e06e      	b.n	8006c36 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2221      	movs	r2, #33	; 0x21
 8006b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b66:	f7fb ffe7 	bl	8002b38 <HAL_GetTick>
 8006b6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	88fa      	ldrh	r2, [r7, #6]
 8006b70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	88fa      	ldrh	r2, [r7, #6]
 8006b76:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b80:	d108      	bne.n	8006b94 <HAL_UART_Transmit+0x6c>
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d104      	bne.n	8006b94 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	61bb      	str	r3, [r7, #24]
 8006b92:	e003      	b.n	8006b9c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006b9c:	e02e      	b.n	8006bfc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	9300      	str	r3, [sp, #0]
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	2180      	movs	r1, #128	; 0x80
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f000 fb1f 	bl	80071ec <UART_WaitOnFlagUntilTimeout>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d005      	beq.n	8006bc0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2220      	movs	r2, #32
 8006bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e03a      	b.n	8006c36 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d10b      	bne.n	8006bde <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	881b      	ldrh	r3, [r3, #0]
 8006bca:	461a      	mov	r2, r3
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	3302      	adds	r3, #2
 8006bda:	61bb      	str	r3, [r7, #24]
 8006bdc:	e007      	b.n	8006bee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	781a      	ldrb	r2, [r3, #0]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	3301      	adds	r3, #1
 8006bec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1cb      	bne.n	8006b9e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	9300      	str	r3, [sp, #0]
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	2140      	movs	r1, #64	; 0x40
 8006c10:	68f8      	ldr	r0, [r7, #12]
 8006c12:	f000 faeb 	bl	80071ec <UART_WaitOnFlagUntilTimeout>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d005      	beq.n	8006c28 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2220      	movs	r2, #32
 8006c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e006      	b.n	8006c36 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2220      	movs	r2, #32
 8006c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006c30:	2300      	movs	r3, #0
 8006c32:	e000      	b.n	8006c36 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006c34:	2302      	movs	r3, #2
  }
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3720      	adds	r7, #32
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b084      	sub	sp, #16
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	60f8      	str	r0, [r7, #12]
 8006c46:	60b9      	str	r1, [r7, #8]
 8006c48:	4613      	mov	r3, r2
 8006c4a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	2b20      	cmp	r3, #32
 8006c56:	d112      	bne.n	8006c7e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d002      	beq.n	8006c64 <HAL_UART_Receive_IT+0x26>
 8006c5e:	88fb      	ldrh	r3, [r7, #6]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d101      	bne.n	8006c68 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e00b      	b.n	8006c80 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006c6e:	88fb      	ldrh	r3, [r7, #6]
 8006c70:	461a      	mov	r2, r3
 8006c72:	68b9      	ldr	r1, [r7, #8]
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	f000 fb12 	bl	800729e <UART_Start_Receive_IT>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	e000      	b.n	8006c80 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006c7e:	2302      	movs	r3, #2
  }
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3710      	adds	r7, #16
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b0ba      	sub	sp, #232	; 0xe8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	695b      	ldr	r3, [r3, #20]
 8006caa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cbe:	f003 030f 	and.w	r3, r3, #15
 8006cc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006cc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d10f      	bne.n	8006cee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cd2:	f003 0320 	and.w	r3, r3, #32
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d009      	beq.n	8006cee <HAL_UART_IRQHandler+0x66>
 8006cda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cde:	f003 0320 	and.w	r3, r3, #32
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d003      	beq.n	8006cee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fbf2 	bl	80074d0 <UART_Receive_IT>
      return;
 8006cec:	e25b      	b.n	80071a6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006cee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f000 80de 	beq.w	8006eb4 <HAL_UART_IRQHandler+0x22c>
 8006cf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cfc:	f003 0301 	and.w	r3, r3, #1
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d106      	bne.n	8006d12 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d08:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f000 80d1 	beq.w	8006eb4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d16:	f003 0301 	and.w	r3, r3, #1
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00b      	beq.n	8006d36 <HAL_UART_IRQHandler+0xae>
 8006d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d005      	beq.n	8006d36 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d2e:	f043 0201 	orr.w	r2, r3, #1
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d3a:	f003 0304 	and.w	r3, r3, #4
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00b      	beq.n	8006d5a <HAL_UART_IRQHandler+0xd2>
 8006d42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d46:	f003 0301 	and.w	r3, r3, #1
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d005      	beq.n	8006d5a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d52:	f043 0202 	orr.w	r2, r3, #2
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d5e:	f003 0302 	and.w	r3, r3, #2
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00b      	beq.n	8006d7e <HAL_UART_IRQHandler+0xf6>
 8006d66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d6a:	f003 0301 	and.w	r3, r3, #1
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d005      	beq.n	8006d7e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d76:	f043 0204 	orr.w	r2, r3, #4
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d82:	f003 0308 	and.w	r3, r3, #8
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d011      	beq.n	8006dae <HAL_UART_IRQHandler+0x126>
 8006d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d8e:	f003 0320 	and.w	r3, r3, #32
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d105      	bne.n	8006da2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006d96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d9a:	f003 0301 	and.w	r3, r3, #1
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d005      	beq.n	8006dae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006da6:	f043 0208 	orr.w	r2, r3, #8
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	f000 81f2 	beq.w	800719c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dbc:	f003 0320 	and.w	r3, r3, #32
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d008      	beq.n	8006dd6 <HAL_UART_IRQHandler+0x14e>
 8006dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dc8:	f003 0320 	and.w	r3, r3, #32
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d002      	beq.n	8006dd6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 fb7d 	bl	80074d0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	695b      	ldr	r3, [r3, #20]
 8006ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006de0:	2b40      	cmp	r3, #64	; 0x40
 8006de2:	bf0c      	ite	eq
 8006de4:	2301      	moveq	r3, #1
 8006de6:	2300      	movne	r3, #0
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006df2:	f003 0308 	and.w	r3, r3, #8
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d103      	bne.n	8006e02 <HAL_UART_IRQHandler+0x17a>
 8006dfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d04f      	beq.n	8006ea2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 fa85 	bl	8007312 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	695b      	ldr	r3, [r3, #20]
 8006e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e12:	2b40      	cmp	r3, #64	; 0x40
 8006e14:	d141      	bne.n	8006e9a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	3314      	adds	r3, #20
 8006e1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e24:	e853 3f00 	ldrex	r3, [r3]
 8006e28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006e2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	3314      	adds	r3, #20
 8006e3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006e42:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006e46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006e4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006e52:	e841 2300 	strex	r3, r2, [r1]
 8006e56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006e5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1d9      	bne.n	8006e16 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d013      	beq.n	8006e92 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e6e:	4a7e      	ldr	r2, [pc, #504]	; (8007068 <HAL_UART_IRQHandler+0x3e0>)
 8006e70:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7fc f80f 	bl	8002e9a <HAL_DMA_Abort_IT>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d016      	beq.n	8006eb0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006e8c:	4610      	mov	r0, r2
 8006e8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e90:	e00e      	b.n	8006eb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f994 	bl	80071c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e98:	e00a      	b.n	8006eb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f990 	bl	80071c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ea0:	e006      	b.n	8006eb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f98c 	bl	80071c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006eae:	e175      	b.n	800719c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eb0:	bf00      	nop
    return;
 8006eb2:	e173      	b.n	800719c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	f040 814f 	bne.w	800715c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ec2:	f003 0310 	and.w	r3, r3, #16
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f000 8148 	beq.w	800715c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ed0:	f003 0310 	and.w	r3, r3, #16
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f000 8141 	beq.w	800715c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006eda:	2300      	movs	r3, #0
 8006edc:	60bb      	str	r3, [r7, #8]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	60bb      	str	r3, [r7, #8]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	60bb      	str	r3, [r7, #8]
 8006eee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	695b      	ldr	r3, [r3, #20]
 8006ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006efa:	2b40      	cmp	r3, #64	; 0x40
 8006efc:	f040 80b6 	bne.w	800706c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f0c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	f000 8145 	beq.w	80071a0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	f080 813e 	bcs.w	80071a0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f2a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f30:	69db      	ldr	r3, [r3, #28]
 8006f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f36:	f000 8088 	beq.w	800704a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	330c      	adds	r3, #12
 8006f40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f48:	e853 3f00 	ldrex	r3, [r3]
 8006f4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006f50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	330c      	adds	r3, #12
 8006f62:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006f66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006f72:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006f76:	e841 2300 	strex	r3, r2, [r1]
 8006f7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006f7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1d9      	bne.n	8006f3a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	3314      	adds	r3, #20
 8006f8c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f90:	e853 3f00 	ldrex	r3, [r3]
 8006f94:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006f96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f98:	f023 0301 	bic.w	r3, r3, #1
 8006f9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	3314      	adds	r3, #20
 8006fa6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006faa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006fae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006fb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006fb6:	e841 2300 	strex	r3, r2, [r1]
 8006fba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006fbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1e1      	bne.n	8006f86 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	3314      	adds	r3, #20
 8006fc8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006fcc:	e853 3f00 	ldrex	r3, [r3]
 8006fd0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006fd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	3314      	adds	r3, #20
 8006fe2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006fe6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006fe8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006fec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006fee:	e841 2300 	strex	r3, r2, [r1]
 8006ff2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006ff4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1e3      	bne.n	8006fc2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2220      	movs	r2, #32
 8006ffe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	330c      	adds	r3, #12
 800700e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007012:	e853 3f00 	ldrex	r3, [r3]
 8007016:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007018:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800701a:	f023 0310 	bic.w	r3, r3, #16
 800701e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	330c      	adds	r3, #12
 8007028:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800702c:	65ba      	str	r2, [r7, #88]	; 0x58
 800702e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007030:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007032:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007034:	e841 2300 	strex	r3, r2, [r1]
 8007038:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800703a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800703c:	2b00      	cmp	r3, #0
 800703e:	d1e3      	bne.n	8007008 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007044:	4618      	mov	r0, r3
 8007046:	f7fb feb8 	bl	8002dba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2202      	movs	r2, #2
 800704e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007058:	b29b      	uxth	r3, r3
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	b29b      	uxth	r3, r3
 800705e:	4619      	mov	r1, r3
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 f8b7 	bl	80071d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007066:	e09b      	b.n	80071a0 <HAL_UART_IRQHandler+0x518>
 8007068:	080073d9 	.word	0x080073d9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007074:	b29b      	uxth	r3, r3
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007080:	b29b      	uxth	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	f000 808e 	beq.w	80071a4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007088:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800708c:	2b00      	cmp	r3, #0
 800708e:	f000 8089 	beq.w	80071a4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	330c      	adds	r3, #12
 8007098:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709c:	e853 3f00 	ldrex	r3, [r3]
 80070a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	330c      	adds	r3, #12
 80070b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80070b6:	647a      	str	r2, [r7, #68]	; 0x44
 80070b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80070bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070be:	e841 2300 	strex	r3, r2, [r1]
 80070c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80070c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1e3      	bne.n	8007092 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	3314      	adds	r3, #20
 80070d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d4:	e853 3f00 	ldrex	r3, [r3]
 80070d8:	623b      	str	r3, [r7, #32]
   return(result);
 80070da:	6a3b      	ldr	r3, [r7, #32]
 80070dc:	f023 0301 	bic.w	r3, r3, #1
 80070e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	3314      	adds	r3, #20
 80070ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80070ee:	633a      	str	r2, [r7, #48]	; 0x30
 80070f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070f6:	e841 2300 	strex	r3, r2, [r1]
 80070fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80070fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1e3      	bne.n	80070ca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2220      	movs	r2, #32
 8007106:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	330c      	adds	r3, #12
 8007116:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	e853 3f00 	ldrex	r3, [r3]
 800711e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f023 0310 	bic.w	r3, r3, #16
 8007126:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	330c      	adds	r3, #12
 8007130:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007134:	61fa      	str	r2, [r7, #28]
 8007136:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007138:	69b9      	ldr	r1, [r7, #24]
 800713a:	69fa      	ldr	r2, [r7, #28]
 800713c:	e841 2300 	strex	r3, r2, [r1]
 8007140:	617b      	str	r3, [r7, #20]
   return(result);
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d1e3      	bne.n	8007110 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2202      	movs	r2, #2
 800714c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800714e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007152:	4619      	mov	r1, r3
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 f83d 	bl	80071d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800715a:	e023      	b.n	80071a4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800715c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007164:	2b00      	cmp	r3, #0
 8007166:	d009      	beq.n	800717c <HAL_UART_IRQHandler+0x4f4>
 8007168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800716c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007170:	2b00      	cmp	r3, #0
 8007172:	d003      	beq.n	800717c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 f943 	bl	8007400 <UART_Transmit_IT>
    return;
 800717a:	e014      	b.n	80071a6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800717c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007184:	2b00      	cmp	r3, #0
 8007186:	d00e      	beq.n	80071a6 <HAL_UART_IRQHandler+0x51e>
 8007188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800718c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007190:	2b00      	cmp	r3, #0
 8007192:	d008      	beq.n	80071a6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 f983 	bl	80074a0 <UART_EndTransmit_IT>
    return;
 800719a:	e004      	b.n	80071a6 <HAL_UART_IRQHandler+0x51e>
    return;
 800719c:	bf00      	nop
 800719e:	e002      	b.n	80071a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80071a0:	bf00      	nop
 80071a2:	e000      	b.n	80071a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80071a4:	bf00      	nop
  }
}
 80071a6:	37e8      	adds	r7, #232	; 0xe8
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80071b4:	bf00      	nop
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80071c8:	bf00      	nop
 80071ca:	370c      	adds	r7, #12
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	460b      	mov	r3, r1
 80071de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80071e0:	bf00      	nop
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b086      	sub	sp, #24
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	603b      	str	r3, [r7, #0]
 80071f8:	4613      	mov	r3, r2
 80071fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071fc:	e03b      	b.n	8007276 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071fe:	6a3b      	ldr	r3, [r7, #32]
 8007200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007204:	d037      	beq.n	8007276 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007206:	f7fb fc97 	bl	8002b38 <HAL_GetTick>
 800720a:	4602      	mov	r2, r0
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	1ad3      	subs	r3, r2, r3
 8007210:	6a3a      	ldr	r2, [r7, #32]
 8007212:	429a      	cmp	r2, r3
 8007214:	d302      	bcc.n	800721c <UART_WaitOnFlagUntilTimeout+0x30>
 8007216:	6a3b      	ldr	r3, [r7, #32]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d101      	bne.n	8007220 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800721c:	2303      	movs	r3, #3
 800721e:	e03a      	b.n	8007296 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	f003 0304 	and.w	r3, r3, #4
 800722a:	2b00      	cmp	r3, #0
 800722c:	d023      	beq.n	8007276 <UART_WaitOnFlagUntilTimeout+0x8a>
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	2b80      	cmp	r3, #128	; 0x80
 8007232:	d020      	beq.n	8007276 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	2b40      	cmp	r3, #64	; 0x40
 8007238:	d01d      	beq.n	8007276 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0308 	and.w	r3, r3, #8
 8007244:	2b08      	cmp	r3, #8
 8007246:	d116      	bne.n	8007276 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007248:	2300      	movs	r3, #0
 800724a:	617b      	str	r3, [r7, #20]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	617b      	str	r3, [r7, #20]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	617b      	str	r3, [r7, #20]
 800725c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800725e:	68f8      	ldr	r0, [r7, #12]
 8007260:	f000 f857 	bl	8007312 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2208      	movs	r2, #8
 8007268:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2200      	movs	r2, #0
 800726e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	e00f      	b.n	8007296 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	4013      	ands	r3, r2
 8007280:	68ba      	ldr	r2, [r7, #8]
 8007282:	429a      	cmp	r2, r3
 8007284:	bf0c      	ite	eq
 8007286:	2301      	moveq	r3, #1
 8007288:	2300      	movne	r3, #0
 800728a:	b2db      	uxtb	r3, r3
 800728c:	461a      	mov	r2, r3
 800728e:	79fb      	ldrb	r3, [r7, #7]
 8007290:	429a      	cmp	r2, r3
 8007292:	d0b4      	beq.n	80071fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3718      	adds	r7, #24
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}

0800729e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800729e:	b480      	push	{r7}
 80072a0:	b085      	sub	sp, #20
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	60f8      	str	r0, [r7, #12]
 80072a6:	60b9      	str	r1, [r7, #8]
 80072a8:	4613      	mov	r3, r2
 80072aa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	68ba      	ldr	r2, [r7, #8]
 80072b0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	88fa      	ldrh	r2, [r7, #6]
 80072b6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	88fa      	ldrh	r2, [r7, #6]
 80072bc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2200      	movs	r2, #0
 80072c2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2222      	movs	r2, #34	; 0x22
 80072c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d007      	beq.n	80072e4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68da      	ldr	r2, [r3, #12]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072e2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	695a      	ldr	r2, [r3, #20]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f042 0201 	orr.w	r2, r2, #1
 80072f2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	68da      	ldr	r2, [r3, #12]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f042 0220 	orr.w	r2, r2, #32
 8007302:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3714      	adds	r7, #20
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr

08007312 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007312:	b480      	push	{r7}
 8007314:	b095      	sub	sp, #84	; 0x54
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	330c      	adds	r3, #12
 8007320:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007324:	e853 3f00 	ldrex	r3, [r3]
 8007328:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800732a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007330:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	330c      	adds	r3, #12
 8007338:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800733a:	643a      	str	r2, [r7, #64]	; 0x40
 800733c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007340:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007342:	e841 2300 	strex	r3, r2, [r1]
 8007346:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734a:	2b00      	cmp	r3, #0
 800734c:	d1e5      	bne.n	800731a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	3314      	adds	r3, #20
 8007354:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007356:	6a3b      	ldr	r3, [r7, #32]
 8007358:	e853 3f00 	ldrex	r3, [r3]
 800735c:	61fb      	str	r3, [r7, #28]
   return(result);
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	f023 0301 	bic.w	r3, r3, #1
 8007364:	64bb      	str	r3, [r7, #72]	; 0x48
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	3314      	adds	r3, #20
 800736c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800736e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007370:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007372:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007374:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007376:	e841 2300 	strex	r3, r2, [r1]
 800737a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800737c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1e5      	bne.n	800734e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007386:	2b01      	cmp	r3, #1
 8007388:	d119      	bne.n	80073be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	330c      	adds	r3, #12
 8007390:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	e853 3f00 	ldrex	r3, [r3]
 8007398:	60bb      	str	r3, [r7, #8]
   return(result);
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	f023 0310 	bic.w	r3, r3, #16
 80073a0:	647b      	str	r3, [r7, #68]	; 0x44
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	330c      	adds	r3, #12
 80073a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073aa:	61ba      	str	r2, [r7, #24]
 80073ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ae:	6979      	ldr	r1, [r7, #20]
 80073b0:	69ba      	ldr	r2, [r7, #24]
 80073b2:	e841 2300 	strex	r3, r2, [r1]
 80073b6:	613b      	str	r3, [r7, #16]
   return(result);
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1e5      	bne.n	800738a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2220      	movs	r2, #32
 80073c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	631a      	str	r2, [r3, #48]	; 0x30
}
 80073cc:	bf00      	nop
 80073ce:	3754      	adds	r7, #84	; 0x54
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073f2:	68f8      	ldr	r0, [r7, #12]
 80073f4:	f7ff fee4 	bl	80071c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073f8:	bf00      	nop
 80073fa:	3710      	adds	r7, #16
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007400:	b480      	push	{r7}
 8007402:	b085      	sub	sp, #20
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800740e:	b2db      	uxtb	r3, r3
 8007410:	2b21      	cmp	r3, #33	; 0x21
 8007412:	d13e      	bne.n	8007492 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800741c:	d114      	bne.n	8007448 <UART_Transmit_IT+0x48>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d110      	bne.n	8007448 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a1b      	ldr	r3, [r3, #32]
 800742a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	881b      	ldrh	r3, [r3, #0]
 8007430:	461a      	mov	r2, r3
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800743a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6a1b      	ldr	r3, [r3, #32]
 8007440:	1c9a      	adds	r2, r3, #2
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	621a      	str	r2, [r3, #32]
 8007446:	e008      	b.n	800745a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6a1b      	ldr	r3, [r3, #32]
 800744c:	1c59      	adds	r1, r3, #1
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	6211      	str	r1, [r2, #32]
 8007452:	781a      	ldrb	r2, [r3, #0]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800745e:	b29b      	uxth	r3, r3
 8007460:	3b01      	subs	r3, #1
 8007462:	b29b      	uxth	r3, r3
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	4619      	mov	r1, r3
 8007468:	84d1      	strh	r1, [r2, #38]	; 0x26
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10f      	bne.n	800748e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68da      	ldr	r2, [r3, #12]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800747c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68da      	ldr	r2, [r3, #12]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800748c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800748e:	2300      	movs	r3, #0
 8007490:	e000      	b.n	8007494 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007492:	2302      	movs	r3, #2
  }
}
 8007494:	4618      	mov	r0, r3
 8007496:	3714      	adds	r7, #20
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68da      	ldr	r2, [r3, #12]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074b6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2220      	movs	r2, #32
 80074bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f7ff fe73 	bl	80071ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3708      	adds	r7, #8
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b08c      	sub	sp, #48	; 0x30
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	2b22      	cmp	r3, #34	; 0x22
 80074e2:	f040 80ae 	bne.w	8007642 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ee:	d117      	bne.n	8007520 <UART_Receive_IT+0x50>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d113      	bne.n	8007520 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80074f8:	2300      	movs	r3, #0
 80074fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007500:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	b29b      	uxth	r3, r3
 800750a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800750e:	b29a      	uxth	r2, r3
 8007510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007512:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007518:	1c9a      	adds	r2, r3, #2
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	629a      	str	r2, [r3, #40]	; 0x28
 800751e:	e026      	b.n	800756e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007524:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007526:	2300      	movs	r3, #0
 8007528:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007532:	d007      	beq.n	8007544 <UART_Receive_IT+0x74>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d10a      	bne.n	8007552 <UART_Receive_IT+0x82>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d106      	bne.n	8007552 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	b2da      	uxtb	r2, r3
 800754c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754e:	701a      	strb	r2, [r3, #0]
 8007550:	e008      	b.n	8007564 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	b2db      	uxtb	r3, r3
 800755a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800755e:	b2da      	uxtb	r2, r3
 8007560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007562:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007568:	1c5a      	adds	r2, r3, #1
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007572:	b29b      	uxth	r3, r3
 8007574:	3b01      	subs	r3, #1
 8007576:	b29b      	uxth	r3, r3
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	4619      	mov	r1, r3
 800757c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800757e:	2b00      	cmp	r3, #0
 8007580:	d15d      	bne.n	800763e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68da      	ldr	r2, [r3, #12]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f022 0220 	bic.w	r2, r2, #32
 8007590:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	68da      	ldr	r2, [r3, #12]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	695a      	ldr	r2, [r3, #20]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f022 0201 	bic.w	r2, r2, #1
 80075b0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2220      	movs	r2, #32
 80075b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d135      	bne.n	8007634 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	330c      	adds	r3, #12
 80075d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	e853 3f00 	ldrex	r3, [r3]
 80075dc:	613b      	str	r3, [r7, #16]
   return(result);
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	f023 0310 	bic.w	r3, r3, #16
 80075e4:	627b      	str	r3, [r7, #36]	; 0x24
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	330c      	adds	r3, #12
 80075ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075ee:	623a      	str	r2, [r7, #32]
 80075f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f2:	69f9      	ldr	r1, [r7, #28]
 80075f4:	6a3a      	ldr	r2, [r7, #32]
 80075f6:	e841 2300 	strex	r3, r2, [r1]
 80075fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d1e5      	bne.n	80075ce <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 0310 	and.w	r3, r3, #16
 800760c:	2b10      	cmp	r3, #16
 800760e:	d10a      	bne.n	8007626 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007610:	2300      	movs	r3, #0
 8007612:	60fb      	str	r3, [r7, #12]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	60fb      	str	r3, [r7, #12]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	60fb      	str	r3, [r7, #12]
 8007624:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800762a:	4619      	mov	r1, r3
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f7ff fdd1 	bl	80071d4 <HAL_UARTEx_RxEventCallback>
 8007632:	e002      	b.n	800763a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f7fb f94d 	bl	80028d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800763a:	2300      	movs	r3, #0
 800763c:	e002      	b.n	8007644 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800763e:	2300      	movs	r3, #0
 8007640:	e000      	b.n	8007644 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007642:	2302      	movs	r3, #2
  }
}
 8007644:	4618      	mov	r0, r3
 8007646:	3730      	adds	r7, #48	; 0x30
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800764c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007650:	b0c0      	sub	sp, #256	; 0x100
 8007652:	af00      	add	r7, sp, #0
 8007654:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	691b      	ldr	r3, [r3, #16]
 8007660:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007668:	68d9      	ldr	r1, [r3, #12]
 800766a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	ea40 0301 	orr.w	r3, r0, r1
 8007674:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800767a:	689a      	ldr	r2, [r3, #8]
 800767c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	431a      	orrs	r2, r3
 8007684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007688:	695b      	ldr	r3, [r3, #20]
 800768a:	431a      	orrs	r2, r3
 800768c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007690:	69db      	ldr	r3, [r3, #28]
 8007692:	4313      	orrs	r3, r2
 8007694:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80076a4:	f021 010c 	bic.w	r1, r1, #12
 80076a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80076b2:	430b      	orrs	r3, r1
 80076b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80076b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	695b      	ldr	r3, [r3, #20]
 80076be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80076c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076c6:	6999      	ldr	r1, [r3, #24]
 80076c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	ea40 0301 	orr.w	r3, r0, r1
 80076d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80076d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	4b8f      	ldr	r3, [pc, #572]	; (8007918 <UART_SetConfig+0x2cc>)
 80076dc:	429a      	cmp	r2, r3
 80076de:	d005      	beq.n	80076ec <UART_SetConfig+0xa0>
 80076e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	4b8d      	ldr	r3, [pc, #564]	; (800791c <UART_SetConfig+0x2d0>)
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d104      	bne.n	80076f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80076ec:	f7fd fe96 	bl	800541c <HAL_RCC_GetPCLK2Freq>
 80076f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80076f4:	e003      	b.n	80076fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80076f6:	f7fd fe7d 	bl	80053f4 <HAL_RCC_GetPCLK1Freq>
 80076fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007702:	69db      	ldr	r3, [r3, #28]
 8007704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007708:	f040 810c 	bne.w	8007924 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800770c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007710:	2200      	movs	r2, #0
 8007712:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007716:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800771a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800771e:	4622      	mov	r2, r4
 8007720:	462b      	mov	r3, r5
 8007722:	1891      	adds	r1, r2, r2
 8007724:	65b9      	str	r1, [r7, #88]	; 0x58
 8007726:	415b      	adcs	r3, r3
 8007728:	65fb      	str	r3, [r7, #92]	; 0x5c
 800772a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800772e:	4621      	mov	r1, r4
 8007730:	eb12 0801 	adds.w	r8, r2, r1
 8007734:	4629      	mov	r1, r5
 8007736:	eb43 0901 	adc.w	r9, r3, r1
 800773a:	f04f 0200 	mov.w	r2, #0
 800773e:	f04f 0300 	mov.w	r3, #0
 8007742:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007746:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800774a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800774e:	4690      	mov	r8, r2
 8007750:	4699      	mov	r9, r3
 8007752:	4623      	mov	r3, r4
 8007754:	eb18 0303 	adds.w	r3, r8, r3
 8007758:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800775c:	462b      	mov	r3, r5
 800775e:	eb49 0303 	adc.w	r3, r9, r3
 8007762:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007772:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007776:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800777a:	460b      	mov	r3, r1
 800777c:	18db      	adds	r3, r3, r3
 800777e:	653b      	str	r3, [r7, #80]	; 0x50
 8007780:	4613      	mov	r3, r2
 8007782:	eb42 0303 	adc.w	r3, r2, r3
 8007786:	657b      	str	r3, [r7, #84]	; 0x54
 8007788:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800778c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007790:	f7f9 f964 	bl	8000a5c <__aeabi_uldivmod>
 8007794:	4602      	mov	r2, r0
 8007796:	460b      	mov	r3, r1
 8007798:	4b61      	ldr	r3, [pc, #388]	; (8007920 <UART_SetConfig+0x2d4>)
 800779a:	fba3 2302 	umull	r2, r3, r3, r2
 800779e:	095b      	lsrs	r3, r3, #5
 80077a0:	011c      	lsls	r4, r3, #4
 80077a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077a6:	2200      	movs	r2, #0
 80077a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80077ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80077b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80077b4:	4642      	mov	r2, r8
 80077b6:	464b      	mov	r3, r9
 80077b8:	1891      	adds	r1, r2, r2
 80077ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80077bc:	415b      	adcs	r3, r3
 80077be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80077c4:	4641      	mov	r1, r8
 80077c6:	eb12 0a01 	adds.w	sl, r2, r1
 80077ca:	4649      	mov	r1, r9
 80077cc:	eb43 0b01 	adc.w	fp, r3, r1
 80077d0:	f04f 0200 	mov.w	r2, #0
 80077d4:	f04f 0300 	mov.w	r3, #0
 80077d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80077dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80077e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80077e4:	4692      	mov	sl, r2
 80077e6:	469b      	mov	fp, r3
 80077e8:	4643      	mov	r3, r8
 80077ea:	eb1a 0303 	adds.w	r3, sl, r3
 80077ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80077f2:	464b      	mov	r3, r9
 80077f4:	eb4b 0303 	adc.w	r3, fp, r3
 80077f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80077fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007808:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800780c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007810:	460b      	mov	r3, r1
 8007812:	18db      	adds	r3, r3, r3
 8007814:	643b      	str	r3, [r7, #64]	; 0x40
 8007816:	4613      	mov	r3, r2
 8007818:	eb42 0303 	adc.w	r3, r2, r3
 800781c:	647b      	str	r3, [r7, #68]	; 0x44
 800781e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007822:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007826:	f7f9 f919 	bl	8000a5c <__aeabi_uldivmod>
 800782a:	4602      	mov	r2, r0
 800782c:	460b      	mov	r3, r1
 800782e:	4611      	mov	r1, r2
 8007830:	4b3b      	ldr	r3, [pc, #236]	; (8007920 <UART_SetConfig+0x2d4>)
 8007832:	fba3 2301 	umull	r2, r3, r3, r1
 8007836:	095b      	lsrs	r3, r3, #5
 8007838:	2264      	movs	r2, #100	; 0x64
 800783a:	fb02 f303 	mul.w	r3, r2, r3
 800783e:	1acb      	subs	r3, r1, r3
 8007840:	00db      	lsls	r3, r3, #3
 8007842:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007846:	4b36      	ldr	r3, [pc, #216]	; (8007920 <UART_SetConfig+0x2d4>)
 8007848:	fba3 2302 	umull	r2, r3, r3, r2
 800784c:	095b      	lsrs	r3, r3, #5
 800784e:	005b      	lsls	r3, r3, #1
 8007850:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007854:	441c      	add	r4, r3
 8007856:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800785a:	2200      	movs	r2, #0
 800785c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007860:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007864:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007868:	4642      	mov	r2, r8
 800786a:	464b      	mov	r3, r9
 800786c:	1891      	adds	r1, r2, r2
 800786e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007870:	415b      	adcs	r3, r3
 8007872:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007874:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007878:	4641      	mov	r1, r8
 800787a:	1851      	adds	r1, r2, r1
 800787c:	6339      	str	r1, [r7, #48]	; 0x30
 800787e:	4649      	mov	r1, r9
 8007880:	414b      	adcs	r3, r1
 8007882:	637b      	str	r3, [r7, #52]	; 0x34
 8007884:	f04f 0200 	mov.w	r2, #0
 8007888:	f04f 0300 	mov.w	r3, #0
 800788c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007890:	4659      	mov	r1, fp
 8007892:	00cb      	lsls	r3, r1, #3
 8007894:	4651      	mov	r1, sl
 8007896:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800789a:	4651      	mov	r1, sl
 800789c:	00ca      	lsls	r2, r1, #3
 800789e:	4610      	mov	r0, r2
 80078a0:	4619      	mov	r1, r3
 80078a2:	4603      	mov	r3, r0
 80078a4:	4642      	mov	r2, r8
 80078a6:	189b      	adds	r3, r3, r2
 80078a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078ac:	464b      	mov	r3, r9
 80078ae:	460a      	mov	r2, r1
 80078b0:	eb42 0303 	adc.w	r3, r2, r3
 80078b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80078c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80078c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80078cc:	460b      	mov	r3, r1
 80078ce:	18db      	adds	r3, r3, r3
 80078d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80078d2:	4613      	mov	r3, r2
 80078d4:	eb42 0303 	adc.w	r3, r2, r3
 80078d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80078de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80078e2:	f7f9 f8bb 	bl	8000a5c <__aeabi_uldivmod>
 80078e6:	4602      	mov	r2, r0
 80078e8:	460b      	mov	r3, r1
 80078ea:	4b0d      	ldr	r3, [pc, #52]	; (8007920 <UART_SetConfig+0x2d4>)
 80078ec:	fba3 1302 	umull	r1, r3, r3, r2
 80078f0:	095b      	lsrs	r3, r3, #5
 80078f2:	2164      	movs	r1, #100	; 0x64
 80078f4:	fb01 f303 	mul.w	r3, r1, r3
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	00db      	lsls	r3, r3, #3
 80078fc:	3332      	adds	r3, #50	; 0x32
 80078fe:	4a08      	ldr	r2, [pc, #32]	; (8007920 <UART_SetConfig+0x2d4>)
 8007900:	fba2 2303 	umull	r2, r3, r2, r3
 8007904:	095b      	lsrs	r3, r3, #5
 8007906:	f003 0207 	and.w	r2, r3, #7
 800790a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4422      	add	r2, r4
 8007912:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007914:	e106      	b.n	8007b24 <UART_SetConfig+0x4d8>
 8007916:	bf00      	nop
 8007918:	40011000 	.word	0x40011000
 800791c:	40011400 	.word	0x40011400
 8007920:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007924:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007928:	2200      	movs	r2, #0
 800792a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800792e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007932:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007936:	4642      	mov	r2, r8
 8007938:	464b      	mov	r3, r9
 800793a:	1891      	adds	r1, r2, r2
 800793c:	6239      	str	r1, [r7, #32]
 800793e:	415b      	adcs	r3, r3
 8007940:	627b      	str	r3, [r7, #36]	; 0x24
 8007942:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007946:	4641      	mov	r1, r8
 8007948:	1854      	adds	r4, r2, r1
 800794a:	4649      	mov	r1, r9
 800794c:	eb43 0501 	adc.w	r5, r3, r1
 8007950:	f04f 0200 	mov.w	r2, #0
 8007954:	f04f 0300 	mov.w	r3, #0
 8007958:	00eb      	lsls	r3, r5, #3
 800795a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800795e:	00e2      	lsls	r2, r4, #3
 8007960:	4614      	mov	r4, r2
 8007962:	461d      	mov	r5, r3
 8007964:	4643      	mov	r3, r8
 8007966:	18e3      	adds	r3, r4, r3
 8007968:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800796c:	464b      	mov	r3, r9
 800796e:	eb45 0303 	adc.w	r3, r5, r3
 8007972:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007982:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007986:	f04f 0200 	mov.w	r2, #0
 800798a:	f04f 0300 	mov.w	r3, #0
 800798e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007992:	4629      	mov	r1, r5
 8007994:	008b      	lsls	r3, r1, #2
 8007996:	4621      	mov	r1, r4
 8007998:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800799c:	4621      	mov	r1, r4
 800799e:	008a      	lsls	r2, r1, #2
 80079a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80079a4:	f7f9 f85a 	bl	8000a5c <__aeabi_uldivmod>
 80079a8:	4602      	mov	r2, r0
 80079aa:	460b      	mov	r3, r1
 80079ac:	4b60      	ldr	r3, [pc, #384]	; (8007b30 <UART_SetConfig+0x4e4>)
 80079ae:	fba3 2302 	umull	r2, r3, r3, r2
 80079b2:	095b      	lsrs	r3, r3, #5
 80079b4:	011c      	lsls	r4, r3, #4
 80079b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079ba:	2200      	movs	r2, #0
 80079bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80079c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80079c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80079c8:	4642      	mov	r2, r8
 80079ca:	464b      	mov	r3, r9
 80079cc:	1891      	adds	r1, r2, r2
 80079ce:	61b9      	str	r1, [r7, #24]
 80079d0:	415b      	adcs	r3, r3
 80079d2:	61fb      	str	r3, [r7, #28]
 80079d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80079d8:	4641      	mov	r1, r8
 80079da:	1851      	adds	r1, r2, r1
 80079dc:	6139      	str	r1, [r7, #16]
 80079de:	4649      	mov	r1, r9
 80079e0:	414b      	adcs	r3, r1
 80079e2:	617b      	str	r3, [r7, #20]
 80079e4:	f04f 0200 	mov.w	r2, #0
 80079e8:	f04f 0300 	mov.w	r3, #0
 80079ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80079f0:	4659      	mov	r1, fp
 80079f2:	00cb      	lsls	r3, r1, #3
 80079f4:	4651      	mov	r1, sl
 80079f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079fa:	4651      	mov	r1, sl
 80079fc:	00ca      	lsls	r2, r1, #3
 80079fe:	4610      	mov	r0, r2
 8007a00:	4619      	mov	r1, r3
 8007a02:	4603      	mov	r3, r0
 8007a04:	4642      	mov	r2, r8
 8007a06:	189b      	adds	r3, r3, r2
 8007a08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007a0c:	464b      	mov	r3, r9
 8007a0e:	460a      	mov	r2, r1
 8007a10:	eb42 0303 	adc.w	r3, r2, r3
 8007a14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a22:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007a24:	f04f 0200 	mov.w	r2, #0
 8007a28:	f04f 0300 	mov.w	r3, #0
 8007a2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007a30:	4649      	mov	r1, r9
 8007a32:	008b      	lsls	r3, r1, #2
 8007a34:	4641      	mov	r1, r8
 8007a36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a3a:	4641      	mov	r1, r8
 8007a3c:	008a      	lsls	r2, r1, #2
 8007a3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007a42:	f7f9 f80b 	bl	8000a5c <__aeabi_uldivmod>
 8007a46:	4602      	mov	r2, r0
 8007a48:	460b      	mov	r3, r1
 8007a4a:	4611      	mov	r1, r2
 8007a4c:	4b38      	ldr	r3, [pc, #224]	; (8007b30 <UART_SetConfig+0x4e4>)
 8007a4e:	fba3 2301 	umull	r2, r3, r3, r1
 8007a52:	095b      	lsrs	r3, r3, #5
 8007a54:	2264      	movs	r2, #100	; 0x64
 8007a56:	fb02 f303 	mul.w	r3, r2, r3
 8007a5a:	1acb      	subs	r3, r1, r3
 8007a5c:	011b      	lsls	r3, r3, #4
 8007a5e:	3332      	adds	r3, #50	; 0x32
 8007a60:	4a33      	ldr	r2, [pc, #204]	; (8007b30 <UART_SetConfig+0x4e4>)
 8007a62:	fba2 2303 	umull	r2, r3, r2, r3
 8007a66:	095b      	lsrs	r3, r3, #5
 8007a68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a6c:	441c      	add	r4, r3
 8007a6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a72:	2200      	movs	r2, #0
 8007a74:	673b      	str	r3, [r7, #112]	; 0x70
 8007a76:	677a      	str	r2, [r7, #116]	; 0x74
 8007a78:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007a7c:	4642      	mov	r2, r8
 8007a7e:	464b      	mov	r3, r9
 8007a80:	1891      	adds	r1, r2, r2
 8007a82:	60b9      	str	r1, [r7, #8]
 8007a84:	415b      	adcs	r3, r3
 8007a86:	60fb      	str	r3, [r7, #12]
 8007a88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a8c:	4641      	mov	r1, r8
 8007a8e:	1851      	adds	r1, r2, r1
 8007a90:	6039      	str	r1, [r7, #0]
 8007a92:	4649      	mov	r1, r9
 8007a94:	414b      	adcs	r3, r1
 8007a96:	607b      	str	r3, [r7, #4]
 8007a98:	f04f 0200 	mov.w	r2, #0
 8007a9c:	f04f 0300 	mov.w	r3, #0
 8007aa0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007aa4:	4659      	mov	r1, fp
 8007aa6:	00cb      	lsls	r3, r1, #3
 8007aa8:	4651      	mov	r1, sl
 8007aaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007aae:	4651      	mov	r1, sl
 8007ab0:	00ca      	lsls	r2, r1, #3
 8007ab2:	4610      	mov	r0, r2
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	4642      	mov	r2, r8
 8007aba:	189b      	adds	r3, r3, r2
 8007abc:	66bb      	str	r3, [r7, #104]	; 0x68
 8007abe:	464b      	mov	r3, r9
 8007ac0:	460a      	mov	r2, r1
 8007ac2:	eb42 0303 	adc.w	r3, r2, r3
 8007ac6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	663b      	str	r3, [r7, #96]	; 0x60
 8007ad2:	667a      	str	r2, [r7, #100]	; 0x64
 8007ad4:	f04f 0200 	mov.w	r2, #0
 8007ad8:	f04f 0300 	mov.w	r3, #0
 8007adc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007ae0:	4649      	mov	r1, r9
 8007ae2:	008b      	lsls	r3, r1, #2
 8007ae4:	4641      	mov	r1, r8
 8007ae6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007aea:	4641      	mov	r1, r8
 8007aec:	008a      	lsls	r2, r1, #2
 8007aee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007af2:	f7f8 ffb3 	bl	8000a5c <__aeabi_uldivmod>
 8007af6:	4602      	mov	r2, r0
 8007af8:	460b      	mov	r3, r1
 8007afa:	4b0d      	ldr	r3, [pc, #52]	; (8007b30 <UART_SetConfig+0x4e4>)
 8007afc:	fba3 1302 	umull	r1, r3, r3, r2
 8007b00:	095b      	lsrs	r3, r3, #5
 8007b02:	2164      	movs	r1, #100	; 0x64
 8007b04:	fb01 f303 	mul.w	r3, r1, r3
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	011b      	lsls	r3, r3, #4
 8007b0c:	3332      	adds	r3, #50	; 0x32
 8007b0e:	4a08      	ldr	r2, [pc, #32]	; (8007b30 <UART_SetConfig+0x4e4>)
 8007b10:	fba2 2303 	umull	r2, r3, r2, r3
 8007b14:	095b      	lsrs	r3, r3, #5
 8007b16:	f003 020f 	and.w	r2, r3, #15
 8007b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4422      	add	r2, r4
 8007b22:	609a      	str	r2, [r3, #8]
}
 8007b24:	bf00      	nop
 8007b26:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b30:	51eb851f 	.word	0x51eb851f

08007b34 <std>:
 8007b34:	2300      	movs	r3, #0
 8007b36:	b510      	push	{r4, lr}
 8007b38:	4604      	mov	r4, r0
 8007b3a:	e9c0 3300 	strd	r3, r3, [r0]
 8007b3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b42:	6083      	str	r3, [r0, #8]
 8007b44:	8181      	strh	r1, [r0, #12]
 8007b46:	6643      	str	r3, [r0, #100]	; 0x64
 8007b48:	81c2      	strh	r2, [r0, #14]
 8007b4a:	6183      	str	r3, [r0, #24]
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	2208      	movs	r2, #8
 8007b50:	305c      	adds	r0, #92	; 0x5c
 8007b52:	f000 fa1f 	bl	8007f94 <memset>
 8007b56:	4b0d      	ldr	r3, [pc, #52]	; (8007b8c <std+0x58>)
 8007b58:	6263      	str	r3, [r4, #36]	; 0x24
 8007b5a:	4b0d      	ldr	r3, [pc, #52]	; (8007b90 <std+0x5c>)
 8007b5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b5e:	4b0d      	ldr	r3, [pc, #52]	; (8007b94 <std+0x60>)
 8007b60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b62:	4b0d      	ldr	r3, [pc, #52]	; (8007b98 <std+0x64>)
 8007b64:	6323      	str	r3, [r4, #48]	; 0x30
 8007b66:	4b0d      	ldr	r3, [pc, #52]	; (8007b9c <std+0x68>)
 8007b68:	6224      	str	r4, [r4, #32]
 8007b6a:	429c      	cmp	r4, r3
 8007b6c:	d006      	beq.n	8007b7c <std+0x48>
 8007b6e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007b72:	4294      	cmp	r4, r2
 8007b74:	d002      	beq.n	8007b7c <std+0x48>
 8007b76:	33d0      	adds	r3, #208	; 0xd0
 8007b78:	429c      	cmp	r4, r3
 8007b7a:	d105      	bne.n	8007b88 <std+0x54>
 8007b7c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b84:	f000 ba90 	b.w	80080a8 <__retarget_lock_init_recursive>
 8007b88:	bd10      	pop	{r4, pc}
 8007b8a:	bf00      	nop
 8007b8c:	08007de5 	.word	0x08007de5
 8007b90:	08007e07 	.word	0x08007e07
 8007b94:	08007e3f 	.word	0x08007e3f
 8007b98:	08007e63 	.word	0x08007e63
 8007b9c:	20000410 	.word	0x20000410

08007ba0 <stdio_exit_handler>:
 8007ba0:	4a02      	ldr	r2, [pc, #8]	; (8007bac <stdio_exit_handler+0xc>)
 8007ba2:	4903      	ldr	r1, [pc, #12]	; (8007bb0 <stdio_exit_handler+0x10>)
 8007ba4:	4803      	ldr	r0, [pc, #12]	; (8007bb4 <stdio_exit_handler+0x14>)
 8007ba6:	f000 b869 	b.w	8007c7c <_fwalk_sglue>
 8007baa:	bf00      	nop
 8007bac:	20000010 	.word	0x20000010
 8007bb0:	08008c05 	.word	0x08008c05
 8007bb4:	2000001c 	.word	0x2000001c

08007bb8 <cleanup_stdio>:
 8007bb8:	6841      	ldr	r1, [r0, #4]
 8007bba:	4b0c      	ldr	r3, [pc, #48]	; (8007bec <cleanup_stdio+0x34>)
 8007bbc:	4299      	cmp	r1, r3
 8007bbe:	b510      	push	{r4, lr}
 8007bc0:	4604      	mov	r4, r0
 8007bc2:	d001      	beq.n	8007bc8 <cleanup_stdio+0x10>
 8007bc4:	f001 f81e 	bl	8008c04 <_fflush_r>
 8007bc8:	68a1      	ldr	r1, [r4, #8]
 8007bca:	4b09      	ldr	r3, [pc, #36]	; (8007bf0 <cleanup_stdio+0x38>)
 8007bcc:	4299      	cmp	r1, r3
 8007bce:	d002      	beq.n	8007bd6 <cleanup_stdio+0x1e>
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	f001 f817 	bl	8008c04 <_fflush_r>
 8007bd6:	68e1      	ldr	r1, [r4, #12]
 8007bd8:	4b06      	ldr	r3, [pc, #24]	; (8007bf4 <cleanup_stdio+0x3c>)
 8007bda:	4299      	cmp	r1, r3
 8007bdc:	d004      	beq.n	8007be8 <cleanup_stdio+0x30>
 8007bde:	4620      	mov	r0, r4
 8007be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007be4:	f001 b80e 	b.w	8008c04 <_fflush_r>
 8007be8:	bd10      	pop	{r4, pc}
 8007bea:	bf00      	nop
 8007bec:	20000410 	.word	0x20000410
 8007bf0:	20000478 	.word	0x20000478
 8007bf4:	200004e0 	.word	0x200004e0

08007bf8 <global_stdio_init.part.0>:
 8007bf8:	b510      	push	{r4, lr}
 8007bfa:	4b0b      	ldr	r3, [pc, #44]	; (8007c28 <global_stdio_init.part.0+0x30>)
 8007bfc:	4c0b      	ldr	r4, [pc, #44]	; (8007c2c <global_stdio_init.part.0+0x34>)
 8007bfe:	4a0c      	ldr	r2, [pc, #48]	; (8007c30 <global_stdio_init.part.0+0x38>)
 8007c00:	601a      	str	r2, [r3, #0]
 8007c02:	4620      	mov	r0, r4
 8007c04:	2200      	movs	r2, #0
 8007c06:	2104      	movs	r1, #4
 8007c08:	f7ff ff94 	bl	8007b34 <std>
 8007c0c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007c10:	2201      	movs	r2, #1
 8007c12:	2109      	movs	r1, #9
 8007c14:	f7ff ff8e 	bl	8007b34 <std>
 8007c18:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007c1c:	2202      	movs	r2, #2
 8007c1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c22:	2112      	movs	r1, #18
 8007c24:	f7ff bf86 	b.w	8007b34 <std>
 8007c28:	20000548 	.word	0x20000548
 8007c2c:	20000410 	.word	0x20000410
 8007c30:	08007ba1 	.word	0x08007ba1

08007c34 <__sfp_lock_acquire>:
 8007c34:	4801      	ldr	r0, [pc, #4]	; (8007c3c <__sfp_lock_acquire+0x8>)
 8007c36:	f000 ba38 	b.w	80080aa <__retarget_lock_acquire_recursive>
 8007c3a:	bf00      	nop
 8007c3c:	20000551 	.word	0x20000551

08007c40 <__sfp_lock_release>:
 8007c40:	4801      	ldr	r0, [pc, #4]	; (8007c48 <__sfp_lock_release+0x8>)
 8007c42:	f000 ba33 	b.w	80080ac <__retarget_lock_release_recursive>
 8007c46:	bf00      	nop
 8007c48:	20000551 	.word	0x20000551

08007c4c <__sinit>:
 8007c4c:	b510      	push	{r4, lr}
 8007c4e:	4604      	mov	r4, r0
 8007c50:	f7ff fff0 	bl	8007c34 <__sfp_lock_acquire>
 8007c54:	6a23      	ldr	r3, [r4, #32]
 8007c56:	b11b      	cbz	r3, 8007c60 <__sinit+0x14>
 8007c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c5c:	f7ff bff0 	b.w	8007c40 <__sfp_lock_release>
 8007c60:	4b04      	ldr	r3, [pc, #16]	; (8007c74 <__sinit+0x28>)
 8007c62:	6223      	str	r3, [r4, #32]
 8007c64:	4b04      	ldr	r3, [pc, #16]	; (8007c78 <__sinit+0x2c>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d1f5      	bne.n	8007c58 <__sinit+0xc>
 8007c6c:	f7ff ffc4 	bl	8007bf8 <global_stdio_init.part.0>
 8007c70:	e7f2      	b.n	8007c58 <__sinit+0xc>
 8007c72:	bf00      	nop
 8007c74:	08007bb9 	.word	0x08007bb9
 8007c78:	20000548 	.word	0x20000548

08007c7c <_fwalk_sglue>:
 8007c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c80:	4607      	mov	r7, r0
 8007c82:	4688      	mov	r8, r1
 8007c84:	4614      	mov	r4, r2
 8007c86:	2600      	movs	r6, #0
 8007c88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c8c:	f1b9 0901 	subs.w	r9, r9, #1
 8007c90:	d505      	bpl.n	8007c9e <_fwalk_sglue+0x22>
 8007c92:	6824      	ldr	r4, [r4, #0]
 8007c94:	2c00      	cmp	r4, #0
 8007c96:	d1f7      	bne.n	8007c88 <_fwalk_sglue+0xc>
 8007c98:	4630      	mov	r0, r6
 8007c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c9e:	89ab      	ldrh	r3, [r5, #12]
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d907      	bls.n	8007cb4 <_fwalk_sglue+0x38>
 8007ca4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	d003      	beq.n	8007cb4 <_fwalk_sglue+0x38>
 8007cac:	4629      	mov	r1, r5
 8007cae:	4638      	mov	r0, r7
 8007cb0:	47c0      	blx	r8
 8007cb2:	4306      	orrs	r6, r0
 8007cb4:	3568      	adds	r5, #104	; 0x68
 8007cb6:	e7e9      	b.n	8007c8c <_fwalk_sglue+0x10>

08007cb8 <iprintf>:
 8007cb8:	b40f      	push	{r0, r1, r2, r3}
 8007cba:	b507      	push	{r0, r1, r2, lr}
 8007cbc:	4906      	ldr	r1, [pc, #24]	; (8007cd8 <iprintf+0x20>)
 8007cbe:	ab04      	add	r3, sp, #16
 8007cc0:	6808      	ldr	r0, [r1, #0]
 8007cc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cc6:	6881      	ldr	r1, [r0, #8]
 8007cc8:	9301      	str	r3, [sp, #4]
 8007cca:	f000 fc6b 	bl	80085a4 <_vfiprintf_r>
 8007cce:	b003      	add	sp, #12
 8007cd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cd4:	b004      	add	sp, #16
 8007cd6:	4770      	bx	lr
 8007cd8:	20000068 	.word	0x20000068

08007cdc <putchar>:
 8007cdc:	4b02      	ldr	r3, [pc, #8]	; (8007ce8 <putchar+0xc>)
 8007cde:	4601      	mov	r1, r0
 8007ce0:	6818      	ldr	r0, [r3, #0]
 8007ce2:	6882      	ldr	r2, [r0, #8]
 8007ce4:	f001 b818 	b.w	8008d18 <_putc_r>
 8007ce8:	20000068 	.word	0x20000068

08007cec <_puts_r>:
 8007cec:	6a03      	ldr	r3, [r0, #32]
 8007cee:	b570      	push	{r4, r5, r6, lr}
 8007cf0:	6884      	ldr	r4, [r0, #8]
 8007cf2:	4605      	mov	r5, r0
 8007cf4:	460e      	mov	r6, r1
 8007cf6:	b90b      	cbnz	r3, 8007cfc <_puts_r+0x10>
 8007cf8:	f7ff ffa8 	bl	8007c4c <__sinit>
 8007cfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007cfe:	07db      	lsls	r3, r3, #31
 8007d00:	d405      	bmi.n	8007d0e <_puts_r+0x22>
 8007d02:	89a3      	ldrh	r3, [r4, #12]
 8007d04:	0598      	lsls	r0, r3, #22
 8007d06:	d402      	bmi.n	8007d0e <_puts_r+0x22>
 8007d08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d0a:	f000 f9ce 	bl	80080aa <__retarget_lock_acquire_recursive>
 8007d0e:	89a3      	ldrh	r3, [r4, #12]
 8007d10:	0719      	lsls	r1, r3, #28
 8007d12:	d513      	bpl.n	8007d3c <_puts_r+0x50>
 8007d14:	6923      	ldr	r3, [r4, #16]
 8007d16:	b18b      	cbz	r3, 8007d3c <_puts_r+0x50>
 8007d18:	3e01      	subs	r6, #1
 8007d1a:	68a3      	ldr	r3, [r4, #8]
 8007d1c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007d20:	3b01      	subs	r3, #1
 8007d22:	60a3      	str	r3, [r4, #8]
 8007d24:	b9e9      	cbnz	r1, 8007d62 <_puts_r+0x76>
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	da2e      	bge.n	8007d88 <_puts_r+0x9c>
 8007d2a:	4622      	mov	r2, r4
 8007d2c:	210a      	movs	r1, #10
 8007d2e:	4628      	mov	r0, r5
 8007d30:	f000 f89b 	bl	8007e6a <__swbuf_r>
 8007d34:	3001      	adds	r0, #1
 8007d36:	d007      	beq.n	8007d48 <_puts_r+0x5c>
 8007d38:	250a      	movs	r5, #10
 8007d3a:	e007      	b.n	8007d4c <_puts_r+0x60>
 8007d3c:	4621      	mov	r1, r4
 8007d3e:	4628      	mov	r0, r5
 8007d40:	f000 f8d0 	bl	8007ee4 <__swsetup_r>
 8007d44:	2800      	cmp	r0, #0
 8007d46:	d0e7      	beq.n	8007d18 <_puts_r+0x2c>
 8007d48:	f04f 35ff 	mov.w	r5, #4294967295
 8007d4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d4e:	07da      	lsls	r2, r3, #31
 8007d50:	d405      	bmi.n	8007d5e <_puts_r+0x72>
 8007d52:	89a3      	ldrh	r3, [r4, #12]
 8007d54:	059b      	lsls	r3, r3, #22
 8007d56:	d402      	bmi.n	8007d5e <_puts_r+0x72>
 8007d58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d5a:	f000 f9a7 	bl	80080ac <__retarget_lock_release_recursive>
 8007d5e:	4628      	mov	r0, r5
 8007d60:	bd70      	pop	{r4, r5, r6, pc}
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	da04      	bge.n	8007d70 <_puts_r+0x84>
 8007d66:	69a2      	ldr	r2, [r4, #24]
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	dc06      	bgt.n	8007d7a <_puts_r+0x8e>
 8007d6c:	290a      	cmp	r1, #10
 8007d6e:	d004      	beq.n	8007d7a <_puts_r+0x8e>
 8007d70:	6823      	ldr	r3, [r4, #0]
 8007d72:	1c5a      	adds	r2, r3, #1
 8007d74:	6022      	str	r2, [r4, #0]
 8007d76:	7019      	strb	r1, [r3, #0]
 8007d78:	e7cf      	b.n	8007d1a <_puts_r+0x2e>
 8007d7a:	4622      	mov	r2, r4
 8007d7c:	4628      	mov	r0, r5
 8007d7e:	f000 f874 	bl	8007e6a <__swbuf_r>
 8007d82:	3001      	adds	r0, #1
 8007d84:	d1c9      	bne.n	8007d1a <_puts_r+0x2e>
 8007d86:	e7df      	b.n	8007d48 <_puts_r+0x5c>
 8007d88:	6823      	ldr	r3, [r4, #0]
 8007d8a:	250a      	movs	r5, #10
 8007d8c:	1c5a      	adds	r2, r3, #1
 8007d8e:	6022      	str	r2, [r4, #0]
 8007d90:	701d      	strb	r5, [r3, #0]
 8007d92:	e7db      	b.n	8007d4c <_puts_r+0x60>

08007d94 <puts>:
 8007d94:	4b02      	ldr	r3, [pc, #8]	; (8007da0 <puts+0xc>)
 8007d96:	4601      	mov	r1, r0
 8007d98:	6818      	ldr	r0, [r3, #0]
 8007d9a:	f7ff bfa7 	b.w	8007cec <_puts_r>
 8007d9e:	bf00      	nop
 8007da0:	20000068 	.word	0x20000068

08007da4 <siprintf>:
 8007da4:	b40e      	push	{r1, r2, r3}
 8007da6:	b500      	push	{lr}
 8007da8:	b09c      	sub	sp, #112	; 0x70
 8007daa:	ab1d      	add	r3, sp, #116	; 0x74
 8007dac:	9002      	str	r0, [sp, #8]
 8007dae:	9006      	str	r0, [sp, #24]
 8007db0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007db4:	4809      	ldr	r0, [pc, #36]	; (8007ddc <siprintf+0x38>)
 8007db6:	9107      	str	r1, [sp, #28]
 8007db8:	9104      	str	r1, [sp, #16]
 8007dba:	4909      	ldr	r1, [pc, #36]	; (8007de0 <siprintf+0x3c>)
 8007dbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dc0:	9105      	str	r1, [sp, #20]
 8007dc2:	6800      	ldr	r0, [r0, #0]
 8007dc4:	9301      	str	r3, [sp, #4]
 8007dc6:	a902      	add	r1, sp, #8
 8007dc8:	f000 fac4 	bl	8008354 <_svfiprintf_r>
 8007dcc:	9b02      	ldr	r3, [sp, #8]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	701a      	strb	r2, [r3, #0]
 8007dd2:	b01c      	add	sp, #112	; 0x70
 8007dd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007dd8:	b003      	add	sp, #12
 8007dda:	4770      	bx	lr
 8007ddc:	20000068 	.word	0x20000068
 8007de0:	ffff0208 	.word	0xffff0208

08007de4 <__sread>:
 8007de4:	b510      	push	{r4, lr}
 8007de6:	460c      	mov	r4, r1
 8007de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dec:	f000 f90e 	bl	800800c <_read_r>
 8007df0:	2800      	cmp	r0, #0
 8007df2:	bfab      	itete	ge
 8007df4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007df6:	89a3      	ldrhlt	r3, [r4, #12]
 8007df8:	181b      	addge	r3, r3, r0
 8007dfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007dfe:	bfac      	ite	ge
 8007e00:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e02:	81a3      	strhlt	r3, [r4, #12]
 8007e04:	bd10      	pop	{r4, pc}

08007e06 <__swrite>:
 8007e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e0a:	461f      	mov	r7, r3
 8007e0c:	898b      	ldrh	r3, [r1, #12]
 8007e0e:	05db      	lsls	r3, r3, #23
 8007e10:	4605      	mov	r5, r0
 8007e12:	460c      	mov	r4, r1
 8007e14:	4616      	mov	r6, r2
 8007e16:	d505      	bpl.n	8007e24 <__swrite+0x1e>
 8007e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e1c:	2302      	movs	r3, #2
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f000 f8e2 	bl	8007fe8 <_lseek_r>
 8007e24:	89a3      	ldrh	r3, [r4, #12]
 8007e26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e2e:	81a3      	strh	r3, [r4, #12]
 8007e30:	4632      	mov	r2, r6
 8007e32:	463b      	mov	r3, r7
 8007e34:	4628      	mov	r0, r5
 8007e36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e3a:	f000 b8f9 	b.w	8008030 <_write_r>

08007e3e <__sseek>:
 8007e3e:	b510      	push	{r4, lr}
 8007e40:	460c      	mov	r4, r1
 8007e42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e46:	f000 f8cf 	bl	8007fe8 <_lseek_r>
 8007e4a:	1c43      	adds	r3, r0, #1
 8007e4c:	89a3      	ldrh	r3, [r4, #12]
 8007e4e:	bf15      	itete	ne
 8007e50:	6560      	strne	r0, [r4, #84]	; 0x54
 8007e52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007e56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007e5a:	81a3      	strheq	r3, [r4, #12]
 8007e5c:	bf18      	it	ne
 8007e5e:	81a3      	strhne	r3, [r4, #12]
 8007e60:	bd10      	pop	{r4, pc}

08007e62 <__sclose>:
 8007e62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e66:	f000 b8af 	b.w	8007fc8 <_close_r>

08007e6a <__swbuf_r>:
 8007e6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e6c:	460e      	mov	r6, r1
 8007e6e:	4614      	mov	r4, r2
 8007e70:	4605      	mov	r5, r0
 8007e72:	b118      	cbz	r0, 8007e7c <__swbuf_r+0x12>
 8007e74:	6a03      	ldr	r3, [r0, #32]
 8007e76:	b90b      	cbnz	r3, 8007e7c <__swbuf_r+0x12>
 8007e78:	f7ff fee8 	bl	8007c4c <__sinit>
 8007e7c:	69a3      	ldr	r3, [r4, #24]
 8007e7e:	60a3      	str	r3, [r4, #8]
 8007e80:	89a3      	ldrh	r3, [r4, #12]
 8007e82:	071a      	lsls	r2, r3, #28
 8007e84:	d525      	bpl.n	8007ed2 <__swbuf_r+0x68>
 8007e86:	6923      	ldr	r3, [r4, #16]
 8007e88:	b31b      	cbz	r3, 8007ed2 <__swbuf_r+0x68>
 8007e8a:	6823      	ldr	r3, [r4, #0]
 8007e8c:	6922      	ldr	r2, [r4, #16]
 8007e8e:	1a98      	subs	r0, r3, r2
 8007e90:	6963      	ldr	r3, [r4, #20]
 8007e92:	b2f6      	uxtb	r6, r6
 8007e94:	4283      	cmp	r3, r0
 8007e96:	4637      	mov	r7, r6
 8007e98:	dc04      	bgt.n	8007ea4 <__swbuf_r+0x3a>
 8007e9a:	4621      	mov	r1, r4
 8007e9c:	4628      	mov	r0, r5
 8007e9e:	f000 feb1 	bl	8008c04 <_fflush_r>
 8007ea2:	b9e0      	cbnz	r0, 8007ede <__swbuf_r+0x74>
 8007ea4:	68a3      	ldr	r3, [r4, #8]
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	60a3      	str	r3, [r4, #8]
 8007eaa:	6823      	ldr	r3, [r4, #0]
 8007eac:	1c5a      	adds	r2, r3, #1
 8007eae:	6022      	str	r2, [r4, #0]
 8007eb0:	701e      	strb	r6, [r3, #0]
 8007eb2:	6962      	ldr	r2, [r4, #20]
 8007eb4:	1c43      	adds	r3, r0, #1
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d004      	beq.n	8007ec4 <__swbuf_r+0x5a>
 8007eba:	89a3      	ldrh	r3, [r4, #12]
 8007ebc:	07db      	lsls	r3, r3, #31
 8007ebe:	d506      	bpl.n	8007ece <__swbuf_r+0x64>
 8007ec0:	2e0a      	cmp	r6, #10
 8007ec2:	d104      	bne.n	8007ece <__swbuf_r+0x64>
 8007ec4:	4621      	mov	r1, r4
 8007ec6:	4628      	mov	r0, r5
 8007ec8:	f000 fe9c 	bl	8008c04 <_fflush_r>
 8007ecc:	b938      	cbnz	r0, 8007ede <__swbuf_r+0x74>
 8007ece:	4638      	mov	r0, r7
 8007ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ed2:	4621      	mov	r1, r4
 8007ed4:	4628      	mov	r0, r5
 8007ed6:	f000 f805 	bl	8007ee4 <__swsetup_r>
 8007eda:	2800      	cmp	r0, #0
 8007edc:	d0d5      	beq.n	8007e8a <__swbuf_r+0x20>
 8007ede:	f04f 37ff 	mov.w	r7, #4294967295
 8007ee2:	e7f4      	b.n	8007ece <__swbuf_r+0x64>

08007ee4 <__swsetup_r>:
 8007ee4:	b538      	push	{r3, r4, r5, lr}
 8007ee6:	4b2a      	ldr	r3, [pc, #168]	; (8007f90 <__swsetup_r+0xac>)
 8007ee8:	4605      	mov	r5, r0
 8007eea:	6818      	ldr	r0, [r3, #0]
 8007eec:	460c      	mov	r4, r1
 8007eee:	b118      	cbz	r0, 8007ef8 <__swsetup_r+0x14>
 8007ef0:	6a03      	ldr	r3, [r0, #32]
 8007ef2:	b90b      	cbnz	r3, 8007ef8 <__swsetup_r+0x14>
 8007ef4:	f7ff feaa 	bl	8007c4c <__sinit>
 8007ef8:	89a3      	ldrh	r3, [r4, #12]
 8007efa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007efe:	0718      	lsls	r0, r3, #28
 8007f00:	d422      	bmi.n	8007f48 <__swsetup_r+0x64>
 8007f02:	06d9      	lsls	r1, r3, #27
 8007f04:	d407      	bmi.n	8007f16 <__swsetup_r+0x32>
 8007f06:	2309      	movs	r3, #9
 8007f08:	602b      	str	r3, [r5, #0]
 8007f0a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007f0e:	81a3      	strh	r3, [r4, #12]
 8007f10:	f04f 30ff 	mov.w	r0, #4294967295
 8007f14:	e034      	b.n	8007f80 <__swsetup_r+0x9c>
 8007f16:	0758      	lsls	r0, r3, #29
 8007f18:	d512      	bpl.n	8007f40 <__swsetup_r+0x5c>
 8007f1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f1c:	b141      	cbz	r1, 8007f30 <__swsetup_r+0x4c>
 8007f1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f22:	4299      	cmp	r1, r3
 8007f24:	d002      	beq.n	8007f2c <__swsetup_r+0x48>
 8007f26:	4628      	mov	r0, r5
 8007f28:	f000 f8c2 	bl	80080b0 <_free_r>
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	6363      	str	r3, [r4, #52]	; 0x34
 8007f30:	89a3      	ldrh	r3, [r4, #12]
 8007f32:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f36:	81a3      	strh	r3, [r4, #12]
 8007f38:	2300      	movs	r3, #0
 8007f3a:	6063      	str	r3, [r4, #4]
 8007f3c:	6923      	ldr	r3, [r4, #16]
 8007f3e:	6023      	str	r3, [r4, #0]
 8007f40:	89a3      	ldrh	r3, [r4, #12]
 8007f42:	f043 0308 	orr.w	r3, r3, #8
 8007f46:	81a3      	strh	r3, [r4, #12]
 8007f48:	6923      	ldr	r3, [r4, #16]
 8007f4a:	b94b      	cbnz	r3, 8007f60 <__swsetup_r+0x7c>
 8007f4c:	89a3      	ldrh	r3, [r4, #12]
 8007f4e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007f52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f56:	d003      	beq.n	8007f60 <__swsetup_r+0x7c>
 8007f58:	4621      	mov	r1, r4
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	f000 fea0 	bl	8008ca0 <__smakebuf_r>
 8007f60:	89a0      	ldrh	r0, [r4, #12]
 8007f62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f66:	f010 0301 	ands.w	r3, r0, #1
 8007f6a:	d00a      	beq.n	8007f82 <__swsetup_r+0x9e>
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	60a3      	str	r3, [r4, #8]
 8007f70:	6963      	ldr	r3, [r4, #20]
 8007f72:	425b      	negs	r3, r3
 8007f74:	61a3      	str	r3, [r4, #24]
 8007f76:	6923      	ldr	r3, [r4, #16]
 8007f78:	b943      	cbnz	r3, 8007f8c <__swsetup_r+0xa8>
 8007f7a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007f7e:	d1c4      	bne.n	8007f0a <__swsetup_r+0x26>
 8007f80:	bd38      	pop	{r3, r4, r5, pc}
 8007f82:	0781      	lsls	r1, r0, #30
 8007f84:	bf58      	it	pl
 8007f86:	6963      	ldrpl	r3, [r4, #20]
 8007f88:	60a3      	str	r3, [r4, #8]
 8007f8a:	e7f4      	b.n	8007f76 <__swsetup_r+0x92>
 8007f8c:	2000      	movs	r0, #0
 8007f8e:	e7f7      	b.n	8007f80 <__swsetup_r+0x9c>
 8007f90:	20000068 	.word	0x20000068

08007f94 <memset>:
 8007f94:	4402      	add	r2, r0
 8007f96:	4603      	mov	r3, r0
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d100      	bne.n	8007f9e <memset+0xa>
 8007f9c:	4770      	bx	lr
 8007f9e:	f803 1b01 	strb.w	r1, [r3], #1
 8007fa2:	e7f9      	b.n	8007f98 <memset+0x4>

08007fa4 <strncmp>:
 8007fa4:	b510      	push	{r4, lr}
 8007fa6:	b16a      	cbz	r2, 8007fc4 <strncmp+0x20>
 8007fa8:	3901      	subs	r1, #1
 8007faa:	1884      	adds	r4, r0, r2
 8007fac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fb0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d103      	bne.n	8007fc0 <strncmp+0x1c>
 8007fb8:	42a0      	cmp	r0, r4
 8007fba:	d001      	beq.n	8007fc0 <strncmp+0x1c>
 8007fbc:	2a00      	cmp	r2, #0
 8007fbe:	d1f5      	bne.n	8007fac <strncmp+0x8>
 8007fc0:	1ad0      	subs	r0, r2, r3
 8007fc2:	bd10      	pop	{r4, pc}
 8007fc4:	4610      	mov	r0, r2
 8007fc6:	e7fc      	b.n	8007fc2 <strncmp+0x1e>

08007fc8 <_close_r>:
 8007fc8:	b538      	push	{r3, r4, r5, lr}
 8007fca:	4d06      	ldr	r5, [pc, #24]	; (8007fe4 <_close_r+0x1c>)
 8007fcc:	2300      	movs	r3, #0
 8007fce:	4604      	mov	r4, r0
 8007fd0:	4608      	mov	r0, r1
 8007fd2:	602b      	str	r3, [r5, #0]
 8007fd4:	f7fa fbeb 	bl	80027ae <_close>
 8007fd8:	1c43      	adds	r3, r0, #1
 8007fda:	d102      	bne.n	8007fe2 <_close_r+0x1a>
 8007fdc:	682b      	ldr	r3, [r5, #0]
 8007fde:	b103      	cbz	r3, 8007fe2 <_close_r+0x1a>
 8007fe0:	6023      	str	r3, [r4, #0]
 8007fe2:	bd38      	pop	{r3, r4, r5, pc}
 8007fe4:	2000054c 	.word	0x2000054c

08007fe8 <_lseek_r>:
 8007fe8:	b538      	push	{r3, r4, r5, lr}
 8007fea:	4d07      	ldr	r5, [pc, #28]	; (8008008 <_lseek_r+0x20>)
 8007fec:	4604      	mov	r4, r0
 8007fee:	4608      	mov	r0, r1
 8007ff0:	4611      	mov	r1, r2
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	602a      	str	r2, [r5, #0]
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	f7fa fc00 	bl	80027fc <_lseek>
 8007ffc:	1c43      	adds	r3, r0, #1
 8007ffe:	d102      	bne.n	8008006 <_lseek_r+0x1e>
 8008000:	682b      	ldr	r3, [r5, #0]
 8008002:	b103      	cbz	r3, 8008006 <_lseek_r+0x1e>
 8008004:	6023      	str	r3, [r4, #0]
 8008006:	bd38      	pop	{r3, r4, r5, pc}
 8008008:	2000054c 	.word	0x2000054c

0800800c <_read_r>:
 800800c:	b538      	push	{r3, r4, r5, lr}
 800800e:	4d07      	ldr	r5, [pc, #28]	; (800802c <_read_r+0x20>)
 8008010:	4604      	mov	r4, r0
 8008012:	4608      	mov	r0, r1
 8008014:	4611      	mov	r1, r2
 8008016:	2200      	movs	r2, #0
 8008018:	602a      	str	r2, [r5, #0]
 800801a:	461a      	mov	r2, r3
 800801c:	f7fa fbaa 	bl	8002774 <_read>
 8008020:	1c43      	adds	r3, r0, #1
 8008022:	d102      	bne.n	800802a <_read_r+0x1e>
 8008024:	682b      	ldr	r3, [r5, #0]
 8008026:	b103      	cbz	r3, 800802a <_read_r+0x1e>
 8008028:	6023      	str	r3, [r4, #0]
 800802a:	bd38      	pop	{r3, r4, r5, pc}
 800802c:	2000054c 	.word	0x2000054c

08008030 <_write_r>:
 8008030:	b538      	push	{r3, r4, r5, lr}
 8008032:	4d07      	ldr	r5, [pc, #28]	; (8008050 <_write_r+0x20>)
 8008034:	4604      	mov	r4, r0
 8008036:	4608      	mov	r0, r1
 8008038:	4611      	mov	r1, r2
 800803a:	2200      	movs	r2, #0
 800803c:	602a      	str	r2, [r5, #0]
 800803e:	461a      	mov	r2, r3
 8008040:	f7fa fcd4 	bl	80029ec <_write>
 8008044:	1c43      	adds	r3, r0, #1
 8008046:	d102      	bne.n	800804e <_write_r+0x1e>
 8008048:	682b      	ldr	r3, [r5, #0]
 800804a:	b103      	cbz	r3, 800804e <_write_r+0x1e>
 800804c:	6023      	str	r3, [r4, #0]
 800804e:	bd38      	pop	{r3, r4, r5, pc}
 8008050:	2000054c 	.word	0x2000054c

08008054 <__errno>:
 8008054:	4b01      	ldr	r3, [pc, #4]	; (800805c <__errno+0x8>)
 8008056:	6818      	ldr	r0, [r3, #0]
 8008058:	4770      	bx	lr
 800805a:	bf00      	nop
 800805c:	20000068 	.word	0x20000068

08008060 <__libc_init_array>:
 8008060:	b570      	push	{r4, r5, r6, lr}
 8008062:	4d0d      	ldr	r5, [pc, #52]	; (8008098 <__libc_init_array+0x38>)
 8008064:	4c0d      	ldr	r4, [pc, #52]	; (800809c <__libc_init_array+0x3c>)
 8008066:	1b64      	subs	r4, r4, r5
 8008068:	10a4      	asrs	r4, r4, #2
 800806a:	2600      	movs	r6, #0
 800806c:	42a6      	cmp	r6, r4
 800806e:	d109      	bne.n	8008084 <__libc_init_array+0x24>
 8008070:	4d0b      	ldr	r5, [pc, #44]	; (80080a0 <__libc_init_array+0x40>)
 8008072:	4c0c      	ldr	r4, [pc, #48]	; (80080a4 <__libc_init_array+0x44>)
 8008074:	f000 ff16 	bl	8008ea4 <_init>
 8008078:	1b64      	subs	r4, r4, r5
 800807a:	10a4      	asrs	r4, r4, #2
 800807c:	2600      	movs	r6, #0
 800807e:	42a6      	cmp	r6, r4
 8008080:	d105      	bne.n	800808e <__libc_init_array+0x2e>
 8008082:	bd70      	pop	{r4, r5, r6, pc}
 8008084:	f855 3b04 	ldr.w	r3, [r5], #4
 8008088:	4798      	blx	r3
 800808a:	3601      	adds	r6, #1
 800808c:	e7ee      	b.n	800806c <__libc_init_array+0xc>
 800808e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008092:	4798      	blx	r3
 8008094:	3601      	adds	r6, #1
 8008096:	e7f2      	b.n	800807e <__libc_init_array+0x1e>
 8008098:	08009030 	.word	0x08009030
 800809c:	08009030 	.word	0x08009030
 80080a0:	08009030 	.word	0x08009030
 80080a4:	08009034 	.word	0x08009034

080080a8 <__retarget_lock_init_recursive>:
 80080a8:	4770      	bx	lr

080080aa <__retarget_lock_acquire_recursive>:
 80080aa:	4770      	bx	lr

080080ac <__retarget_lock_release_recursive>:
 80080ac:	4770      	bx	lr
	...

080080b0 <_free_r>:
 80080b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080b2:	2900      	cmp	r1, #0
 80080b4:	d044      	beq.n	8008140 <_free_r+0x90>
 80080b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080ba:	9001      	str	r0, [sp, #4]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f1a1 0404 	sub.w	r4, r1, #4
 80080c2:	bfb8      	it	lt
 80080c4:	18e4      	addlt	r4, r4, r3
 80080c6:	f000 f8df 	bl	8008288 <__malloc_lock>
 80080ca:	4a1e      	ldr	r2, [pc, #120]	; (8008144 <_free_r+0x94>)
 80080cc:	9801      	ldr	r0, [sp, #4]
 80080ce:	6813      	ldr	r3, [r2, #0]
 80080d0:	b933      	cbnz	r3, 80080e0 <_free_r+0x30>
 80080d2:	6063      	str	r3, [r4, #4]
 80080d4:	6014      	str	r4, [r2, #0]
 80080d6:	b003      	add	sp, #12
 80080d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080dc:	f000 b8da 	b.w	8008294 <__malloc_unlock>
 80080e0:	42a3      	cmp	r3, r4
 80080e2:	d908      	bls.n	80080f6 <_free_r+0x46>
 80080e4:	6825      	ldr	r5, [r4, #0]
 80080e6:	1961      	adds	r1, r4, r5
 80080e8:	428b      	cmp	r3, r1
 80080ea:	bf01      	itttt	eq
 80080ec:	6819      	ldreq	r1, [r3, #0]
 80080ee:	685b      	ldreq	r3, [r3, #4]
 80080f0:	1949      	addeq	r1, r1, r5
 80080f2:	6021      	streq	r1, [r4, #0]
 80080f4:	e7ed      	b.n	80080d2 <_free_r+0x22>
 80080f6:	461a      	mov	r2, r3
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	b10b      	cbz	r3, 8008100 <_free_r+0x50>
 80080fc:	42a3      	cmp	r3, r4
 80080fe:	d9fa      	bls.n	80080f6 <_free_r+0x46>
 8008100:	6811      	ldr	r1, [r2, #0]
 8008102:	1855      	adds	r5, r2, r1
 8008104:	42a5      	cmp	r5, r4
 8008106:	d10b      	bne.n	8008120 <_free_r+0x70>
 8008108:	6824      	ldr	r4, [r4, #0]
 800810a:	4421      	add	r1, r4
 800810c:	1854      	adds	r4, r2, r1
 800810e:	42a3      	cmp	r3, r4
 8008110:	6011      	str	r1, [r2, #0]
 8008112:	d1e0      	bne.n	80080d6 <_free_r+0x26>
 8008114:	681c      	ldr	r4, [r3, #0]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	6053      	str	r3, [r2, #4]
 800811a:	440c      	add	r4, r1
 800811c:	6014      	str	r4, [r2, #0]
 800811e:	e7da      	b.n	80080d6 <_free_r+0x26>
 8008120:	d902      	bls.n	8008128 <_free_r+0x78>
 8008122:	230c      	movs	r3, #12
 8008124:	6003      	str	r3, [r0, #0]
 8008126:	e7d6      	b.n	80080d6 <_free_r+0x26>
 8008128:	6825      	ldr	r5, [r4, #0]
 800812a:	1961      	adds	r1, r4, r5
 800812c:	428b      	cmp	r3, r1
 800812e:	bf04      	itt	eq
 8008130:	6819      	ldreq	r1, [r3, #0]
 8008132:	685b      	ldreq	r3, [r3, #4]
 8008134:	6063      	str	r3, [r4, #4]
 8008136:	bf04      	itt	eq
 8008138:	1949      	addeq	r1, r1, r5
 800813a:	6021      	streq	r1, [r4, #0]
 800813c:	6054      	str	r4, [r2, #4]
 800813e:	e7ca      	b.n	80080d6 <_free_r+0x26>
 8008140:	b003      	add	sp, #12
 8008142:	bd30      	pop	{r4, r5, pc}
 8008144:	20000554 	.word	0x20000554

08008148 <sbrk_aligned>:
 8008148:	b570      	push	{r4, r5, r6, lr}
 800814a:	4e0e      	ldr	r6, [pc, #56]	; (8008184 <sbrk_aligned+0x3c>)
 800814c:	460c      	mov	r4, r1
 800814e:	6831      	ldr	r1, [r6, #0]
 8008150:	4605      	mov	r5, r0
 8008152:	b911      	cbnz	r1, 800815a <sbrk_aligned+0x12>
 8008154:	f000 fe50 	bl	8008df8 <_sbrk_r>
 8008158:	6030      	str	r0, [r6, #0]
 800815a:	4621      	mov	r1, r4
 800815c:	4628      	mov	r0, r5
 800815e:	f000 fe4b 	bl	8008df8 <_sbrk_r>
 8008162:	1c43      	adds	r3, r0, #1
 8008164:	d00a      	beq.n	800817c <sbrk_aligned+0x34>
 8008166:	1cc4      	adds	r4, r0, #3
 8008168:	f024 0403 	bic.w	r4, r4, #3
 800816c:	42a0      	cmp	r0, r4
 800816e:	d007      	beq.n	8008180 <sbrk_aligned+0x38>
 8008170:	1a21      	subs	r1, r4, r0
 8008172:	4628      	mov	r0, r5
 8008174:	f000 fe40 	bl	8008df8 <_sbrk_r>
 8008178:	3001      	adds	r0, #1
 800817a:	d101      	bne.n	8008180 <sbrk_aligned+0x38>
 800817c:	f04f 34ff 	mov.w	r4, #4294967295
 8008180:	4620      	mov	r0, r4
 8008182:	bd70      	pop	{r4, r5, r6, pc}
 8008184:	20000558 	.word	0x20000558

08008188 <_malloc_r>:
 8008188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800818c:	1ccd      	adds	r5, r1, #3
 800818e:	f025 0503 	bic.w	r5, r5, #3
 8008192:	3508      	adds	r5, #8
 8008194:	2d0c      	cmp	r5, #12
 8008196:	bf38      	it	cc
 8008198:	250c      	movcc	r5, #12
 800819a:	2d00      	cmp	r5, #0
 800819c:	4607      	mov	r7, r0
 800819e:	db01      	blt.n	80081a4 <_malloc_r+0x1c>
 80081a0:	42a9      	cmp	r1, r5
 80081a2:	d905      	bls.n	80081b0 <_malloc_r+0x28>
 80081a4:	230c      	movs	r3, #12
 80081a6:	603b      	str	r3, [r7, #0]
 80081a8:	2600      	movs	r6, #0
 80081aa:	4630      	mov	r0, r6
 80081ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008284 <_malloc_r+0xfc>
 80081b4:	f000 f868 	bl	8008288 <__malloc_lock>
 80081b8:	f8d8 3000 	ldr.w	r3, [r8]
 80081bc:	461c      	mov	r4, r3
 80081be:	bb5c      	cbnz	r4, 8008218 <_malloc_r+0x90>
 80081c0:	4629      	mov	r1, r5
 80081c2:	4638      	mov	r0, r7
 80081c4:	f7ff ffc0 	bl	8008148 <sbrk_aligned>
 80081c8:	1c43      	adds	r3, r0, #1
 80081ca:	4604      	mov	r4, r0
 80081cc:	d155      	bne.n	800827a <_malloc_r+0xf2>
 80081ce:	f8d8 4000 	ldr.w	r4, [r8]
 80081d2:	4626      	mov	r6, r4
 80081d4:	2e00      	cmp	r6, #0
 80081d6:	d145      	bne.n	8008264 <_malloc_r+0xdc>
 80081d8:	2c00      	cmp	r4, #0
 80081da:	d048      	beq.n	800826e <_malloc_r+0xe6>
 80081dc:	6823      	ldr	r3, [r4, #0]
 80081de:	4631      	mov	r1, r6
 80081e0:	4638      	mov	r0, r7
 80081e2:	eb04 0903 	add.w	r9, r4, r3
 80081e6:	f000 fe07 	bl	8008df8 <_sbrk_r>
 80081ea:	4581      	cmp	r9, r0
 80081ec:	d13f      	bne.n	800826e <_malloc_r+0xe6>
 80081ee:	6821      	ldr	r1, [r4, #0]
 80081f0:	1a6d      	subs	r5, r5, r1
 80081f2:	4629      	mov	r1, r5
 80081f4:	4638      	mov	r0, r7
 80081f6:	f7ff ffa7 	bl	8008148 <sbrk_aligned>
 80081fa:	3001      	adds	r0, #1
 80081fc:	d037      	beq.n	800826e <_malloc_r+0xe6>
 80081fe:	6823      	ldr	r3, [r4, #0]
 8008200:	442b      	add	r3, r5
 8008202:	6023      	str	r3, [r4, #0]
 8008204:	f8d8 3000 	ldr.w	r3, [r8]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d038      	beq.n	800827e <_malloc_r+0xf6>
 800820c:	685a      	ldr	r2, [r3, #4]
 800820e:	42a2      	cmp	r2, r4
 8008210:	d12b      	bne.n	800826a <_malloc_r+0xe2>
 8008212:	2200      	movs	r2, #0
 8008214:	605a      	str	r2, [r3, #4]
 8008216:	e00f      	b.n	8008238 <_malloc_r+0xb0>
 8008218:	6822      	ldr	r2, [r4, #0]
 800821a:	1b52      	subs	r2, r2, r5
 800821c:	d41f      	bmi.n	800825e <_malloc_r+0xd6>
 800821e:	2a0b      	cmp	r2, #11
 8008220:	d917      	bls.n	8008252 <_malloc_r+0xca>
 8008222:	1961      	adds	r1, r4, r5
 8008224:	42a3      	cmp	r3, r4
 8008226:	6025      	str	r5, [r4, #0]
 8008228:	bf18      	it	ne
 800822a:	6059      	strne	r1, [r3, #4]
 800822c:	6863      	ldr	r3, [r4, #4]
 800822e:	bf08      	it	eq
 8008230:	f8c8 1000 	streq.w	r1, [r8]
 8008234:	5162      	str	r2, [r4, r5]
 8008236:	604b      	str	r3, [r1, #4]
 8008238:	4638      	mov	r0, r7
 800823a:	f104 060b 	add.w	r6, r4, #11
 800823e:	f000 f829 	bl	8008294 <__malloc_unlock>
 8008242:	f026 0607 	bic.w	r6, r6, #7
 8008246:	1d23      	adds	r3, r4, #4
 8008248:	1af2      	subs	r2, r6, r3
 800824a:	d0ae      	beq.n	80081aa <_malloc_r+0x22>
 800824c:	1b9b      	subs	r3, r3, r6
 800824e:	50a3      	str	r3, [r4, r2]
 8008250:	e7ab      	b.n	80081aa <_malloc_r+0x22>
 8008252:	42a3      	cmp	r3, r4
 8008254:	6862      	ldr	r2, [r4, #4]
 8008256:	d1dd      	bne.n	8008214 <_malloc_r+0x8c>
 8008258:	f8c8 2000 	str.w	r2, [r8]
 800825c:	e7ec      	b.n	8008238 <_malloc_r+0xb0>
 800825e:	4623      	mov	r3, r4
 8008260:	6864      	ldr	r4, [r4, #4]
 8008262:	e7ac      	b.n	80081be <_malloc_r+0x36>
 8008264:	4634      	mov	r4, r6
 8008266:	6876      	ldr	r6, [r6, #4]
 8008268:	e7b4      	b.n	80081d4 <_malloc_r+0x4c>
 800826a:	4613      	mov	r3, r2
 800826c:	e7cc      	b.n	8008208 <_malloc_r+0x80>
 800826e:	230c      	movs	r3, #12
 8008270:	603b      	str	r3, [r7, #0]
 8008272:	4638      	mov	r0, r7
 8008274:	f000 f80e 	bl	8008294 <__malloc_unlock>
 8008278:	e797      	b.n	80081aa <_malloc_r+0x22>
 800827a:	6025      	str	r5, [r4, #0]
 800827c:	e7dc      	b.n	8008238 <_malloc_r+0xb0>
 800827e:	605b      	str	r3, [r3, #4]
 8008280:	deff      	udf	#255	; 0xff
 8008282:	bf00      	nop
 8008284:	20000554 	.word	0x20000554

08008288 <__malloc_lock>:
 8008288:	4801      	ldr	r0, [pc, #4]	; (8008290 <__malloc_lock+0x8>)
 800828a:	f7ff bf0e 	b.w	80080aa <__retarget_lock_acquire_recursive>
 800828e:	bf00      	nop
 8008290:	20000550 	.word	0x20000550

08008294 <__malloc_unlock>:
 8008294:	4801      	ldr	r0, [pc, #4]	; (800829c <__malloc_unlock+0x8>)
 8008296:	f7ff bf09 	b.w	80080ac <__retarget_lock_release_recursive>
 800829a:	bf00      	nop
 800829c:	20000550 	.word	0x20000550

080082a0 <__ssputs_r>:
 80082a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082a4:	688e      	ldr	r6, [r1, #8]
 80082a6:	461f      	mov	r7, r3
 80082a8:	42be      	cmp	r6, r7
 80082aa:	680b      	ldr	r3, [r1, #0]
 80082ac:	4682      	mov	sl, r0
 80082ae:	460c      	mov	r4, r1
 80082b0:	4690      	mov	r8, r2
 80082b2:	d82c      	bhi.n	800830e <__ssputs_r+0x6e>
 80082b4:	898a      	ldrh	r2, [r1, #12]
 80082b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80082ba:	d026      	beq.n	800830a <__ssputs_r+0x6a>
 80082bc:	6965      	ldr	r5, [r4, #20]
 80082be:	6909      	ldr	r1, [r1, #16]
 80082c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80082c4:	eba3 0901 	sub.w	r9, r3, r1
 80082c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80082cc:	1c7b      	adds	r3, r7, #1
 80082ce:	444b      	add	r3, r9
 80082d0:	106d      	asrs	r5, r5, #1
 80082d2:	429d      	cmp	r5, r3
 80082d4:	bf38      	it	cc
 80082d6:	461d      	movcc	r5, r3
 80082d8:	0553      	lsls	r3, r2, #21
 80082da:	d527      	bpl.n	800832c <__ssputs_r+0x8c>
 80082dc:	4629      	mov	r1, r5
 80082de:	f7ff ff53 	bl	8008188 <_malloc_r>
 80082e2:	4606      	mov	r6, r0
 80082e4:	b360      	cbz	r0, 8008340 <__ssputs_r+0xa0>
 80082e6:	6921      	ldr	r1, [r4, #16]
 80082e8:	464a      	mov	r2, r9
 80082ea:	f000 fd95 	bl	8008e18 <memcpy>
 80082ee:	89a3      	ldrh	r3, [r4, #12]
 80082f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80082f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082f8:	81a3      	strh	r3, [r4, #12]
 80082fa:	6126      	str	r6, [r4, #16]
 80082fc:	6165      	str	r5, [r4, #20]
 80082fe:	444e      	add	r6, r9
 8008300:	eba5 0509 	sub.w	r5, r5, r9
 8008304:	6026      	str	r6, [r4, #0]
 8008306:	60a5      	str	r5, [r4, #8]
 8008308:	463e      	mov	r6, r7
 800830a:	42be      	cmp	r6, r7
 800830c:	d900      	bls.n	8008310 <__ssputs_r+0x70>
 800830e:	463e      	mov	r6, r7
 8008310:	6820      	ldr	r0, [r4, #0]
 8008312:	4632      	mov	r2, r6
 8008314:	4641      	mov	r1, r8
 8008316:	f000 fd33 	bl	8008d80 <memmove>
 800831a:	68a3      	ldr	r3, [r4, #8]
 800831c:	1b9b      	subs	r3, r3, r6
 800831e:	60a3      	str	r3, [r4, #8]
 8008320:	6823      	ldr	r3, [r4, #0]
 8008322:	4433      	add	r3, r6
 8008324:	6023      	str	r3, [r4, #0]
 8008326:	2000      	movs	r0, #0
 8008328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800832c:	462a      	mov	r2, r5
 800832e:	f000 fd81 	bl	8008e34 <_realloc_r>
 8008332:	4606      	mov	r6, r0
 8008334:	2800      	cmp	r0, #0
 8008336:	d1e0      	bne.n	80082fa <__ssputs_r+0x5a>
 8008338:	6921      	ldr	r1, [r4, #16]
 800833a:	4650      	mov	r0, sl
 800833c:	f7ff feb8 	bl	80080b0 <_free_r>
 8008340:	230c      	movs	r3, #12
 8008342:	f8ca 3000 	str.w	r3, [sl]
 8008346:	89a3      	ldrh	r3, [r4, #12]
 8008348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800834c:	81a3      	strh	r3, [r4, #12]
 800834e:	f04f 30ff 	mov.w	r0, #4294967295
 8008352:	e7e9      	b.n	8008328 <__ssputs_r+0x88>

08008354 <_svfiprintf_r>:
 8008354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008358:	4698      	mov	r8, r3
 800835a:	898b      	ldrh	r3, [r1, #12]
 800835c:	061b      	lsls	r3, r3, #24
 800835e:	b09d      	sub	sp, #116	; 0x74
 8008360:	4607      	mov	r7, r0
 8008362:	460d      	mov	r5, r1
 8008364:	4614      	mov	r4, r2
 8008366:	d50e      	bpl.n	8008386 <_svfiprintf_r+0x32>
 8008368:	690b      	ldr	r3, [r1, #16]
 800836a:	b963      	cbnz	r3, 8008386 <_svfiprintf_r+0x32>
 800836c:	2140      	movs	r1, #64	; 0x40
 800836e:	f7ff ff0b 	bl	8008188 <_malloc_r>
 8008372:	6028      	str	r0, [r5, #0]
 8008374:	6128      	str	r0, [r5, #16]
 8008376:	b920      	cbnz	r0, 8008382 <_svfiprintf_r+0x2e>
 8008378:	230c      	movs	r3, #12
 800837a:	603b      	str	r3, [r7, #0]
 800837c:	f04f 30ff 	mov.w	r0, #4294967295
 8008380:	e0d0      	b.n	8008524 <_svfiprintf_r+0x1d0>
 8008382:	2340      	movs	r3, #64	; 0x40
 8008384:	616b      	str	r3, [r5, #20]
 8008386:	2300      	movs	r3, #0
 8008388:	9309      	str	r3, [sp, #36]	; 0x24
 800838a:	2320      	movs	r3, #32
 800838c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008390:	f8cd 800c 	str.w	r8, [sp, #12]
 8008394:	2330      	movs	r3, #48	; 0x30
 8008396:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800853c <_svfiprintf_r+0x1e8>
 800839a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800839e:	f04f 0901 	mov.w	r9, #1
 80083a2:	4623      	mov	r3, r4
 80083a4:	469a      	mov	sl, r3
 80083a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083aa:	b10a      	cbz	r2, 80083b0 <_svfiprintf_r+0x5c>
 80083ac:	2a25      	cmp	r2, #37	; 0x25
 80083ae:	d1f9      	bne.n	80083a4 <_svfiprintf_r+0x50>
 80083b0:	ebba 0b04 	subs.w	fp, sl, r4
 80083b4:	d00b      	beq.n	80083ce <_svfiprintf_r+0x7a>
 80083b6:	465b      	mov	r3, fp
 80083b8:	4622      	mov	r2, r4
 80083ba:	4629      	mov	r1, r5
 80083bc:	4638      	mov	r0, r7
 80083be:	f7ff ff6f 	bl	80082a0 <__ssputs_r>
 80083c2:	3001      	adds	r0, #1
 80083c4:	f000 80a9 	beq.w	800851a <_svfiprintf_r+0x1c6>
 80083c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083ca:	445a      	add	r2, fp
 80083cc:	9209      	str	r2, [sp, #36]	; 0x24
 80083ce:	f89a 3000 	ldrb.w	r3, [sl]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	f000 80a1 	beq.w	800851a <_svfiprintf_r+0x1c6>
 80083d8:	2300      	movs	r3, #0
 80083da:	f04f 32ff 	mov.w	r2, #4294967295
 80083de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083e2:	f10a 0a01 	add.w	sl, sl, #1
 80083e6:	9304      	str	r3, [sp, #16]
 80083e8:	9307      	str	r3, [sp, #28]
 80083ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083ee:	931a      	str	r3, [sp, #104]	; 0x68
 80083f0:	4654      	mov	r4, sl
 80083f2:	2205      	movs	r2, #5
 80083f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083f8:	4850      	ldr	r0, [pc, #320]	; (800853c <_svfiprintf_r+0x1e8>)
 80083fa:	f7f7 fef1 	bl	80001e0 <memchr>
 80083fe:	9a04      	ldr	r2, [sp, #16]
 8008400:	b9d8      	cbnz	r0, 800843a <_svfiprintf_r+0xe6>
 8008402:	06d0      	lsls	r0, r2, #27
 8008404:	bf44      	itt	mi
 8008406:	2320      	movmi	r3, #32
 8008408:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800840c:	0711      	lsls	r1, r2, #28
 800840e:	bf44      	itt	mi
 8008410:	232b      	movmi	r3, #43	; 0x2b
 8008412:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008416:	f89a 3000 	ldrb.w	r3, [sl]
 800841a:	2b2a      	cmp	r3, #42	; 0x2a
 800841c:	d015      	beq.n	800844a <_svfiprintf_r+0xf6>
 800841e:	9a07      	ldr	r2, [sp, #28]
 8008420:	4654      	mov	r4, sl
 8008422:	2000      	movs	r0, #0
 8008424:	f04f 0c0a 	mov.w	ip, #10
 8008428:	4621      	mov	r1, r4
 800842a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800842e:	3b30      	subs	r3, #48	; 0x30
 8008430:	2b09      	cmp	r3, #9
 8008432:	d94d      	bls.n	80084d0 <_svfiprintf_r+0x17c>
 8008434:	b1b0      	cbz	r0, 8008464 <_svfiprintf_r+0x110>
 8008436:	9207      	str	r2, [sp, #28]
 8008438:	e014      	b.n	8008464 <_svfiprintf_r+0x110>
 800843a:	eba0 0308 	sub.w	r3, r0, r8
 800843e:	fa09 f303 	lsl.w	r3, r9, r3
 8008442:	4313      	orrs	r3, r2
 8008444:	9304      	str	r3, [sp, #16]
 8008446:	46a2      	mov	sl, r4
 8008448:	e7d2      	b.n	80083f0 <_svfiprintf_r+0x9c>
 800844a:	9b03      	ldr	r3, [sp, #12]
 800844c:	1d19      	adds	r1, r3, #4
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	9103      	str	r1, [sp, #12]
 8008452:	2b00      	cmp	r3, #0
 8008454:	bfbb      	ittet	lt
 8008456:	425b      	neglt	r3, r3
 8008458:	f042 0202 	orrlt.w	r2, r2, #2
 800845c:	9307      	strge	r3, [sp, #28]
 800845e:	9307      	strlt	r3, [sp, #28]
 8008460:	bfb8      	it	lt
 8008462:	9204      	strlt	r2, [sp, #16]
 8008464:	7823      	ldrb	r3, [r4, #0]
 8008466:	2b2e      	cmp	r3, #46	; 0x2e
 8008468:	d10c      	bne.n	8008484 <_svfiprintf_r+0x130>
 800846a:	7863      	ldrb	r3, [r4, #1]
 800846c:	2b2a      	cmp	r3, #42	; 0x2a
 800846e:	d134      	bne.n	80084da <_svfiprintf_r+0x186>
 8008470:	9b03      	ldr	r3, [sp, #12]
 8008472:	1d1a      	adds	r2, r3, #4
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	9203      	str	r2, [sp, #12]
 8008478:	2b00      	cmp	r3, #0
 800847a:	bfb8      	it	lt
 800847c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008480:	3402      	adds	r4, #2
 8008482:	9305      	str	r3, [sp, #20]
 8008484:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800854c <_svfiprintf_r+0x1f8>
 8008488:	7821      	ldrb	r1, [r4, #0]
 800848a:	2203      	movs	r2, #3
 800848c:	4650      	mov	r0, sl
 800848e:	f7f7 fea7 	bl	80001e0 <memchr>
 8008492:	b138      	cbz	r0, 80084a4 <_svfiprintf_r+0x150>
 8008494:	9b04      	ldr	r3, [sp, #16]
 8008496:	eba0 000a 	sub.w	r0, r0, sl
 800849a:	2240      	movs	r2, #64	; 0x40
 800849c:	4082      	lsls	r2, r0
 800849e:	4313      	orrs	r3, r2
 80084a0:	3401      	adds	r4, #1
 80084a2:	9304      	str	r3, [sp, #16]
 80084a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084a8:	4825      	ldr	r0, [pc, #148]	; (8008540 <_svfiprintf_r+0x1ec>)
 80084aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084ae:	2206      	movs	r2, #6
 80084b0:	f7f7 fe96 	bl	80001e0 <memchr>
 80084b4:	2800      	cmp	r0, #0
 80084b6:	d038      	beq.n	800852a <_svfiprintf_r+0x1d6>
 80084b8:	4b22      	ldr	r3, [pc, #136]	; (8008544 <_svfiprintf_r+0x1f0>)
 80084ba:	bb1b      	cbnz	r3, 8008504 <_svfiprintf_r+0x1b0>
 80084bc:	9b03      	ldr	r3, [sp, #12]
 80084be:	3307      	adds	r3, #7
 80084c0:	f023 0307 	bic.w	r3, r3, #7
 80084c4:	3308      	adds	r3, #8
 80084c6:	9303      	str	r3, [sp, #12]
 80084c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084ca:	4433      	add	r3, r6
 80084cc:	9309      	str	r3, [sp, #36]	; 0x24
 80084ce:	e768      	b.n	80083a2 <_svfiprintf_r+0x4e>
 80084d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80084d4:	460c      	mov	r4, r1
 80084d6:	2001      	movs	r0, #1
 80084d8:	e7a6      	b.n	8008428 <_svfiprintf_r+0xd4>
 80084da:	2300      	movs	r3, #0
 80084dc:	3401      	adds	r4, #1
 80084de:	9305      	str	r3, [sp, #20]
 80084e0:	4619      	mov	r1, r3
 80084e2:	f04f 0c0a 	mov.w	ip, #10
 80084e6:	4620      	mov	r0, r4
 80084e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084ec:	3a30      	subs	r2, #48	; 0x30
 80084ee:	2a09      	cmp	r2, #9
 80084f0:	d903      	bls.n	80084fa <_svfiprintf_r+0x1a6>
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d0c6      	beq.n	8008484 <_svfiprintf_r+0x130>
 80084f6:	9105      	str	r1, [sp, #20]
 80084f8:	e7c4      	b.n	8008484 <_svfiprintf_r+0x130>
 80084fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80084fe:	4604      	mov	r4, r0
 8008500:	2301      	movs	r3, #1
 8008502:	e7f0      	b.n	80084e6 <_svfiprintf_r+0x192>
 8008504:	ab03      	add	r3, sp, #12
 8008506:	9300      	str	r3, [sp, #0]
 8008508:	462a      	mov	r2, r5
 800850a:	4b0f      	ldr	r3, [pc, #60]	; (8008548 <_svfiprintf_r+0x1f4>)
 800850c:	a904      	add	r1, sp, #16
 800850e:	4638      	mov	r0, r7
 8008510:	f3af 8000 	nop.w
 8008514:	1c42      	adds	r2, r0, #1
 8008516:	4606      	mov	r6, r0
 8008518:	d1d6      	bne.n	80084c8 <_svfiprintf_r+0x174>
 800851a:	89ab      	ldrh	r3, [r5, #12]
 800851c:	065b      	lsls	r3, r3, #25
 800851e:	f53f af2d 	bmi.w	800837c <_svfiprintf_r+0x28>
 8008522:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008524:	b01d      	add	sp, #116	; 0x74
 8008526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800852a:	ab03      	add	r3, sp, #12
 800852c:	9300      	str	r3, [sp, #0]
 800852e:	462a      	mov	r2, r5
 8008530:	4b05      	ldr	r3, [pc, #20]	; (8008548 <_svfiprintf_r+0x1f4>)
 8008532:	a904      	add	r1, sp, #16
 8008534:	4638      	mov	r0, r7
 8008536:	f000 f9bd 	bl	80088b4 <_printf_i>
 800853a:	e7eb      	b.n	8008514 <_svfiprintf_r+0x1c0>
 800853c:	08008ff4 	.word	0x08008ff4
 8008540:	08008ffe 	.word	0x08008ffe
 8008544:	00000000 	.word	0x00000000
 8008548:	080082a1 	.word	0x080082a1
 800854c:	08008ffa 	.word	0x08008ffa

08008550 <__sfputc_r>:
 8008550:	6893      	ldr	r3, [r2, #8]
 8008552:	3b01      	subs	r3, #1
 8008554:	2b00      	cmp	r3, #0
 8008556:	b410      	push	{r4}
 8008558:	6093      	str	r3, [r2, #8]
 800855a:	da08      	bge.n	800856e <__sfputc_r+0x1e>
 800855c:	6994      	ldr	r4, [r2, #24]
 800855e:	42a3      	cmp	r3, r4
 8008560:	db01      	blt.n	8008566 <__sfputc_r+0x16>
 8008562:	290a      	cmp	r1, #10
 8008564:	d103      	bne.n	800856e <__sfputc_r+0x1e>
 8008566:	f85d 4b04 	ldr.w	r4, [sp], #4
 800856a:	f7ff bc7e 	b.w	8007e6a <__swbuf_r>
 800856e:	6813      	ldr	r3, [r2, #0]
 8008570:	1c58      	adds	r0, r3, #1
 8008572:	6010      	str	r0, [r2, #0]
 8008574:	7019      	strb	r1, [r3, #0]
 8008576:	4608      	mov	r0, r1
 8008578:	f85d 4b04 	ldr.w	r4, [sp], #4
 800857c:	4770      	bx	lr

0800857e <__sfputs_r>:
 800857e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008580:	4606      	mov	r6, r0
 8008582:	460f      	mov	r7, r1
 8008584:	4614      	mov	r4, r2
 8008586:	18d5      	adds	r5, r2, r3
 8008588:	42ac      	cmp	r4, r5
 800858a:	d101      	bne.n	8008590 <__sfputs_r+0x12>
 800858c:	2000      	movs	r0, #0
 800858e:	e007      	b.n	80085a0 <__sfputs_r+0x22>
 8008590:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008594:	463a      	mov	r2, r7
 8008596:	4630      	mov	r0, r6
 8008598:	f7ff ffda 	bl	8008550 <__sfputc_r>
 800859c:	1c43      	adds	r3, r0, #1
 800859e:	d1f3      	bne.n	8008588 <__sfputs_r+0xa>
 80085a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080085a4 <_vfiprintf_r>:
 80085a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a8:	460d      	mov	r5, r1
 80085aa:	b09d      	sub	sp, #116	; 0x74
 80085ac:	4614      	mov	r4, r2
 80085ae:	4698      	mov	r8, r3
 80085b0:	4606      	mov	r6, r0
 80085b2:	b118      	cbz	r0, 80085bc <_vfiprintf_r+0x18>
 80085b4:	6a03      	ldr	r3, [r0, #32]
 80085b6:	b90b      	cbnz	r3, 80085bc <_vfiprintf_r+0x18>
 80085b8:	f7ff fb48 	bl	8007c4c <__sinit>
 80085bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085be:	07d9      	lsls	r1, r3, #31
 80085c0:	d405      	bmi.n	80085ce <_vfiprintf_r+0x2a>
 80085c2:	89ab      	ldrh	r3, [r5, #12]
 80085c4:	059a      	lsls	r2, r3, #22
 80085c6:	d402      	bmi.n	80085ce <_vfiprintf_r+0x2a>
 80085c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085ca:	f7ff fd6e 	bl	80080aa <__retarget_lock_acquire_recursive>
 80085ce:	89ab      	ldrh	r3, [r5, #12]
 80085d0:	071b      	lsls	r3, r3, #28
 80085d2:	d501      	bpl.n	80085d8 <_vfiprintf_r+0x34>
 80085d4:	692b      	ldr	r3, [r5, #16]
 80085d6:	b99b      	cbnz	r3, 8008600 <_vfiprintf_r+0x5c>
 80085d8:	4629      	mov	r1, r5
 80085da:	4630      	mov	r0, r6
 80085dc:	f7ff fc82 	bl	8007ee4 <__swsetup_r>
 80085e0:	b170      	cbz	r0, 8008600 <_vfiprintf_r+0x5c>
 80085e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085e4:	07dc      	lsls	r4, r3, #31
 80085e6:	d504      	bpl.n	80085f2 <_vfiprintf_r+0x4e>
 80085e8:	f04f 30ff 	mov.w	r0, #4294967295
 80085ec:	b01d      	add	sp, #116	; 0x74
 80085ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085f2:	89ab      	ldrh	r3, [r5, #12]
 80085f4:	0598      	lsls	r0, r3, #22
 80085f6:	d4f7      	bmi.n	80085e8 <_vfiprintf_r+0x44>
 80085f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085fa:	f7ff fd57 	bl	80080ac <__retarget_lock_release_recursive>
 80085fe:	e7f3      	b.n	80085e8 <_vfiprintf_r+0x44>
 8008600:	2300      	movs	r3, #0
 8008602:	9309      	str	r3, [sp, #36]	; 0x24
 8008604:	2320      	movs	r3, #32
 8008606:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800860a:	f8cd 800c 	str.w	r8, [sp, #12]
 800860e:	2330      	movs	r3, #48	; 0x30
 8008610:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80087c4 <_vfiprintf_r+0x220>
 8008614:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008618:	f04f 0901 	mov.w	r9, #1
 800861c:	4623      	mov	r3, r4
 800861e:	469a      	mov	sl, r3
 8008620:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008624:	b10a      	cbz	r2, 800862a <_vfiprintf_r+0x86>
 8008626:	2a25      	cmp	r2, #37	; 0x25
 8008628:	d1f9      	bne.n	800861e <_vfiprintf_r+0x7a>
 800862a:	ebba 0b04 	subs.w	fp, sl, r4
 800862e:	d00b      	beq.n	8008648 <_vfiprintf_r+0xa4>
 8008630:	465b      	mov	r3, fp
 8008632:	4622      	mov	r2, r4
 8008634:	4629      	mov	r1, r5
 8008636:	4630      	mov	r0, r6
 8008638:	f7ff ffa1 	bl	800857e <__sfputs_r>
 800863c:	3001      	adds	r0, #1
 800863e:	f000 80a9 	beq.w	8008794 <_vfiprintf_r+0x1f0>
 8008642:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008644:	445a      	add	r2, fp
 8008646:	9209      	str	r2, [sp, #36]	; 0x24
 8008648:	f89a 3000 	ldrb.w	r3, [sl]
 800864c:	2b00      	cmp	r3, #0
 800864e:	f000 80a1 	beq.w	8008794 <_vfiprintf_r+0x1f0>
 8008652:	2300      	movs	r3, #0
 8008654:	f04f 32ff 	mov.w	r2, #4294967295
 8008658:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800865c:	f10a 0a01 	add.w	sl, sl, #1
 8008660:	9304      	str	r3, [sp, #16]
 8008662:	9307      	str	r3, [sp, #28]
 8008664:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008668:	931a      	str	r3, [sp, #104]	; 0x68
 800866a:	4654      	mov	r4, sl
 800866c:	2205      	movs	r2, #5
 800866e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008672:	4854      	ldr	r0, [pc, #336]	; (80087c4 <_vfiprintf_r+0x220>)
 8008674:	f7f7 fdb4 	bl	80001e0 <memchr>
 8008678:	9a04      	ldr	r2, [sp, #16]
 800867a:	b9d8      	cbnz	r0, 80086b4 <_vfiprintf_r+0x110>
 800867c:	06d1      	lsls	r1, r2, #27
 800867e:	bf44      	itt	mi
 8008680:	2320      	movmi	r3, #32
 8008682:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008686:	0713      	lsls	r3, r2, #28
 8008688:	bf44      	itt	mi
 800868a:	232b      	movmi	r3, #43	; 0x2b
 800868c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008690:	f89a 3000 	ldrb.w	r3, [sl]
 8008694:	2b2a      	cmp	r3, #42	; 0x2a
 8008696:	d015      	beq.n	80086c4 <_vfiprintf_r+0x120>
 8008698:	9a07      	ldr	r2, [sp, #28]
 800869a:	4654      	mov	r4, sl
 800869c:	2000      	movs	r0, #0
 800869e:	f04f 0c0a 	mov.w	ip, #10
 80086a2:	4621      	mov	r1, r4
 80086a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086a8:	3b30      	subs	r3, #48	; 0x30
 80086aa:	2b09      	cmp	r3, #9
 80086ac:	d94d      	bls.n	800874a <_vfiprintf_r+0x1a6>
 80086ae:	b1b0      	cbz	r0, 80086de <_vfiprintf_r+0x13a>
 80086b0:	9207      	str	r2, [sp, #28]
 80086b2:	e014      	b.n	80086de <_vfiprintf_r+0x13a>
 80086b4:	eba0 0308 	sub.w	r3, r0, r8
 80086b8:	fa09 f303 	lsl.w	r3, r9, r3
 80086bc:	4313      	orrs	r3, r2
 80086be:	9304      	str	r3, [sp, #16]
 80086c0:	46a2      	mov	sl, r4
 80086c2:	e7d2      	b.n	800866a <_vfiprintf_r+0xc6>
 80086c4:	9b03      	ldr	r3, [sp, #12]
 80086c6:	1d19      	adds	r1, r3, #4
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	9103      	str	r1, [sp, #12]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	bfbb      	ittet	lt
 80086d0:	425b      	neglt	r3, r3
 80086d2:	f042 0202 	orrlt.w	r2, r2, #2
 80086d6:	9307      	strge	r3, [sp, #28]
 80086d8:	9307      	strlt	r3, [sp, #28]
 80086da:	bfb8      	it	lt
 80086dc:	9204      	strlt	r2, [sp, #16]
 80086de:	7823      	ldrb	r3, [r4, #0]
 80086e0:	2b2e      	cmp	r3, #46	; 0x2e
 80086e2:	d10c      	bne.n	80086fe <_vfiprintf_r+0x15a>
 80086e4:	7863      	ldrb	r3, [r4, #1]
 80086e6:	2b2a      	cmp	r3, #42	; 0x2a
 80086e8:	d134      	bne.n	8008754 <_vfiprintf_r+0x1b0>
 80086ea:	9b03      	ldr	r3, [sp, #12]
 80086ec:	1d1a      	adds	r2, r3, #4
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	9203      	str	r2, [sp, #12]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	bfb8      	it	lt
 80086f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80086fa:	3402      	adds	r4, #2
 80086fc:	9305      	str	r3, [sp, #20]
 80086fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80087d4 <_vfiprintf_r+0x230>
 8008702:	7821      	ldrb	r1, [r4, #0]
 8008704:	2203      	movs	r2, #3
 8008706:	4650      	mov	r0, sl
 8008708:	f7f7 fd6a 	bl	80001e0 <memchr>
 800870c:	b138      	cbz	r0, 800871e <_vfiprintf_r+0x17a>
 800870e:	9b04      	ldr	r3, [sp, #16]
 8008710:	eba0 000a 	sub.w	r0, r0, sl
 8008714:	2240      	movs	r2, #64	; 0x40
 8008716:	4082      	lsls	r2, r0
 8008718:	4313      	orrs	r3, r2
 800871a:	3401      	adds	r4, #1
 800871c:	9304      	str	r3, [sp, #16]
 800871e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008722:	4829      	ldr	r0, [pc, #164]	; (80087c8 <_vfiprintf_r+0x224>)
 8008724:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008728:	2206      	movs	r2, #6
 800872a:	f7f7 fd59 	bl	80001e0 <memchr>
 800872e:	2800      	cmp	r0, #0
 8008730:	d03f      	beq.n	80087b2 <_vfiprintf_r+0x20e>
 8008732:	4b26      	ldr	r3, [pc, #152]	; (80087cc <_vfiprintf_r+0x228>)
 8008734:	bb1b      	cbnz	r3, 800877e <_vfiprintf_r+0x1da>
 8008736:	9b03      	ldr	r3, [sp, #12]
 8008738:	3307      	adds	r3, #7
 800873a:	f023 0307 	bic.w	r3, r3, #7
 800873e:	3308      	adds	r3, #8
 8008740:	9303      	str	r3, [sp, #12]
 8008742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008744:	443b      	add	r3, r7
 8008746:	9309      	str	r3, [sp, #36]	; 0x24
 8008748:	e768      	b.n	800861c <_vfiprintf_r+0x78>
 800874a:	fb0c 3202 	mla	r2, ip, r2, r3
 800874e:	460c      	mov	r4, r1
 8008750:	2001      	movs	r0, #1
 8008752:	e7a6      	b.n	80086a2 <_vfiprintf_r+0xfe>
 8008754:	2300      	movs	r3, #0
 8008756:	3401      	adds	r4, #1
 8008758:	9305      	str	r3, [sp, #20]
 800875a:	4619      	mov	r1, r3
 800875c:	f04f 0c0a 	mov.w	ip, #10
 8008760:	4620      	mov	r0, r4
 8008762:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008766:	3a30      	subs	r2, #48	; 0x30
 8008768:	2a09      	cmp	r2, #9
 800876a:	d903      	bls.n	8008774 <_vfiprintf_r+0x1d0>
 800876c:	2b00      	cmp	r3, #0
 800876e:	d0c6      	beq.n	80086fe <_vfiprintf_r+0x15a>
 8008770:	9105      	str	r1, [sp, #20]
 8008772:	e7c4      	b.n	80086fe <_vfiprintf_r+0x15a>
 8008774:	fb0c 2101 	mla	r1, ip, r1, r2
 8008778:	4604      	mov	r4, r0
 800877a:	2301      	movs	r3, #1
 800877c:	e7f0      	b.n	8008760 <_vfiprintf_r+0x1bc>
 800877e:	ab03      	add	r3, sp, #12
 8008780:	9300      	str	r3, [sp, #0]
 8008782:	462a      	mov	r2, r5
 8008784:	4b12      	ldr	r3, [pc, #72]	; (80087d0 <_vfiprintf_r+0x22c>)
 8008786:	a904      	add	r1, sp, #16
 8008788:	4630      	mov	r0, r6
 800878a:	f3af 8000 	nop.w
 800878e:	4607      	mov	r7, r0
 8008790:	1c78      	adds	r0, r7, #1
 8008792:	d1d6      	bne.n	8008742 <_vfiprintf_r+0x19e>
 8008794:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008796:	07d9      	lsls	r1, r3, #31
 8008798:	d405      	bmi.n	80087a6 <_vfiprintf_r+0x202>
 800879a:	89ab      	ldrh	r3, [r5, #12]
 800879c:	059a      	lsls	r2, r3, #22
 800879e:	d402      	bmi.n	80087a6 <_vfiprintf_r+0x202>
 80087a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087a2:	f7ff fc83 	bl	80080ac <__retarget_lock_release_recursive>
 80087a6:	89ab      	ldrh	r3, [r5, #12]
 80087a8:	065b      	lsls	r3, r3, #25
 80087aa:	f53f af1d 	bmi.w	80085e8 <_vfiprintf_r+0x44>
 80087ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087b0:	e71c      	b.n	80085ec <_vfiprintf_r+0x48>
 80087b2:	ab03      	add	r3, sp, #12
 80087b4:	9300      	str	r3, [sp, #0]
 80087b6:	462a      	mov	r2, r5
 80087b8:	4b05      	ldr	r3, [pc, #20]	; (80087d0 <_vfiprintf_r+0x22c>)
 80087ba:	a904      	add	r1, sp, #16
 80087bc:	4630      	mov	r0, r6
 80087be:	f000 f879 	bl	80088b4 <_printf_i>
 80087c2:	e7e4      	b.n	800878e <_vfiprintf_r+0x1ea>
 80087c4:	08008ff4 	.word	0x08008ff4
 80087c8:	08008ffe 	.word	0x08008ffe
 80087cc:	00000000 	.word	0x00000000
 80087d0:	0800857f 	.word	0x0800857f
 80087d4:	08008ffa 	.word	0x08008ffa

080087d8 <_printf_common>:
 80087d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087dc:	4616      	mov	r6, r2
 80087de:	4699      	mov	r9, r3
 80087e0:	688a      	ldr	r2, [r1, #8]
 80087e2:	690b      	ldr	r3, [r1, #16]
 80087e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80087e8:	4293      	cmp	r3, r2
 80087ea:	bfb8      	it	lt
 80087ec:	4613      	movlt	r3, r2
 80087ee:	6033      	str	r3, [r6, #0]
 80087f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80087f4:	4607      	mov	r7, r0
 80087f6:	460c      	mov	r4, r1
 80087f8:	b10a      	cbz	r2, 80087fe <_printf_common+0x26>
 80087fa:	3301      	adds	r3, #1
 80087fc:	6033      	str	r3, [r6, #0]
 80087fe:	6823      	ldr	r3, [r4, #0]
 8008800:	0699      	lsls	r1, r3, #26
 8008802:	bf42      	ittt	mi
 8008804:	6833      	ldrmi	r3, [r6, #0]
 8008806:	3302      	addmi	r3, #2
 8008808:	6033      	strmi	r3, [r6, #0]
 800880a:	6825      	ldr	r5, [r4, #0]
 800880c:	f015 0506 	ands.w	r5, r5, #6
 8008810:	d106      	bne.n	8008820 <_printf_common+0x48>
 8008812:	f104 0a19 	add.w	sl, r4, #25
 8008816:	68e3      	ldr	r3, [r4, #12]
 8008818:	6832      	ldr	r2, [r6, #0]
 800881a:	1a9b      	subs	r3, r3, r2
 800881c:	42ab      	cmp	r3, r5
 800881e:	dc26      	bgt.n	800886e <_printf_common+0x96>
 8008820:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008824:	1e13      	subs	r3, r2, #0
 8008826:	6822      	ldr	r2, [r4, #0]
 8008828:	bf18      	it	ne
 800882a:	2301      	movne	r3, #1
 800882c:	0692      	lsls	r2, r2, #26
 800882e:	d42b      	bmi.n	8008888 <_printf_common+0xb0>
 8008830:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008834:	4649      	mov	r1, r9
 8008836:	4638      	mov	r0, r7
 8008838:	47c0      	blx	r8
 800883a:	3001      	adds	r0, #1
 800883c:	d01e      	beq.n	800887c <_printf_common+0xa4>
 800883e:	6823      	ldr	r3, [r4, #0]
 8008840:	6922      	ldr	r2, [r4, #16]
 8008842:	f003 0306 	and.w	r3, r3, #6
 8008846:	2b04      	cmp	r3, #4
 8008848:	bf02      	ittt	eq
 800884a:	68e5      	ldreq	r5, [r4, #12]
 800884c:	6833      	ldreq	r3, [r6, #0]
 800884e:	1aed      	subeq	r5, r5, r3
 8008850:	68a3      	ldr	r3, [r4, #8]
 8008852:	bf0c      	ite	eq
 8008854:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008858:	2500      	movne	r5, #0
 800885a:	4293      	cmp	r3, r2
 800885c:	bfc4      	itt	gt
 800885e:	1a9b      	subgt	r3, r3, r2
 8008860:	18ed      	addgt	r5, r5, r3
 8008862:	2600      	movs	r6, #0
 8008864:	341a      	adds	r4, #26
 8008866:	42b5      	cmp	r5, r6
 8008868:	d11a      	bne.n	80088a0 <_printf_common+0xc8>
 800886a:	2000      	movs	r0, #0
 800886c:	e008      	b.n	8008880 <_printf_common+0xa8>
 800886e:	2301      	movs	r3, #1
 8008870:	4652      	mov	r2, sl
 8008872:	4649      	mov	r1, r9
 8008874:	4638      	mov	r0, r7
 8008876:	47c0      	blx	r8
 8008878:	3001      	adds	r0, #1
 800887a:	d103      	bne.n	8008884 <_printf_common+0xac>
 800887c:	f04f 30ff 	mov.w	r0, #4294967295
 8008880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008884:	3501      	adds	r5, #1
 8008886:	e7c6      	b.n	8008816 <_printf_common+0x3e>
 8008888:	18e1      	adds	r1, r4, r3
 800888a:	1c5a      	adds	r2, r3, #1
 800888c:	2030      	movs	r0, #48	; 0x30
 800888e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008892:	4422      	add	r2, r4
 8008894:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008898:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800889c:	3302      	adds	r3, #2
 800889e:	e7c7      	b.n	8008830 <_printf_common+0x58>
 80088a0:	2301      	movs	r3, #1
 80088a2:	4622      	mov	r2, r4
 80088a4:	4649      	mov	r1, r9
 80088a6:	4638      	mov	r0, r7
 80088a8:	47c0      	blx	r8
 80088aa:	3001      	adds	r0, #1
 80088ac:	d0e6      	beq.n	800887c <_printf_common+0xa4>
 80088ae:	3601      	adds	r6, #1
 80088b0:	e7d9      	b.n	8008866 <_printf_common+0x8e>
	...

080088b4 <_printf_i>:
 80088b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088b8:	7e0f      	ldrb	r7, [r1, #24]
 80088ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80088bc:	2f78      	cmp	r7, #120	; 0x78
 80088be:	4691      	mov	r9, r2
 80088c0:	4680      	mov	r8, r0
 80088c2:	460c      	mov	r4, r1
 80088c4:	469a      	mov	sl, r3
 80088c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80088ca:	d807      	bhi.n	80088dc <_printf_i+0x28>
 80088cc:	2f62      	cmp	r7, #98	; 0x62
 80088ce:	d80a      	bhi.n	80088e6 <_printf_i+0x32>
 80088d0:	2f00      	cmp	r7, #0
 80088d2:	f000 80d4 	beq.w	8008a7e <_printf_i+0x1ca>
 80088d6:	2f58      	cmp	r7, #88	; 0x58
 80088d8:	f000 80c0 	beq.w	8008a5c <_printf_i+0x1a8>
 80088dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80088e4:	e03a      	b.n	800895c <_printf_i+0xa8>
 80088e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80088ea:	2b15      	cmp	r3, #21
 80088ec:	d8f6      	bhi.n	80088dc <_printf_i+0x28>
 80088ee:	a101      	add	r1, pc, #4	; (adr r1, 80088f4 <_printf_i+0x40>)
 80088f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088f4:	0800894d 	.word	0x0800894d
 80088f8:	08008961 	.word	0x08008961
 80088fc:	080088dd 	.word	0x080088dd
 8008900:	080088dd 	.word	0x080088dd
 8008904:	080088dd 	.word	0x080088dd
 8008908:	080088dd 	.word	0x080088dd
 800890c:	08008961 	.word	0x08008961
 8008910:	080088dd 	.word	0x080088dd
 8008914:	080088dd 	.word	0x080088dd
 8008918:	080088dd 	.word	0x080088dd
 800891c:	080088dd 	.word	0x080088dd
 8008920:	08008a65 	.word	0x08008a65
 8008924:	0800898d 	.word	0x0800898d
 8008928:	08008a1f 	.word	0x08008a1f
 800892c:	080088dd 	.word	0x080088dd
 8008930:	080088dd 	.word	0x080088dd
 8008934:	08008a87 	.word	0x08008a87
 8008938:	080088dd 	.word	0x080088dd
 800893c:	0800898d 	.word	0x0800898d
 8008940:	080088dd 	.word	0x080088dd
 8008944:	080088dd 	.word	0x080088dd
 8008948:	08008a27 	.word	0x08008a27
 800894c:	682b      	ldr	r3, [r5, #0]
 800894e:	1d1a      	adds	r2, r3, #4
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	602a      	str	r2, [r5, #0]
 8008954:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008958:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800895c:	2301      	movs	r3, #1
 800895e:	e09f      	b.n	8008aa0 <_printf_i+0x1ec>
 8008960:	6820      	ldr	r0, [r4, #0]
 8008962:	682b      	ldr	r3, [r5, #0]
 8008964:	0607      	lsls	r7, r0, #24
 8008966:	f103 0104 	add.w	r1, r3, #4
 800896a:	6029      	str	r1, [r5, #0]
 800896c:	d501      	bpl.n	8008972 <_printf_i+0xbe>
 800896e:	681e      	ldr	r6, [r3, #0]
 8008970:	e003      	b.n	800897a <_printf_i+0xc6>
 8008972:	0646      	lsls	r6, r0, #25
 8008974:	d5fb      	bpl.n	800896e <_printf_i+0xba>
 8008976:	f9b3 6000 	ldrsh.w	r6, [r3]
 800897a:	2e00      	cmp	r6, #0
 800897c:	da03      	bge.n	8008986 <_printf_i+0xd2>
 800897e:	232d      	movs	r3, #45	; 0x2d
 8008980:	4276      	negs	r6, r6
 8008982:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008986:	485a      	ldr	r0, [pc, #360]	; (8008af0 <_printf_i+0x23c>)
 8008988:	230a      	movs	r3, #10
 800898a:	e012      	b.n	80089b2 <_printf_i+0xfe>
 800898c:	682b      	ldr	r3, [r5, #0]
 800898e:	6820      	ldr	r0, [r4, #0]
 8008990:	1d19      	adds	r1, r3, #4
 8008992:	6029      	str	r1, [r5, #0]
 8008994:	0605      	lsls	r5, r0, #24
 8008996:	d501      	bpl.n	800899c <_printf_i+0xe8>
 8008998:	681e      	ldr	r6, [r3, #0]
 800899a:	e002      	b.n	80089a2 <_printf_i+0xee>
 800899c:	0641      	lsls	r1, r0, #25
 800899e:	d5fb      	bpl.n	8008998 <_printf_i+0xe4>
 80089a0:	881e      	ldrh	r6, [r3, #0]
 80089a2:	4853      	ldr	r0, [pc, #332]	; (8008af0 <_printf_i+0x23c>)
 80089a4:	2f6f      	cmp	r7, #111	; 0x6f
 80089a6:	bf0c      	ite	eq
 80089a8:	2308      	moveq	r3, #8
 80089aa:	230a      	movne	r3, #10
 80089ac:	2100      	movs	r1, #0
 80089ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089b2:	6865      	ldr	r5, [r4, #4]
 80089b4:	60a5      	str	r5, [r4, #8]
 80089b6:	2d00      	cmp	r5, #0
 80089b8:	bfa2      	ittt	ge
 80089ba:	6821      	ldrge	r1, [r4, #0]
 80089bc:	f021 0104 	bicge.w	r1, r1, #4
 80089c0:	6021      	strge	r1, [r4, #0]
 80089c2:	b90e      	cbnz	r6, 80089c8 <_printf_i+0x114>
 80089c4:	2d00      	cmp	r5, #0
 80089c6:	d04b      	beq.n	8008a60 <_printf_i+0x1ac>
 80089c8:	4615      	mov	r5, r2
 80089ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80089ce:	fb03 6711 	mls	r7, r3, r1, r6
 80089d2:	5dc7      	ldrb	r7, [r0, r7]
 80089d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80089d8:	4637      	mov	r7, r6
 80089da:	42bb      	cmp	r3, r7
 80089dc:	460e      	mov	r6, r1
 80089de:	d9f4      	bls.n	80089ca <_printf_i+0x116>
 80089e0:	2b08      	cmp	r3, #8
 80089e2:	d10b      	bne.n	80089fc <_printf_i+0x148>
 80089e4:	6823      	ldr	r3, [r4, #0]
 80089e6:	07de      	lsls	r6, r3, #31
 80089e8:	d508      	bpl.n	80089fc <_printf_i+0x148>
 80089ea:	6923      	ldr	r3, [r4, #16]
 80089ec:	6861      	ldr	r1, [r4, #4]
 80089ee:	4299      	cmp	r1, r3
 80089f0:	bfde      	ittt	le
 80089f2:	2330      	movle	r3, #48	; 0x30
 80089f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80089f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80089fc:	1b52      	subs	r2, r2, r5
 80089fe:	6122      	str	r2, [r4, #16]
 8008a00:	f8cd a000 	str.w	sl, [sp]
 8008a04:	464b      	mov	r3, r9
 8008a06:	aa03      	add	r2, sp, #12
 8008a08:	4621      	mov	r1, r4
 8008a0a:	4640      	mov	r0, r8
 8008a0c:	f7ff fee4 	bl	80087d8 <_printf_common>
 8008a10:	3001      	adds	r0, #1
 8008a12:	d14a      	bne.n	8008aaa <_printf_i+0x1f6>
 8008a14:	f04f 30ff 	mov.w	r0, #4294967295
 8008a18:	b004      	add	sp, #16
 8008a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a1e:	6823      	ldr	r3, [r4, #0]
 8008a20:	f043 0320 	orr.w	r3, r3, #32
 8008a24:	6023      	str	r3, [r4, #0]
 8008a26:	4833      	ldr	r0, [pc, #204]	; (8008af4 <_printf_i+0x240>)
 8008a28:	2778      	movs	r7, #120	; 0x78
 8008a2a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008a2e:	6823      	ldr	r3, [r4, #0]
 8008a30:	6829      	ldr	r1, [r5, #0]
 8008a32:	061f      	lsls	r7, r3, #24
 8008a34:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a38:	d402      	bmi.n	8008a40 <_printf_i+0x18c>
 8008a3a:	065f      	lsls	r7, r3, #25
 8008a3c:	bf48      	it	mi
 8008a3e:	b2b6      	uxthmi	r6, r6
 8008a40:	07df      	lsls	r7, r3, #31
 8008a42:	bf48      	it	mi
 8008a44:	f043 0320 	orrmi.w	r3, r3, #32
 8008a48:	6029      	str	r1, [r5, #0]
 8008a4a:	bf48      	it	mi
 8008a4c:	6023      	strmi	r3, [r4, #0]
 8008a4e:	b91e      	cbnz	r6, 8008a58 <_printf_i+0x1a4>
 8008a50:	6823      	ldr	r3, [r4, #0]
 8008a52:	f023 0320 	bic.w	r3, r3, #32
 8008a56:	6023      	str	r3, [r4, #0]
 8008a58:	2310      	movs	r3, #16
 8008a5a:	e7a7      	b.n	80089ac <_printf_i+0xf8>
 8008a5c:	4824      	ldr	r0, [pc, #144]	; (8008af0 <_printf_i+0x23c>)
 8008a5e:	e7e4      	b.n	8008a2a <_printf_i+0x176>
 8008a60:	4615      	mov	r5, r2
 8008a62:	e7bd      	b.n	80089e0 <_printf_i+0x12c>
 8008a64:	682b      	ldr	r3, [r5, #0]
 8008a66:	6826      	ldr	r6, [r4, #0]
 8008a68:	6961      	ldr	r1, [r4, #20]
 8008a6a:	1d18      	adds	r0, r3, #4
 8008a6c:	6028      	str	r0, [r5, #0]
 8008a6e:	0635      	lsls	r5, r6, #24
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	d501      	bpl.n	8008a78 <_printf_i+0x1c4>
 8008a74:	6019      	str	r1, [r3, #0]
 8008a76:	e002      	b.n	8008a7e <_printf_i+0x1ca>
 8008a78:	0670      	lsls	r0, r6, #25
 8008a7a:	d5fb      	bpl.n	8008a74 <_printf_i+0x1c0>
 8008a7c:	8019      	strh	r1, [r3, #0]
 8008a7e:	2300      	movs	r3, #0
 8008a80:	6123      	str	r3, [r4, #16]
 8008a82:	4615      	mov	r5, r2
 8008a84:	e7bc      	b.n	8008a00 <_printf_i+0x14c>
 8008a86:	682b      	ldr	r3, [r5, #0]
 8008a88:	1d1a      	adds	r2, r3, #4
 8008a8a:	602a      	str	r2, [r5, #0]
 8008a8c:	681d      	ldr	r5, [r3, #0]
 8008a8e:	6862      	ldr	r2, [r4, #4]
 8008a90:	2100      	movs	r1, #0
 8008a92:	4628      	mov	r0, r5
 8008a94:	f7f7 fba4 	bl	80001e0 <memchr>
 8008a98:	b108      	cbz	r0, 8008a9e <_printf_i+0x1ea>
 8008a9a:	1b40      	subs	r0, r0, r5
 8008a9c:	6060      	str	r0, [r4, #4]
 8008a9e:	6863      	ldr	r3, [r4, #4]
 8008aa0:	6123      	str	r3, [r4, #16]
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008aa8:	e7aa      	b.n	8008a00 <_printf_i+0x14c>
 8008aaa:	6923      	ldr	r3, [r4, #16]
 8008aac:	462a      	mov	r2, r5
 8008aae:	4649      	mov	r1, r9
 8008ab0:	4640      	mov	r0, r8
 8008ab2:	47d0      	blx	sl
 8008ab4:	3001      	adds	r0, #1
 8008ab6:	d0ad      	beq.n	8008a14 <_printf_i+0x160>
 8008ab8:	6823      	ldr	r3, [r4, #0]
 8008aba:	079b      	lsls	r3, r3, #30
 8008abc:	d413      	bmi.n	8008ae6 <_printf_i+0x232>
 8008abe:	68e0      	ldr	r0, [r4, #12]
 8008ac0:	9b03      	ldr	r3, [sp, #12]
 8008ac2:	4298      	cmp	r0, r3
 8008ac4:	bfb8      	it	lt
 8008ac6:	4618      	movlt	r0, r3
 8008ac8:	e7a6      	b.n	8008a18 <_printf_i+0x164>
 8008aca:	2301      	movs	r3, #1
 8008acc:	4632      	mov	r2, r6
 8008ace:	4649      	mov	r1, r9
 8008ad0:	4640      	mov	r0, r8
 8008ad2:	47d0      	blx	sl
 8008ad4:	3001      	adds	r0, #1
 8008ad6:	d09d      	beq.n	8008a14 <_printf_i+0x160>
 8008ad8:	3501      	adds	r5, #1
 8008ada:	68e3      	ldr	r3, [r4, #12]
 8008adc:	9903      	ldr	r1, [sp, #12]
 8008ade:	1a5b      	subs	r3, r3, r1
 8008ae0:	42ab      	cmp	r3, r5
 8008ae2:	dcf2      	bgt.n	8008aca <_printf_i+0x216>
 8008ae4:	e7eb      	b.n	8008abe <_printf_i+0x20a>
 8008ae6:	2500      	movs	r5, #0
 8008ae8:	f104 0619 	add.w	r6, r4, #25
 8008aec:	e7f5      	b.n	8008ada <_printf_i+0x226>
 8008aee:	bf00      	nop
 8008af0:	08009005 	.word	0x08009005
 8008af4:	08009016 	.word	0x08009016

08008af8 <__sflush_r>:
 8008af8:	898a      	ldrh	r2, [r1, #12]
 8008afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008afe:	4605      	mov	r5, r0
 8008b00:	0710      	lsls	r0, r2, #28
 8008b02:	460c      	mov	r4, r1
 8008b04:	d458      	bmi.n	8008bb8 <__sflush_r+0xc0>
 8008b06:	684b      	ldr	r3, [r1, #4]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	dc05      	bgt.n	8008b18 <__sflush_r+0x20>
 8008b0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	dc02      	bgt.n	8008b18 <__sflush_r+0x20>
 8008b12:	2000      	movs	r0, #0
 8008b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b1a:	2e00      	cmp	r6, #0
 8008b1c:	d0f9      	beq.n	8008b12 <__sflush_r+0x1a>
 8008b1e:	2300      	movs	r3, #0
 8008b20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b24:	682f      	ldr	r7, [r5, #0]
 8008b26:	6a21      	ldr	r1, [r4, #32]
 8008b28:	602b      	str	r3, [r5, #0]
 8008b2a:	d032      	beq.n	8008b92 <__sflush_r+0x9a>
 8008b2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b2e:	89a3      	ldrh	r3, [r4, #12]
 8008b30:	075a      	lsls	r2, r3, #29
 8008b32:	d505      	bpl.n	8008b40 <__sflush_r+0x48>
 8008b34:	6863      	ldr	r3, [r4, #4]
 8008b36:	1ac0      	subs	r0, r0, r3
 8008b38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b3a:	b10b      	cbz	r3, 8008b40 <__sflush_r+0x48>
 8008b3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b3e:	1ac0      	subs	r0, r0, r3
 8008b40:	2300      	movs	r3, #0
 8008b42:	4602      	mov	r2, r0
 8008b44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b46:	6a21      	ldr	r1, [r4, #32]
 8008b48:	4628      	mov	r0, r5
 8008b4a:	47b0      	blx	r6
 8008b4c:	1c43      	adds	r3, r0, #1
 8008b4e:	89a3      	ldrh	r3, [r4, #12]
 8008b50:	d106      	bne.n	8008b60 <__sflush_r+0x68>
 8008b52:	6829      	ldr	r1, [r5, #0]
 8008b54:	291d      	cmp	r1, #29
 8008b56:	d82b      	bhi.n	8008bb0 <__sflush_r+0xb8>
 8008b58:	4a29      	ldr	r2, [pc, #164]	; (8008c00 <__sflush_r+0x108>)
 8008b5a:	410a      	asrs	r2, r1
 8008b5c:	07d6      	lsls	r6, r2, #31
 8008b5e:	d427      	bmi.n	8008bb0 <__sflush_r+0xb8>
 8008b60:	2200      	movs	r2, #0
 8008b62:	6062      	str	r2, [r4, #4]
 8008b64:	04d9      	lsls	r1, r3, #19
 8008b66:	6922      	ldr	r2, [r4, #16]
 8008b68:	6022      	str	r2, [r4, #0]
 8008b6a:	d504      	bpl.n	8008b76 <__sflush_r+0x7e>
 8008b6c:	1c42      	adds	r2, r0, #1
 8008b6e:	d101      	bne.n	8008b74 <__sflush_r+0x7c>
 8008b70:	682b      	ldr	r3, [r5, #0]
 8008b72:	b903      	cbnz	r3, 8008b76 <__sflush_r+0x7e>
 8008b74:	6560      	str	r0, [r4, #84]	; 0x54
 8008b76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b78:	602f      	str	r7, [r5, #0]
 8008b7a:	2900      	cmp	r1, #0
 8008b7c:	d0c9      	beq.n	8008b12 <__sflush_r+0x1a>
 8008b7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b82:	4299      	cmp	r1, r3
 8008b84:	d002      	beq.n	8008b8c <__sflush_r+0x94>
 8008b86:	4628      	mov	r0, r5
 8008b88:	f7ff fa92 	bl	80080b0 <_free_r>
 8008b8c:	2000      	movs	r0, #0
 8008b8e:	6360      	str	r0, [r4, #52]	; 0x34
 8008b90:	e7c0      	b.n	8008b14 <__sflush_r+0x1c>
 8008b92:	2301      	movs	r3, #1
 8008b94:	4628      	mov	r0, r5
 8008b96:	47b0      	blx	r6
 8008b98:	1c41      	adds	r1, r0, #1
 8008b9a:	d1c8      	bne.n	8008b2e <__sflush_r+0x36>
 8008b9c:	682b      	ldr	r3, [r5, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d0c5      	beq.n	8008b2e <__sflush_r+0x36>
 8008ba2:	2b1d      	cmp	r3, #29
 8008ba4:	d001      	beq.n	8008baa <__sflush_r+0xb2>
 8008ba6:	2b16      	cmp	r3, #22
 8008ba8:	d101      	bne.n	8008bae <__sflush_r+0xb6>
 8008baa:	602f      	str	r7, [r5, #0]
 8008bac:	e7b1      	b.n	8008b12 <__sflush_r+0x1a>
 8008bae:	89a3      	ldrh	r3, [r4, #12]
 8008bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bb4:	81a3      	strh	r3, [r4, #12]
 8008bb6:	e7ad      	b.n	8008b14 <__sflush_r+0x1c>
 8008bb8:	690f      	ldr	r7, [r1, #16]
 8008bba:	2f00      	cmp	r7, #0
 8008bbc:	d0a9      	beq.n	8008b12 <__sflush_r+0x1a>
 8008bbe:	0793      	lsls	r3, r2, #30
 8008bc0:	680e      	ldr	r6, [r1, #0]
 8008bc2:	bf08      	it	eq
 8008bc4:	694b      	ldreq	r3, [r1, #20]
 8008bc6:	600f      	str	r7, [r1, #0]
 8008bc8:	bf18      	it	ne
 8008bca:	2300      	movne	r3, #0
 8008bcc:	eba6 0807 	sub.w	r8, r6, r7
 8008bd0:	608b      	str	r3, [r1, #8]
 8008bd2:	f1b8 0f00 	cmp.w	r8, #0
 8008bd6:	dd9c      	ble.n	8008b12 <__sflush_r+0x1a>
 8008bd8:	6a21      	ldr	r1, [r4, #32]
 8008bda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008bdc:	4643      	mov	r3, r8
 8008bde:	463a      	mov	r2, r7
 8008be0:	4628      	mov	r0, r5
 8008be2:	47b0      	blx	r6
 8008be4:	2800      	cmp	r0, #0
 8008be6:	dc06      	bgt.n	8008bf6 <__sflush_r+0xfe>
 8008be8:	89a3      	ldrh	r3, [r4, #12]
 8008bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bee:	81a3      	strh	r3, [r4, #12]
 8008bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf4:	e78e      	b.n	8008b14 <__sflush_r+0x1c>
 8008bf6:	4407      	add	r7, r0
 8008bf8:	eba8 0800 	sub.w	r8, r8, r0
 8008bfc:	e7e9      	b.n	8008bd2 <__sflush_r+0xda>
 8008bfe:	bf00      	nop
 8008c00:	dfbffffe 	.word	0xdfbffffe

08008c04 <_fflush_r>:
 8008c04:	b538      	push	{r3, r4, r5, lr}
 8008c06:	690b      	ldr	r3, [r1, #16]
 8008c08:	4605      	mov	r5, r0
 8008c0a:	460c      	mov	r4, r1
 8008c0c:	b913      	cbnz	r3, 8008c14 <_fflush_r+0x10>
 8008c0e:	2500      	movs	r5, #0
 8008c10:	4628      	mov	r0, r5
 8008c12:	bd38      	pop	{r3, r4, r5, pc}
 8008c14:	b118      	cbz	r0, 8008c1e <_fflush_r+0x1a>
 8008c16:	6a03      	ldr	r3, [r0, #32]
 8008c18:	b90b      	cbnz	r3, 8008c1e <_fflush_r+0x1a>
 8008c1a:	f7ff f817 	bl	8007c4c <__sinit>
 8008c1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d0f3      	beq.n	8008c0e <_fflush_r+0xa>
 8008c26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c28:	07d0      	lsls	r0, r2, #31
 8008c2a:	d404      	bmi.n	8008c36 <_fflush_r+0x32>
 8008c2c:	0599      	lsls	r1, r3, #22
 8008c2e:	d402      	bmi.n	8008c36 <_fflush_r+0x32>
 8008c30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c32:	f7ff fa3a 	bl	80080aa <__retarget_lock_acquire_recursive>
 8008c36:	4628      	mov	r0, r5
 8008c38:	4621      	mov	r1, r4
 8008c3a:	f7ff ff5d 	bl	8008af8 <__sflush_r>
 8008c3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c40:	07da      	lsls	r2, r3, #31
 8008c42:	4605      	mov	r5, r0
 8008c44:	d4e4      	bmi.n	8008c10 <_fflush_r+0xc>
 8008c46:	89a3      	ldrh	r3, [r4, #12]
 8008c48:	059b      	lsls	r3, r3, #22
 8008c4a:	d4e1      	bmi.n	8008c10 <_fflush_r+0xc>
 8008c4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c4e:	f7ff fa2d 	bl	80080ac <__retarget_lock_release_recursive>
 8008c52:	e7dd      	b.n	8008c10 <_fflush_r+0xc>

08008c54 <__swhatbuf_r>:
 8008c54:	b570      	push	{r4, r5, r6, lr}
 8008c56:	460c      	mov	r4, r1
 8008c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c5c:	2900      	cmp	r1, #0
 8008c5e:	b096      	sub	sp, #88	; 0x58
 8008c60:	4615      	mov	r5, r2
 8008c62:	461e      	mov	r6, r3
 8008c64:	da0d      	bge.n	8008c82 <__swhatbuf_r+0x2e>
 8008c66:	89a3      	ldrh	r3, [r4, #12]
 8008c68:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008c6c:	f04f 0100 	mov.w	r1, #0
 8008c70:	bf0c      	ite	eq
 8008c72:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008c76:	2340      	movne	r3, #64	; 0x40
 8008c78:	2000      	movs	r0, #0
 8008c7a:	6031      	str	r1, [r6, #0]
 8008c7c:	602b      	str	r3, [r5, #0]
 8008c7e:	b016      	add	sp, #88	; 0x58
 8008c80:	bd70      	pop	{r4, r5, r6, pc}
 8008c82:	466a      	mov	r2, sp
 8008c84:	f000 f896 	bl	8008db4 <_fstat_r>
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	dbec      	blt.n	8008c66 <__swhatbuf_r+0x12>
 8008c8c:	9901      	ldr	r1, [sp, #4]
 8008c8e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008c92:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008c96:	4259      	negs	r1, r3
 8008c98:	4159      	adcs	r1, r3
 8008c9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c9e:	e7eb      	b.n	8008c78 <__swhatbuf_r+0x24>

08008ca0 <__smakebuf_r>:
 8008ca0:	898b      	ldrh	r3, [r1, #12]
 8008ca2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ca4:	079d      	lsls	r5, r3, #30
 8008ca6:	4606      	mov	r6, r0
 8008ca8:	460c      	mov	r4, r1
 8008caa:	d507      	bpl.n	8008cbc <__smakebuf_r+0x1c>
 8008cac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008cb0:	6023      	str	r3, [r4, #0]
 8008cb2:	6123      	str	r3, [r4, #16]
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	6163      	str	r3, [r4, #20]
 8008cb8:	b002      	add	sp, #8
 8008cba:	bd70      	pop	{r4, r5, r6, pc}
 8008cbc:	ab01      	add	r3, sp, #4
 8008cbe:	466a      	mov	r2, sp
 8008cc0:	f7ff ffc8 	bl	8008c54 <__swhatbuf_r>
 8008cc4:	9900      	ldr	r1, [sp, #0]
 8008cc6:	4605      	mov	r5, r0
 8008cc8:	4630      	mov	r0, r6
 8008cca:	f7ff fa5d 	bl	8008188 <_malloc_r>
 8008cce:	b948      	cbnz	r0, 8008ce4 <__smakebuf_r+0x44>
 8008cd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cd4:	059a      	lsls	r2, r3, #22
 8008cd6:	d4ef      	bmi.n	8008cb8 <__smakebuf_r+0x18>
 8008cd8:	f023 0303 	bic.w	r3, r3, #3
 8008cdc:	f043 0302 	orr.w	r3, r3, #2
 8008ce0:	81a3      	strh	r3, [r4, #12]
 8008ce2:	e7e3      	b.n	8008cac <__smakebuf_r+0xc>
 8008ce4:	89a3      	ldrh	r3, [r4, #12]
 8008ce6:	6020      	str	r0, [r4, #0]
 8008ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cec:	81a3      	strh	r3, [r4, #12]
 8008cee:	9b00      	ldr	r3, [sp, #0]
 8008cf0:	6163      	str	r3, [r4, #20]
 8008cf2:	9b01      	ldr	r3, [sp, #4]
 8008cf4:	6120      	str	r0, [r4, #16]
 8008cf6:	b15b      	cbz	r3, 8008d10 <__smakebuf_r+0x70>
 8008cf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cfc:	4630      	mov	r0, r6
 8008cfe:	f000 f86b 	bl	8008dd8 <_isatty_r>
 8008d02:	b128      	cbz	r0, 8008d10 <__smakebuf_r+0x70>
 8008d04:	89a3      	ldrh	r3, [r4, #12]
 8008d06:	f023 0303 	bic.w	r3, r3, #3
 8008d0a:	f043 0301 	orr.w	r3, r3, #1
 8008d0e:	81a3      	strh	r3, [r4, #12]
 8008d10:	89a3      	ldrh	r3, [r4, #12]
 8008d12:	431d      	orrs	r5, r3
 8008d14:	81a5      	strh	r5, [r4, #12]
 8008d16:	e7cf      	b.n	8008cb8 <__smakebuf_r+0x18>

08008d18 <_putc_r>:
 8008d18:	b570      	push	{r4, r5, r6, lr}
 8008d1a:	460d      	mov	r5, r1
 8008d1c:	4614      	mov	r4, r2
 8008d1e:	4606      	mov	r6, r0
 8008d20:	b118      	cbz	r0, 8008d2a <_putc_r+0x12>
 8008d22:	6a03      	ldr	r3, [r0, #32]
 8008d24:	b90b      	cbnz	r3, 8008d2a <_putc_r+0x12>
 8008d26:	f7fe ff91 	bl	8007c4c <__sinit>
 8008d2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d2c:	07d8      	lsls	r0, r3, #31
 8008d2e:	d405      	bmi.n	8008d3c <_putc_r+0x24>
 8008d30:	89a3      	ldrh	r3, [r4, #12]
 8008d32:	0599      	lsls	r1, r3, #22
 8008d34:	d402      	bmi.n	8008d3c <_putc_r+0x24>
 8008d36:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d38:	f7ff f9b7 	bl	80080aa <__retarget_lock_acquire_recursive>
 8008d3c:	68a3      	ldr	r3, [r4, #8]
 8008d3e:	3b01      	subs	r3, #1
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	60a3      	str	r3, [r4, #8]
 8008d44:	da05      	bge.n	8008d52 <_putc_r+0x3a>
 8008d46:	69a2      	ldr	r2, [r4, #24]
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	db12      	blt.n	8008d72 <_putc_r+0x5a>
 8008d4c:	b2eb      	uxtb	r3, r5
 8008d4e:	2b0a      	cmp	r3, #10
 8008d50:	d00f      	beq.n	8008d72 <_putc_r+0x5a>
 8008d52:	6823      	ldr	r3, [r4, #0]
 8008d54:	1c5a      	adds	r2, r3, #1
 8008d56:	6022      	str	r2, [r4, #0]
 8008d58:	701d      	strb	r5, [r3, #0]
 8008d5a:	b2ed      	uxtb	r5, r5
 8008d5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d5e:	07da      	lsls	r2, r3, #31
 8008d60:	d405      	bmi.n	8008d6e <_putc_r+0x56>
 8008d62:	89a3      	ldrh	r3, [r4, #12]
 8008d64:	059b      	lsls	r3, r3, #22
 8008d66:	d402      	bmi.n	8008d6e <_putc_r+0x56>
 8008d68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d6a:	f7ff f99f 	bl	80080ac <__retarget_lock_release_recursive>
 8008d6e:	4628      	mov	r0, r5
 8008d70:	bd70      	pop	{r4, r5, r6, pc}
 8008d72:	4629      	mov	r1, r5
 8008d74:	4622      	mov	r2, r4
 8008d76:	4630      	mov	r0, r6
 8008d78:	f7ff f877 	bl	8007e6a <__swbuf_r>
 8008d7c:	4605      	mov	r5, r0
 8008d7e:	e7ed      	b.n	8008d5c <_putc_r+0x44>

08008d80 <memmove>:
 8008d80:	4288      	cmp	r0, r1
 8008d82:	b510      	push	{r4, lr}
 8008d84:	eb01 0402 	add.w	r4, r1, r2
 8008d88:	d902      	bls.n	8008d90 <memmove+0x10>
 8008d8a:	4284      	cmp	r4, r0
 8008d8c:	4623      	mov	r3, r4
 8008d8e:	d807      	bhi.n	8008da0 <memmove+0x20>
 8008d90:	1e43      	subs	r3, r0, #1
 8008d92:	42a1      	cmp	r1, r4
 8008d94:	d008      	beq.n	8008da8 <memmove+0x28>
 8008d96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d9e:	e7f8      	b.n	8008d92 <memmove+0x12>
 8008da0:	4402      	add	r2, r0
 8008da2:	4601      	mov	r1, r0
 8008da4:	428a      	cmp	r2, r1
 8008da6:	d100      	bne.n	8008daa <memmove+0x2a>
 8008da8:	bd10      	pop	{r4, pc}
 8008daa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008dae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008db2:	e7f7      	b.n	8008da4 <memmove+0x24>

08008db4 <_fstat_r>:
 8008db4:	b538      	push	{r3, r4, r5, lr}
 8008db6:	4d07      	ldr	r5, [pc, #28]	; (8008dd4 <_fstat_r+0x20>)
 8008db8:	2300      	movs	r3, #0
 8008dba:	4604      	mov	r4, r0
 8008dbc:	4608      	mov	r0, r1
 8008dbe:	4611      	mov	r1, r2
 8008dc0:	602b      	str	r3, [r5, #0]
 8008dc2:	f7f9 fd00 	bl	80027c6 <_fstat>
 8008dc6:	1c43      	adds	r3, r0, #1
 8008dc8:	d102      	bne.n	8008dd0 <_fstat_r+0x1c>
 8008dca:	682b      	ldr	r3, [r5, #0]
 8008dcc:	b103      	cbz	r3, 8008dd0 <_fstat_r+0x1c>
 8008dce:	6023      	str	r3, [r4, #0]
 8008dd0:	bd38      	pop	{r3, r4, r5, pc}
 8008dd2:	bf00      	nop
 8008dd4:	2000054c 	.word	0x2000054c

08008dd8 <_isatty_r>:
 8008dd8:	b538      	push	{r3, r4, r5, lr}
 8008dda:	4d06      	ldr	r5, [pc, #24]	; (8008df4 <_isatty_r+0x1c>)
 8008ddc:	2300      	movs	r3, #0
 8008dde:	4604      	mov	r4, r0
 8008de0:	4608      	mov	r0, r1
 8008de2:	602b      	str	r3, [r5, #0]
 8008de4:	f7f9 fcff 	bl	80027e6 <_isatty>
 8008de8:	1c43      	adds	r3, r0, #1
 8008dea:	d102      	bne.n	8008df2 <_isatty_r+0x1a>
 8008dec:	682b      	ldr	r3, [r5, #0]
 8008dee:	b103      	cbz	r3, 8008df2 <_isatty_r+0x1a>
 8008df0:	6023      	str	r3, [r4, #0]
 8008df2:	bd38      	pop	{r3, r4, r5, pc}
 8008df4:	2000054c 	.word	0x2000054c

08008df8 <_sbrk_r>:
 8008df8:	b538      	push	{r3, r4, r5, lr}
 8008dfa:	4d06      	ldr	r5, [pc, #24]	; (8008e14 <_sbrk_r+0x1c>)
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	4604      	mov	r4, r0
 8008e00:	4608      	mov	r0, r1
 8008e02:	602b      	str	r3, [r5, #0]
 8008e04:	f7f9 fd08 	bl	8002818 <_sbrk>
 8008e08:	1c43      	adds	r3, r0, #1
 8008e0a:	d102      	bne.n	8008e12 <_sbrk_r+0x1a>
 8008e0c:	682b      	ldr	r3, [r5, #0]
 8008e0e:	b103      	cbz	r3, 8008e12 <_sbrk_r+0x1a>
 8008e10:	6023      	str	r3, [r4, #0]
 8008e12:	bd38      	pop	{r3, r4, r5, pc}
 8008e14:	2000054c 	.word	0x2000054c

08008e18 <memcpy>:
 8008e18:	440a      	add	r2, r1
 8008e1a:	4291      	cmp	r1, r2
 8008e1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e20:	d100      	bne.n	8008e24 <memcpy+0xc>
 8008e22:	4770      	bx	lr
 8008e24:	b510      	push	{r4, lr}
 8008e26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e2e:	4291      	cmp	r1, r2
 8008e30:	d1f9      	bne.n	8008e26 <memcpy+0xe>
 8008e32:	bd10      	pop	{r4, pc}

08008e34 <_realloc_r>:
 8008e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e38:	4680      	mov	r8, r0
 8008e3a:	4614      	mov	r4, r2
 8008e3c:	460e      	mov	r6, r1
 8008e3e:	b921      	cbnz	r1, 8008e4a <_realloc_r+0x16>
 8008e40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e44:	4611      	mov	r1, r2
 8008e46:	f7ff b99f 	b.w	8008188 <_malloc_r>
 8008e4a:	b92a      	cbnz	r2, 8008e58 <_realloc_r+0x24>
 8008e4c:	f7ff f930 	bl	80080b0 <_free_r>
 8008e50:	4625      	mov	r5, r4
 8008e52:	4628      	mov	r0, r5
 8008e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e58:	f000 f81b 	bl	8008e92 <_malloc_usable_size_r>
 8008e5c:	4284      	cmp	r4, r0
 8008e5e:	4607      	mov	r7, r0
 8008e60:	d802      	bhi.n	8008e68 <_realloc_r+0x34>
 8008e62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008e66:	d812      	bhi.n	8008e8e <_realloc_r+0x5a>
 8008e68:	4621      	mov	r1, r4
 8008e6a:	4640      	mov	r0, r8
 8008e6c:	f7ff f98c 	bl	8008188 <_malloc_r>
 8008e70:	4605      	mov	r5, r0
 8008e72:	2800      	cmp	r0, #0
 8008e74:	d0ed      	beq.n	8008e52 <_realloc_r+0x1e>
 8008e76:	42bc      	cmp	r4, r7
 8008e78:	4622      	mov	r2, r4
 8008e7a:	4631      	mov	r1, r6
 8008e7c:	bf28      	it	cs
 8008e7e:	463a      	movcs	r2, r7
 8008e80:	f7ff ffca 	bl	8008e18 <memcpy>
 8008e84:	4631      	mov	r1, r6
 8008e86:	4640      	mov	r0, r8
 8008e88:	f7ff f912 	bl	80080b0 <_free_r>
 8008e8c:	e7e1      	b.n	8008e52 <_realloc_r+0x1e>
 8008e8e:	4635      	mov	r5, r6
 8008e90:	e7df      	b.n	8008e52 <_realloc_r+0x1e>

08008e92 <_malloc_usable_size_r>:
 8008e92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e96:	1f18      	subs	r0, r3, #4
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	bfbc      	itt	lt
 8008e9c:	580b      	ldrlt	r3, [r1, r0]
 8008e9e:	18c0      	addlt	r0, r0, r3
 8008ea0:	4770      	bx	lr
	...

08008ea4 <_init>:
 8008ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ea6:	bf00      	nop
 8008ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eaa:	bc08      	pop	{r3}
 8008eac:	469e      	mov	lr, r3
 8008eae:	4770      	bx	lr

08008eb0 <_fini>:
 8008eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eb2:	bf00      	nop
 8008eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eb6:	bc08      	pop	{r3}
 8008eb8:	469e      	mov	lr, r3
 8008eba:	4770      	bx	lr
